<!DOCTYPE html>
<html lang='zh-CN'>
<link href="/assets/projects/application-a1c87c144c3305b1a22576ead0829ced.css" media="screen" rel="stylesheet" type="text/css" />
<head>
<title>js/jquery.ztree.all.min.js · zTree/zTree_v3 - 码云 Gitee.com</title>
<link href="/assets/favicon-e87ded4710611ed62adc859698277663.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
<meta content='gitee.com/zTree/zTree_v3 git https://gitee.com/zTree/zTree_v3.git' name='go-import'>
<meta charset='utf-8'>
<meta content='always' name='referrer'>
<meta content='码云' property='og:site_name'>
<meta content='Object' property='og:type'>
<meta content='http://gitee.com/zTree/zTree_v3/blob/master/js/jquery.ztree.all.min.js' property='og:url'>
<meta content='https://gitee.com/logo_themecolor.png' itemprop='image' property='og:image'>
<meta content='js/jquery.ztree.all.min.js · zTree/zTree_v3 - 码云 Gitee.com' itemprop='name' property='og:title'>
<meta content='码云(gitee.com)是开源中国推出的代码托管平台，支持 Git 和 SVN，提供免费的私有仓库托管。目前已有超过 300 万的开发者选择码云。' property='og:description'>
<meta content='码云,代码托管,git,Git@OSC,gitee.com,开源,项目管理,版本控制,开源代码,代码分享,项目协作,开源项目托管,免费代码托管,Git代码托管,Git托管服务' name='Keywords'>
<meta content='jQuery 树插件 zTree v3 系列' itemprop='description' name='Description'>

<meta content="IE=edge" http-equiv="X-UA-Compatible" />
<meta content="authenticity_token" name="csrf-param" />
<meta content="s3QDPi+8dhV/yD8VRy5oeis4i4HGpUxuuciO9uUtzik=" name="csrf-token" />

<link href="/assets/application-e4f0f411207e8a9eb63e18fd18a3f78e.css" media="screen" rel="stylesheet" type="text/css" />
<script src="/assets/application-a382a08eac8ba8b42e812b0528509b0a.js" type="text/javascript"></script>
<script src="/assets/lib/jquery.timeago.zh-CN-bcd91c2c27a815fa9a395595874b592b.js" type="text/javascript"></script>

<script type="text/javascript">
//<![CDATA[
window.gon = {};gon.locale="zh-CN";gon.tour_env={"current_user":null,"controller_path":"blob","action_name":"show","original_url":"http://gitee.com/zTree/zTree_v3/blob/master/js/jquery.ztree.all.min.js"};gon.http_clone="https://gitee.com/zTree/zTree_v3.git";gon.user_project="zTree/zTree_v3";gon.manage_branch="管理分支";gon.manage_tag="管理标签";gon.enterprise_id=0;gon.ref="master";
//]]>
</script>
<script src="//res.wx.qq.com/open/js/jweixin-1.2.0.js" type="text/javascript"></script>
<script>
  var title = document.title.replace(/( - Gitee| - 码云)$/, '')
      imgUrl = '';
  
  document.addEventListener('DOMContentLoaded', function(event) {
    var imgUrlEl = document.querySelector('.readme-box .markdown-body > img, .readme-box .markdown-body :not(a) > img');
    imgUrl = imgUrlEl && imgUrlEl.getAttribute('src');
  
    if (!imgUrl) {
      imgUrlEl = document.querySelector('meta[itemprop=image]');
      imgUrl = imgUrlEl && imgUrlEl.getAttribute('content'); 
      imgUrl = imgUrl || "https://gitee.com/logo_themecolor.png";
    }
  
    wx.config({
      debug: false,
      appId: "wxff219d611a159737",
      timestamp: "1551511124",
      nonceStr: "13c8883a32912bf0119fa0bd198f9795",
      signature: "12d2f9a5545fde2e846f1d074fec4d59a8645281",
      jsApiList: [
        'onMenuShareTimeline',
        'onMenuShareAppMessage'
      ]
    });
  
    wx.ready(function () {
      wx.onMenuShareTimeline({
        title: title, // 分享标题
        link: "https://gitee.com/zTree/zTree_v3/blob/master/js/jquery.ztree.all.min.js", // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致
        imgUrl: imgUrl // 分享图标
      });
      wx.onMenuShareAppMessage({
        title: title, // 分享标题
        link: "https://gitee.com/zTree/zTree_v3/blob/master/js/jquery.ztree.all.min.js", // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致
        desc: document.querySelector('meta[name=Description]').getAttribute('content'),
        imgUrl: imgUrl // 分享图标
      });
    });
    wx.error(function(res){
      console.error('err', res)
    });
  })
</script>

<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [['$','$'], ['\\(','\\)']],
    displayMath: [["$$","$$"],["\\[","\\]"]],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'],
    ignoreClass: "container|files",
    processClass: "markdown-body"
  }
});
</script>
<script src="https://gitee.com/uploads/resources/MathJax-2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>

<script>
  var messages = {
    'zh-CN': {
      addResult: '增加 <b>{term}</b>',
      count: '已选择 {count}',
      maxSelections: '最多 {maxCount} 个选择',
      noResults: '未找到结果',
      serverError: '连接服务器时发生错误'
    },
    'zh-TW': {
      addResult: '增加 <b>{term}</b>',
      count: '已選擇 {count}',
      maxSelections: '最多 {maxCount} 個選擇',
      noResults: '未找到結果',
      serverError: '連接服務器時發生錯誤'
    }
  }
  
  if (messages[gon.locale]) {
    $.fn.dropdown.settings.message = messages[gon.locale]
  }
</script>

<!--[if lt IE 10]>
<script>
    window.location.href = "/incompatible.html";
</script>
<![endif]-->
</head>

<body class='git-project lang-zh-CN'>
<script src="/assets/projects/app-f09e144e03620a81dd92b734b0ededb6.js" type="text/javascript"></script>
<header class='common-header fixed noborder' id='git-header-nav'>
<div class='ui container'>
<div class='ui menu'>
<div class='item gitosc-logo'>
<a href="/"><img class='ui inline image' height='28' src='/logo.svg?20171024' width='95'>
<img class='ui inline black image' height='28' src='/logo-black.svg?20171024' width='95'>
</a></div>
<a href="/explore" class="item " title="开源软件">开源软件
</a><a href="/enterprises" class="item " title="企业版">企业版
<sup class='ui red label'>
特惠
</sup>
</a><a href="/education" class="item " title="高校版">高校版
</a><a href="https://blog.gitee.com/" class="item" id="gitee-blog" target="_blank" title="博客">博客
</a><div class='right menu userbar' id='git-nav-user-bar'>
<div class='item'>
<form accept-charset="UTF-8" action="/search" autocomplete="on" data-text-filter="搜索格式不正确" data-text-require="搜索关键字不能少于1个" id="navbar-search-form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
<div class='ui mini fluid input'>
<input id="navbar-search-input" name="q" placeholder="搜索项目、代码片段..." type="text" value="" />
<input id="navbar-search-type" name="type" type="hidden" />
</div>
</form>


</div>
<a href="/signup" class="item">注册
</a><a href="/login" class="item">登录
</a><script>
  $('.destroy-user-session').click(function() {
    $.cookie('access_token', null, { path: '/' });
  })
</script>

</div>
</div>
</div>
</header>

<script>
  Gitee.initNavbar()
  Gitee.initRepoRemoteWay()
</script>

<!--[if lt IE 10]>
<script>
  window.location.href = "/incompatible.html"
</script>
<![endif]-->

<div class='fixed-notice-infos'>
<div class='ui info message' id='git-bulletin'>
<a href=https://www.oschina.net/news/104665/gitee-enterprise-project-view target='_blank'>项目管理再提效 —— 码云企业版项目关联多仓库功能上线</a>
<i class='icon remove' id='remove-bulletin'></i>
</div>
<div class='ui container'>
<div class='flash-messages' id='messages-container'></div>
</div>
<script>
  (function() {
    $(function() {
      var $error_box, alertTip, notify_content, notify_options, template;
  
      template = '<div data-notify="container" class="ui {0} message" role="alert">' + '<i data-notify="dismiss" class="close icon"></i>' + '<span data-notify="message">{2}</span>' + '</div>';
      notify_content = null;
      notify_options = {};
      alertTip = '';
      $error_box = $(".flash_error.flash_error_box");
      if (notify_options.type === 'error' && $error_box.length > 0 && !$.isEmptyObject(notify_content.message)) {
        if (notify_content.message === 'captcha_fail') {
          alertTip = "验证码不正确";
        } else if (notify_content.message === 'captcha_expired') {
          alertTip = "验证码已过期，请点击刷新";
        } else if (notify_content.message === 'not_found_in_database') {
          alertTip = "帐号或者密码错误";
        } else if (notify_content.message === 'not_found_and_show_captcha') {
          alertTip = "帐号或者密码错误";
        } else {
          alertTip = notify_content.message;
        }
        return $error_box.html(alertTip).show();
      } else if (notify_content) {
        notify_options.delay = 3000;
        notify_options.template = template;
        notify_options.offset = {
          x: 10,
          y: 30
        };
        notify_options.element = '#messages-container';
        return $.notify(notify_content, notify_options);
      }
    });
  
  }).call(this);
</script>

</div>
<script>
  (function() {
    $(function() {
      var setCookie;
  
      setCookie = function(name, value) {
        $.cookie(name, value, {
          path: '/',
          expires: 365
        });
      };
      $('#remove-bulletin').on('click', function() {
        setCookie('remove_bulletin', "gitee-maintain-1551082866");
        $('#git-bulletin').hide();
      });
      $('#remove-member-bulletin').on('click', function() {
        setCookie('remove_member_bulletin', "gitee_member_bulletin");
        $(this).parent().hide();
      });
      return $('#remove-gift-bulletin').on('click', function() {
        setCookie('remove_gift_bulletin', "gitee-gift-bulletin");
        $(this).parent().hide();
      });
    });
  
  }).call(this);
</script>

<div class='site-content'>
<div class='git-project-header'>
<div class='fixed-notice-infos'>
<div class='ui info icon floating message green' id='fetch-ok' style='display: none'>
<div class='content'>
<div class='header status-title'>
<i class='info icon status-icon'></i>
代码拉取完成，页面将自动刷新
</div>
</div>
</div>
<div class='ui info icon floating message error' id='fetch-error' style='display: none'>
<div class='content'>
<div class='header status-title'>
<i class='info icon status-icon'></i>
<span class='error_msg'></span>
</div>
</div>
</div>
</div>
<div class='ui container'>
<div class='git-project-categories'>
<a href="/explore">开源项目</a>
<span class='symbol'>></span>
<a href="/explore/starred/web-app-develop">WEB应用开发</a>
<span class='symbol'>></span>
<a href="/explore/starred/jquery-plugins">jQuery插件</a>
<span class='symbol and-symbol'>&</span>
</div>

<div class='git-project-header-details'>
<div class='git-project-header-container'>
<div class='git-project-header-actions'>
<span class='basic ui buttons pointing top left dropdown metrics-radar'>
<div class='ui button project-radar'>
<i class='iconfont icon-radar'></i>
指数
</div>
<div class='ui button action-social-count exponent-total-sorce'>
0
</div>
<div class='menu radar'>
<div class='item radar-menu'>
<div class='hide' data-url='/zTree/zTree_v3/project_radars' id='metrics-radar'>
<div class='title'>
<div class='fisrt-title'>
<div class='project-name' title='zTree_v3'>
zTree_v3
</div>
<div class='gitee-exponent'>
<div class='text'></div>
<div class='exponent-score'></div>
</div>
</div>
<div class='total-percent'>
<div class='percent-header'></div>
<div class='percent-score'></div>
<div class='percent-end'></div>
</div>
</div>
<div class='wrap'></div>
<div class='project-radar-list'>
<div class='descript-contianer'>
<div class='descript-title'>
<p>代码活跃度</p>
<p>社区活跃度</p>
<p>团队健康</p>
<p>流行趋势</p>
<p>影响力</p>
</div>
<div class='descript'>
<p>：与代码提交频次相关</p>
<p>：与项目和用户的issue、pr互动相关</p>
<p>：与团队成员人数和稳定度相关</p>
<p>：与项目近期受关注度相关</p>
<p>：与项目的star、下载量等社交指标相关</p>
</div>
</div>
</div>
<div class='finaltime'></div>
</div>
<script src="/assets/skill_radar/rep_app-65e54f8a68168503c705331f2d8461b9.js" type="text/javascript"></script>

</div>
</div>
</span>
<div class='ui small modal project-donate-modal' id='project-donate-modal'>
<div class='content form-wrapper ui custom form'>
<div class='ui inverted dimmer'>
<div class='ui loader'></div>
</div>
<h3 class='ui creator info header'>
<img alt="25128_ztree" class="ui circular image" src="https://avatar.gitee.com/uploads/28/25128_zTree.png!avatar100?1526027927" />
<div class='content'>
<a href="/zTree" class="name" target="_blank">zTree
</a><p>
仓库: zTree_v3
</p>
<div class='ui sub header'>
(已获得 29 次捐赠)
</div>
</div>
</h3>
<p class='donate-description'>
<span class='mayun-icon my-ic-coffee my-ic-coffee-dims'></span>
项目的发展离不开你的支持，请作者喝杯咖啡吧！
</p>
<div class='ui form'>
<div class='inline field'><label>
捐赠金额:
</label><div class='card-fields nocheckbox'><div class='card-field'>
<div class='ui radio checkbox'>
<input checked="checked" id="ensure_cash_10" name="ensure_cash" type="radio" value="10" /><label>10 元</label>
</div>
</div>
<div class='card-field'>
<div class='ui radio checkbox'>
<input id="ensure_cash_20" name="ensure_cash" type="radio" value="20" /><label>20 元</label>
</div>
</div>
<div class='card-field'>
<div class='ui radio checkbox'>
<input id="ensure_cash_50" name="ensure_cash" type="radio" value="50" /><label>50 元</label>
</div>
</div>
<div class='card-field'>
<div class='ui radio checkbox'>
<input id="ensure_cash_manual" name="ensure_cash" type="radio" value="manual" /><label>其它</label>
</div>
</div></div>
</div>
<div class='inline field' style='display: none'>
<div class='ui labeled fluid input'>
<div class='ui basic label'>其它金额</div>
<input id="manual_cash" max="50000" min="1" name="manual_cash" placeholder="&gt;1元" type="number" value="100" />
</div>
</div>
<div class='inline field'><label>
捐赠人:
</label><div class='ui fluid input'><input id="name" name="name" placeholder="捐赠人的名称" required="required" type="text" /></div>
<div class='ui error text message name-message'></div>
</div>
<div class='inline textarea field'><label>
留言:
</label><textarea name='msg' placeholder='对作者说点什么' required rows='3'>感谢您的开源项目！</textarea>
</div>
<div class='inline pay method field'><label>
支付类型:
</label><div class='ui radio checkbox' title='支付宝'>
<input id="pay_type_alipay" name="pay_type" type="radio" value="alipay" />
<label>
<div class='mayun-icon my-ic-alipay my-ic-alipay-dims'></div>
</label>
</div>
<div class='ui radio checkbox' title='微信'>
<input checked="checked" id="pay_type_wepay" name="pay_type" type="radio" value="wepay" />
<label>
<div class='mayun-icon my-ic-wepay my-ic-wepay-dims'></div>
</label>
</div>
</div>
</div>
</div>
<div class='actions donate-actions'>
<button class='ui orange large pay approve button'>
&emsp;捐赠&emsp;
</button>
&emsp;
<a href="javascript:void(0)" class="cancel">取消</a>
</div>
</div>
<div class='ui small modal wepay-qrcode'>
<i class='iconfont icon-close close'></i>
<div class='header'>
扫描微信二维码支付
<span class='wepay-cash'></span>
</div>
<div class='content weqcode-center'>
<img id='wepay-qrcode' src=''>
</div>
<div class='actions'>
<div class='ui cancel blank button'>取消</div>
<div class='ui ok orange button'>
支付完成
</div>
</div>
</div>
<div class='ui mini modal' id='confirm-alipay-modal'>
<div class='header'>支付提示</div>
<div class='content'>
将跳转至支付宝完成支付
</div>
<div class='actions'>
<div class='ui approve orange button'>
确定
</div>
<div class='ui blank cancel button'>
取消
</div>
</div>
</div>

<span class='ui basic buttons watch-container'>
<a href="/login" class="ui button watch" title="登录以Watch"><i class='iconfont icon-watch'></i>
Watch
</a><a href="/zTree/zTree_v3/watchers" class="ui button action-social-count" title="534">534
</a></span>
<span class='ui basic buttons star-container'>
<a href="/login" class="ui button star" title="你必须登录后才可以star一个仓库"><i class='iconfont icon-star'></i>
Star
</a><a href="/zTree/zTree_v3/stargazers" class="ui button action-social-count" title="1640">1.6k
</a></span>
<span class='ui basic buttons fork-container' data-content='无权 Fork 此仓库'>
<a href="/login" class="ui button fork "><i class='iconfont icon-fork'></i>
Fork
</a><a href="/zTree/zTree_v3/members" class="ui button action-social-count" title="475">475
</a></span>
</div>
<h2 class='git-project-title'>
<span class="project-title"><a href="/gvp" class="ui small label git-project-gvp-badge" target="_blank" title="GVP - 码云最有价值开源项目">GVP</a><a href="/zTree" class="author" title="zTree">zTree</a> / <a href="/zTree/zTree_v3" class="repository" style="padding-bottom: 0px" target="" title="zTree_v3">zTree_v3</a></span><span class="project-badges"><a href="/explore/recommend?lang=JavaScript" class="ui small label proj-language" target="_blank" title="主要编程语言">JavaScript</a></span>

<input id="recomm_at" name="recomm_at" type="hidden" value="2013-11-10 22:38" />
<input id="project_title" name="project_title" type="hidden" value="zTree/zTree_v3" />
</h2>
</div>
</div>
</div>
<div class='row' id='import-result-message' style='padding-top: 0px; display: none'>
<div class='sixteen wide column'>
<div class='ui icon yellow message status-color'>
<i class='info icon status-icon' style='width:60px;padding-right:12px;'></i>
<i class='close icon'></i>
<div class='header status-title'>
同步状态
</div>
<span class='status-message'></span>
</div>
</div>
</div>
<div class='ui small modal' id='modal-fork-project'>
<i class='icon-close iconfont close'></i>
<div class='header'>
Fork 仓库
</div>
<div class='content'>
<div class='fork-info-content'>
<div class='ui segment fork_project_loader'>
<div class='ui active inverted dimmer'>
<div class='ui text loader'>加载中</div>
</div>
</div>
</div>
</div>
<div class='actions fork-action hide'>
<a class='cancel'>&emsp;取消&emsp;</a>
<div class='ui large button orange ok'>&emsp;确认&emsp;</div>
</div>
</div>
<script>
  (function() {
    $('.fork-container').popup({
      inline: true,
      hoverable: true,
      position: 'bottom left'
    });
  
  }).call(this);
</script>
<script>
  (function() {
    $('#modal-fork-project').modal({
      transition: 'fade'
    });
  
    $('.checkbox.sync-wiki').checkbox();
  
  }).call(this);
</script>
<style>
  i.loading{-webkit-animation:icon-loading 1.2s linear infinite;animation:icon-loading 1.2s linear infinite}.qrcode_cs{float:left}.check-sync-wiki{float:left;height:28px;line-height:28px}.check-sync-wiki .sync-wiki-warn{color:#e28560}
</style>
<script>
  $('.metrics-radar').dropdown({ action: 'nothing' });
</script>

<div class='git-project-nav'>
<div class='ui container'>
<div class='ui secondary pointing menu'>
<a href="/zTree/zTree_v3" class="item active"><i class='iconfont icon-code'></i>
代码
</a><a href="/zTree/zTree_v3/issues" class="item "><i class='iconfont icon-issue'></i>
Issues
<span class='ui mini circular label'>
16
</span>
</a><a href="/zTree/zTree_v3/pulls" class="item "><i class='iconfont icon-pull-request'></i>
Pull Requests
<span class='ui mini circular label'>
0
</span>
</a><a href="/zTree/zTree_v3/attach_files" class="item "><i class='iconfont icon-annex'></i>
附件
<span class='ui mini circular label'>0</span>
</a><a href="/zTree/zTree_v3/wikis" class="item "><i class='iconfont icon-wiki'></i>
Wiki
<span class='ui mini circular label'>
1
</span>
</a><a href="/zTree/zTree_v3/graph/master" class="item  "><i class='iconfont icon-statistics'></i>
统计
</a><div class='item project-devops-item'>
<div class='ui pointing top right dropdown project-devops-dropdown'>
<div class='text'>
<i class='iconfont icon-devops'></i>
DevOps
</div>
<i class='dropdown icon'></i>
<div class='menu' style='display:none'>
<a href="https://gitee.com/help/articles/4193" class="item" target="_blank"><img alt="Jenkins_for_gitee" src="/assets/jenkins_for_gitee-a079e18b0276e2d1230294a470364e7b.png" />
<div class='item-title'>
Jenkins for Gitee
</div>
</a><a href="/zTree/zTree_v3/paas/code_pipeline" class="item"><img alt="Code_pipeline" src="/assets/code_pipeline-502dbffc863fcc0b6867628c9e8e163e.svg" />
<div class='item-title'>
阿里云 CodePipeline
</div>
</a><a href="/zTree/zTree_v3/paas/huaweicloud_swr" class="item"><img alt="Huaweirqy" src="/assets/huaweirqy-c24d1adc35c0ecb2bc1e39f6e033835c.png" />
<div class='item-title'>
华为容器云
</div>
</a><a href="/zTree/zTree_v3/paas/huaweicloud_cse" class="item"><img alt="Hauweiwfw" src="/assets/hauweiwfw-9edbcf60ca0a5d0de81d2fc804efa9ac.png" />
<div class='item-title'>
华为微服务平台
</div>
</a><a href="/zTree/zTree_v3/paas/tencent_hub" class="item"><img alt="Tencent_hub" src="/assets/tencent_hub-e263083dfb38e2149d8a9eca5347f4d5.png" />
<div class='item-title'>
Tencent Hub
</div>
</a><a href="/zTree/zTree_v3/paas/select_platform" class="item"><img alt="Mopaas_mini" src="/assets/mopaas_mini-72f0d5aeae31630ae89f624dfb0c23ca.png" />
<div class='item-title'>
MoPaaS V3
</div>
</a></div>
</div>
</div>
<div class='item'>
<div class='ui pointing top right dropdown git-project-service'>
<div class='text'>
<i class='iconfont icon-service'></i>
服务
</div>
<i class='dropdown icon'></i>
<div class='menu' style='display:none'>
<a href="/zTree/zTree_v3/pages" class="item"><img alt="Gitee" src="/assets/gitee-d6fb391be28450a587df71dda0325f60.png" />
<div class='item-title'>
Gitee Pages
</div>
</a><a href="/zTree/zTree_v3/quality_analyses?platform=sonar_qube" class="item"><img alt="Sonar_mini" src="/assets/sonar_mini-6270e37950512a0bf0a05ac5b9b11243.png" />
<div class='item-title'>
质量分析
</div>
</a><a href="/zTree/zTree_v3/quality_analyses?platform=codesafe" class="item"><img alt="Dmws" src="/assets/dmws-7fce33f3494048913a196a40f998a9ba.png" />
<div class='item-title'>
源代码缺陷检测
</div>
</a><button class='ui orange basic button quit-button' id='quiting-button'>
我知道了，不再自动展开
</button>
</div>
</div>
</div>
</div>
</div>
</div>
<script>
  $('.git-project-nav .ui.dropdown').dropdown({ action: 'nothing' });
</script>
<style>
  .git-project-nav i.checkmark.icon {
    color: green;
  }
  #quiting-button {
    display: none;
  }
</style>
<script>
  isSignIn = false
  isClickGuide = false
  $('#git-versions.dropdown').dropdown();
  $.ajax({
    url:"/zTree/zTree_v3/access/add_access_log",
    type:"GET"
  });
  $('#quiting-button').on('click',function() {
    $('.git-project-service').click();
    if (isSignIn) {
      $.post("/projects/set_service_guide")
    }
    $.cookie("Serve_State", true, { expires: 3650, path: '/'})
    $('#quiting-button').hide();
  });
  if (!(isClickGuide || $.cookie("Serve_State") == 'true')) {
    $('.git-project-service').click()
    $('#quiting-button').show()
  }
</script>

</div>
<div class='ui container'>
<div class='register-guide'>
<div class='register-container'>
<div class='regist'>
加入码云
</div>
<div class='description'>
与超过 300 万 开发者一起发现、参与优秀开源项目，私有仓库也完全免费 ：）
</div>
<a href="/signup?from=project-guide" class="ui orange button free-registion">免费加入</a>
<div class='login'>
已有帐号？
<a href="/login?from=project-guide">立即登录</a>
</div>
</div>
</div>

<div class='git-project-content-wrapper'>
<div class='git-project-content' id='git-project-content'>
<div class='row' id='git-detail-clone'>
<div class='git-project-desc-wrapper'>
<div class='git-project-desc'>
<div class='project-introduce'>
<span class='git-project-desc-text'>
jQuery 树插件 zTree v3 系列
</span>
<a class='hide spread' href='javascript:void(0);'>
展开
<i class='caret down icon'></i>
</a>
<a class='retract hide' href='javascript:void(0);'>
收起
<i class='caret up icon'></i>
</a>
<p class='git-project-homepage'>
</p>
</div>
</div>
<div class='git-project-desc-edit flex'>
<div class='sixty-percent ui small input'>
<input name='project[description]' placeholder='描述' type='text' value='jQuery 树插件 zTree v3 系列'>
</div>
<div class='twenty-percent ui small input'>
<input data-regex-value='(^$)|(^(http|https):\/\/(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).*)|(^(http|https):\/\/[a-zA-Z0-9]+([_\-\.]{1}[a-zA-Z0-9]+)*\.[a-zA-Z]{2,10}(:[0-9]{1,10})?(\/.*)?$)' name='project[homepage]' placeholder='主页(eg: https://gitee.com)' type='text'>
</div>
<div class='zero-percent'>
<button class='ui orange button btn-save'>
保存更改
</button>
<button class='ui button btn-cancel-edit'>
取消
</button>
</div>
</div>
<script>
  $(function () {
    new ProjectInfoEditor({
      el: '.git-project-desc-wrapper',
      homepage: null,
      description: "jQuery 树插件 zTree v3 系列",
      url: "/zTree/zTree_v3/update_description",
      modalHelper: Gitee.modalHelper
    })
  })
</script>
</div>

</div>
<div class='git-project-summary' id='git-project-summary'>
<div class='summary-viewer'>
<div class='viewer-wrapper'>
<ul>
<li>
<a href="/zTree/zTree_v3/commits/master"><i class='iconfont icon-commit'></i>
<b>67</b>
次提交
</a></li>
<li>
<a href="/zTree/zTree_v3/branches"><i class='iconfont icon-branches'></i>
<b>1</b>
个分支
</a></li>
<li>
<a href="/zTree/zTree_v3/tags"><i class='iconfont icon-tag'></i>
<b>0</b>
个标签
</a></li>
<li>
<a href="/zTree/zTree_v3/releases"><i class='iconfont icon-release'></i>
<b>0</b>
个发行版
</a></li>
<li>
<a href="/zTree/zTree_v3/contributors?ref=master"><i class='iconfont icon-collaborators'></i>
<b class='contributor-count' data-url='/zTree/zTree_v3/contributors_count?ref=master'></b>
<span class='contributor-text'>
正在获取贡献者
</span>
</a></li>
</ul>
<ul>
<li>
<span class='ui circular label mini' style='background-color: #e34c26'></span>
<b>HTML</b>
<b class='percent'>54.2%</b>
</li>
<li>
<span class='ui circular label mini' style='background-color: #f1e05a'></span>
<b>JavaScript</b>
<b class='percent'>38.8%</b>
</li>
<li>
<span class='ui circular label mini' style='background-color: #563d7c'></span>
<b>CSS</b>
<b class='percent'>7.0%</b>
</li>
</ul>
</div>
</div>
<div class='summary-languages' title='点击查看语言占比'>
<a class='language-color' style='width: 54.2%; background-color: #e34c26;'></a>
<a class='language-color' style='width: 38.8%; background-color: #f1e05a;'></a>
<a class='language-color' style='width: 7.0%; background-color: #563d7c;'></a>
</div>

</div>
<div class='git-project-bread' id='git-project-bread'>
<div class='git-project-right-actions float-right'>
<div class='d-inline-block' id='git-project-tree-actions'>

</div>
<div class='ui orange button' id='btn-dl-or-clone'>
克隆/下载
<i class='dropdown icon'></i>
<div class='git-project-download-panel for-project ui bottom right popup'>
<div class='ui small secondary pointing menu'>
<a class='item active' data-type='http' data-url='https://gitee.com/zTree/zTree_v3.git'>HTTPS</a>
<a class='item' data-type='ssh' data-url='git@gitee.com:zTree/zTree_v3.git'>SSH</a>
</div>
<div class='ui fluid right labeled small input'>
<input id="project_clone_url" name="project_clone_url" onclick="focus();select()" readonly="readonly" type="text" value="https://gitee.com/zTree/zTree_v3.git" />
<div class='ui basic label'>
<div class='ui small basic orange button' data-clipboard-target='#project_clone_url' id='btn-copy-clone-url'>
复制
</div>
</div>
</div>
<hr>
<a href="/login?from=download_repository_zip" class="ui fluid download link button" data-confirm="为了避免盗链导致资源占用，登录后才能下载，确定登录?
强烈推荐: git clone &quot;https://gitee.com/zTree/zTree_v3.git&quot;"><i class='icon download'></i>
下载ZIP
</a><hr>

</div>
<script>
  (function() {
    var $btnCopy, $input, $item, $panel, clipboard, remoteWay;
  
    $input = $('#project_clone_url');
  
    remoteWay = '';
  
    clipboard = new Clipboard('#btn-copy-clone-url');
  
    $panel = $('.git-project-download-panel');
  
    $btnCopy = $('#btn-copy-clone-url');
  
    $panel.find('.menu > .item').on('click', function() {
      var $item;
  
      $item = $(this).addClass('active');
      $item.siblings().removeClass('active');
      $input.val($item.attr('data-url'));
      return $.cookie('remote_way', $item.attr('data-type'), {
        expires: 365,
        path: '/'
      });
    });
  
    $('body').on('click', '#btn-dl-or-clone', function(e) {
      e.stopImmediatePropagation();
      if ($(e.target)[0] === $panel[0] || $(e.target).closest($panel).length) {
        return;
      }
      return $panel.transition('fade up');
    });
  
    $('body').on('click', function() {
      if ($panel.transition('is visible')) {
        return $panel.transition('fade up');
      }
    });
  
    $item = null;
  
    if (remoteWay) {
      $item = $panel.find('.item[data-type="' + remoteWay + '"]');
    }
  
    if (!$item || $item.length < 1) {
      $item = $panel.find('.ui.menu .item').eq(0);
    }
  
    $item.addClass('active').siblings().removeClass('active');
  
    $input.val($item.attr('data-url'));
  
    clipboard.on('success', function() {
      $btnCopy.popup({
        content: '已复制',
        position: 'right center',
        onHidden: function() {
          return $btnCopy.popup('destroy');
        }
      });
      return $btnCopy.popup('show');
    });
  
    clipboard.on('error', function() {
      $btnCopy.popup({
        content: '复制失败，请手动复制',
        position: 'right center',
        onHidden: function() {
          return $btnCopy.popup('destroy');
        }
      });
      return $btnCopy.popup('show');
    });
  
  }).call(this);
</script>

</div>
</div>
<div class='ui horizontal list'>
<div class='item git-project-branch-item'>
<input id="path" name="path" type="hidden" value="js/jquery.ztree.all.min.js" />
<div class='ui top left pointing dropdown gradient button dropdown-has-tabs' id='git-project-branch'>
<input id="ref" name="ref" type="hidden" value="master" />
<div class='default text'>
master
</div>
<i class='dropdown icon'></i>
<div class='menu'>
<div class='ui left icon search input'>
<i class='iconfont icon-search'></i>
<input placeholder='搜索分支' type='text'>
</div>
<div class='tab-menu'>
<div class='tab-menu-action' data-tab='branches'>
<a href="/zTree/zTree_v3/branches/recent" class="ui link button">管理</a>
</div>
<div class='tab-menu-action' data-tab='tags'>
<a href="/zTree/zTree_v3/tags" class="ui link button">管理</a>
</div>
<div class='tab-menu-item' data-placeholder='搜索分支' data-tab='branches'>
分支 (1)
</div>
</div>
<div class='tab scrolling menu' data-tab='branches'>
<div class='item' data-value='master'>master</div>
</div>
</div>
</div>
<script>
  $(function () {
    Gitee.initTabsInDropdown($('#git-project-branch').dropdown({
      fullTextSearch: true,
      onChange: function (value, text) {
        var path = $('#path').val();
        var href = ['/zTree/zTree_v3/tree', value, path].join('/');
        window.location.href = href;
      }
    }));
  })
</script>

</div>
<div class='item' id='git-project-root-actions'>
<div class='repo-index repo-none-index' style='margin-left:0px;'>
<div class='ui horizontal list repo-action-list'>
<div class='item'>
<div class='ui pointing right top dropdown gradient button' id='git-project-file'>
<div class='text'>文件</div>
<i class='dropdown icon'></i>
<div class='menu'>
<div class='disabled item'>新建文件</div>
<div class='disabled item'>上传文件</div>
<a class='item repo-action' id='search-files'>
搜索文件
</a>
</div>
</div>
</div>
<div class='item'>
<a href="/-/ide/project/zTree/zTree_v3/edit/master" class="ui gradient button webide" target="_blank">Web IDE</a>
</div>
<div class='item'>
<a href="/zTree/zTree_v3/widget" class="ui gradient button repo-action"><i class='iconfont icon-widget icon-orange'></i>
挂件
</a></div>
</div>
<script>
  $('#git-project-file').dropdown({ action: 'hide' });
</script>
</div>

</div>
<div class='item breadcrumb_path path-breadcrumb-contrainer' id='git-project-breadcrumb'>
<div class='ui breadcrumb path project-path-breadcrumb' id='path-breadcrumb'>
<a href="/zTree/zTree_v3/tree/master" class="section repo-name" data-direction="back" style="font-weight: bold">zTree_v3
</a><div class='divider'>
/
</div>
<strong>
<a href="/zTree/zTree_v3/tree/master/js" class="section" data-direction="back"><span class='cblue'>
js
</span>
</a></strong>
<div class='divider'>
/
</div>
<strong>
jquery.ztree.all.min.js
</strong>
</div>


</div>
</div>
</div>
<style>
  .ui.dropdown .menu>.header{text-transform:none}
</style>
<script>
  $(document).ready(function () {
    var $gitProjectSummary = $('#git-project-summary');
    var $gitProjectLanguages = $gitProjectSummary.find('.summary-languages');
    var $statsSwitcherWrapper = $gitProjectSummary.find('.viewer-wrapper');
    var $contributorCount = $gitProjectSummary.find('.contributor-count');
    var $contributorText = $gitProjectSummary.find('.contributor-text');
    var contributorsCountUrl = $contributorCount.data('url');
  
    $gitProjectLanguages.on('click', function() {
      $statsSwitcherWrapper.toggleClass('js-lang');
    });
  
    $.ajax({
      url: contributorsCountUrl,
      method: 'GET',
      success: function(data) {
        if (data.status === 1) {
          $contributorCount.text(data.contributors_count);
          $contributorText.text('位贡献者')
        } else {
          $contributorText.text('获取失败')
        }
      }
    });
    var $tip = $('#apk-download-tip');
    if (!$tip.length) {
      return;
    }
    $tip.find('.btn-close').on('click', function () {
      $tip.slideUp();
    });
  });
  (function(){
    function pathAutoRender() {
      var $parent = $('#git-project-bread'),
          $child = $('#git-project-bread').children('.ui.horizontal.list'),
          mainWidth = 0;
      $child.each(function (i,item) {
        mainWidth += $(item).width()
        });
      $('.breadcrumb.path.fork-path').remove();
      if (mainWidth > 995) {
        $('#path-breadcrumb').hide();
        $parent.append('<div class="ui breadcrumb path fork-path">' + $('#path-breadcrumb').html() + '<div/>')
      } else {
        $('#path-breadcrumb').show();
      }
    }
    window.pathAutoRender = pathAutoRender;
    pathAutoRender();
  })();
</script>

<div class='row column tree-holder' id='tree-holder'>

<div class='tree-content-holder' id='tree-content-holder'>
<div class='file_holder'>
<div class='file_title'>
<div class='blob-header-title'>
<div class='blob-description'>
<i class='iconfont icon-readme'></i>
<span class='file_name' title='jquery.ztree.all.min.js'>
jquery.ztree.all.min.js
</span>
<small>62.59 KB</small>
</div>
<div class='options'><div class='ui mini buttons basic'>
<textarea id="blob_raw" name="blob_raw" style="display:none;">
&#x000A;/*&#x000A; * JQuery zTree core v3.5.40&#x000A; * http://treejs.cn/&#x000A; *&#x000A; * Copyright (c) 2010 Hunter.z&#x000A; *&#x000A; * Licensed same as jquery - MIT License&#x000A; * http://www.opensource.org/licenses/mit-license.php&#x000A; *&#x000A; * email: hunter.z@263.net&#x000A; * Date: 2019-01-18&#x000A; */&#x000A;(function(r){var J,K,L,M,N,O,v,t={},w={},x={},P={treeId:&quot;&quot;,treeObj:null,view:{addDiyDom:null,autoCancelSelected:!0,dblClickExpand:!0,expandSpeed:&quot;fast&quot;,fontCss:{},nameIsHTML:!1,selectedMulti:!0,showIcon:!0,showLine:!0,showTitle:!0,txtSelectedEnable:!1},data:{key:{isParent:&quot;isParent&quot;,children:&quot;children&quot;,name:&quot;name&quot;,title:&quot;&quot;,url:&quot;url&quot;,icon:&quot;icon&quot;},simpleData:{enable:!1,idKey:&quot;id&quot;,pIdKey:&quot;pId&quot;,rootPId:null},keep:{parent:!1,leaf:!1}},async:{enable:!1,contentType:&quot;application/x-www-form-urlencoded&quot;,type:&quot;post&quot;,&#x000A;dataType:&quot;text&quot;,headers:{},xhrFields:{},url:&quot;&quot;,autoParam:[],otherParam:[],dataFilter:null},callback:{beforeAsync:null,beforeClick:null,beforeDblClick:null,beforeRightClick:null,beforeMouseDown:null,beforeMouseUp:null,beforeExpand:null,beforeCollapse:null,beforeRemove:null,onAsyncError:null,onAsyncSuccess:null,onNodeCreated:null,onClick:null,onDblClick:null,onRightClick:null,onMouseDown:null,onMouseUp:null,onExpand:null,onCollapse:null,onRemove:null}},y=[function(a){var b=a.treeObj,c=g.event;b.bind(c.NODECREATED,&#x000A;function(b,c,i){h.apply(a.callback.onNodeCreated,[b,c,i])});b.bind(c.CLICK,function(b,c,i,e,k){h.apply(a.callback.onClick,[c,i,e,k])});b.bind(c.EXPAND,function(b,c,i){h.apply(a.callback.onExpand,[b,c,i])});b.bind(c.COLLAPSE,function(b,c,i){h.apply(a.callback.onCollapse,[b,c,i])});b.bind(c.ASYNC_SUCCESS,function(b,c,i,e){h.apply(a.callback.onAsyncSuccess,[b,c,i,e])});b.bind(c.ASYNC_ERROR,function(b,c,i,e,k,g){h.apply(a.callback.onAsyncError,[b,c,i,e,k,g])});b.bind(c.REMOVE,function(b,c,i){h.apply(a.callback.onRemove,&#x000A;[b,c,i])});b.bind(c.SELECTED,function(b,c,i){h.apply(a.callback.onSelected,[c,i])});b.bind(c.UNSELECTED,function(b,c,i){h.apply(a.callback.onUnSelected,[c,i])})}],z=[function(a){var b=g.event;a.treeObj.unbind(b.NODECREATED).unbind(b.CLICK).unbind(b.EXPAND).unbind(b.COLLAPSE).unbind(b.ASYNC_SUCCESS).unbind(b.ASYNC_ERROR).unbind(b.REMOVE).unbind(b.SELECTED).unbind(b.UNSELECTED)}],A=[function(a){var b=e.getCache(a);b||(b={},e.setCache(a,b));b.nodes=[];b.doms=[]}],B=[function(a,b,c,d,f,i){if(c){var m=&#x000A;e.getRoot(a),k=e.nodeChildren(a,c);c.level=b;c.tId=a.treeId+&quot;_&quot;+ ++m.zId;c.parentTId=d?d.tId:null;c.open=typeof c.open==&quot;string&quot;?h.eqs(c.open,&quot;true&quot;):!!c.open;b=e.nodeIsParent(a,c);h.isArray(k)?(e.nodeIsParent(a,c,!0),c.zAsync=!0):(b=e.nodeIsParent(a,c,b),c.open=b&amp;&amp;!a.async.enable?c.open:!1,c.zAsync=!b);c.isFirstNode=f;c.isLastNode=i;c.getParentNode=function(){return e.getNodeCache(a,c.parentTId)};c.getPreNode=function(){return e.getPreNode(a,c)};c.getNextNode=function(){return e.getNextNode(a,c)};&#x000A;c.getIndex=function(){return e.getNodeIndex(a,c)};c.getPath=function(){return e.getNodePath(a,c)};c.isAjaxing=!1;e.fixPIdKeyValue(a,c)}}],u=[function(a){var b=a.target,c=e.getSetting(a.data.treeId),d=&quot;&quot;,f=null,i=&quot;&quot;,m=&quot;&quot;,k=null,j=null,o=null;if(h.eqs(a.type,&quot;mousedown&quot;))m=&quot;mousedown&quot;;else if(h.eqs(a.type,&quot;mouseup&quot;))m=&quot;mouseup&quot;;else if(h.eqs(a.type,&quot;contextmenu&quot;))m=&quot;contextmenu&quot;;else if(h.eqs(a.type,&quot;click&quot;))if(h.eqs(b.tagName,&quot;span&quot;)&amp;&amp;b.getAttribute(&quot;treeNode&quot;+g.id.SWITCH)!==null)d=h.getNodeMainDom(b).id,&#x000A;i=&quot;switchNode&quot;;else{if(o=h.getMDom(c,b,[{tagName:&quot;a&quot;,attrName:&quot;treeNode&quot;+g.id.A}]))d=h.getNodeMainDom(o).id,i=&quot;clickNode&quot;}else if(h.eqs(a.type,&quot;dblclick&quot;)&amp;&amp;(m=&quot;dblclick&quot;,o=h.getMDom(c,b,[{tagName:&quot;a&quot;,attrName:&quot;treeNode&quot;+g.id.A}])))d=h.getNodeMainDom(o).id,i=&quot;switchNode&quot;;if(m.length&gt;0&amp;&amp;d.length==0&amp;&amp;(o=h.getMDom(c,b,[{tagName:&quot;a&quot;,attrName:&quot;treeNode&quot;+g.id.A}])))d=h.getNodeMainDom(o).id;if(d.length&gt;0)switch(f=e.getNodeCache(c,d),i){case &quot;switchNode&quot;:e.nodeIsParent(c,f)?h.eqs(a.type,&quot;click&quot;)||h.eqs(a.type,&#x000A;&quot;dblclick&quot;)&amp;&amp;h.apply(c.view.dblClickExpand,[c.treeId,f],c.view.dblClickExpand)?k=J:i=&quot;&quot;:i=&quot;&quot;;break;case &quot;clickNode&quot;:k=K}switch(m){case &quot;mousedown&quot;:j=L;break;case &quot;mouseup&quot;:j=M;break;case &quot;dblclick&quot;:j=N;break;case &quot;contextmenu&quot;:j=O}return{stop:!1,node:f,nodeEventType:i,nodeEventCallback:k,treeEventType:m,treeEventCallback:j}}],C=[function(a){var b=e.getRoot(a);b||(b={},e.setRoot(a,b));e.nodeChildren(a,b,[]);b.expandTriggerFlag=!1;b.curSelectedList=[];b.noSelection=!0;b.createdNodes=[];b.zId=0;b._ver=&#x000A;(new Date).getTime()}],D=[],E=[],F=[],G=[],H=[],e={addNodeCache:function(a,b){e.getCache(a).nodes[e.getNodeCacheId(b.tId)]=b},getNodeCacheId:function(a){return a.substring(a.lastIndexOf(&quot;_&quot;)+1)},addAfterA:function(a){E.push(a)},addBeforeA:function(a){D.push(a)},addInnerAfterA:function(a){G.push(a)},addInnerBeforeA:function(a){F.push(a)},addInitBind:function(a){y.push(a)},addInitUnBind:function(a){z.push(a)},addInitCache:function(a){A.push(a)},addInitNode:function(a){B.push(a)},addInitProxy:function(a,&#x000A;b){b?u.splice(0,0,a):u.push(a)},addInitRoot:function(a){C.push(a)},addNodesData:function(a,b,c,d){var f=e.nodeChildren(a,b);f?c&gt;=f.length&amp;&amp;(c=-1):(f=e.nodeChildren(a,b,[]),c=-1);if(f.length&gt;0&amp;&amp;c===0)f[0].isFirstNode=!1,j.setNodeLineIcos(a,f[0]);else if(f.length&gt;0&amp;&amp;c&lt;0)f[f.length-1].isLastNode=!1,j.setNodeLineIcos(a,f[f.length-1]);e.nodeIsParent(a,b,!0);c&lt;0?e.nodeChildren(a,b,f.concat(d)):(a=[c,0].concat(d),f.splice.apply(f,a))},addSelectedNode:function(a,b){var c=e.getRoot(a);e.isSelectedNode(a,b)||&#x000A;c.curSelectedList.push(b)},addCreatedNode:function(a,b){(a.callback.onNodeCreated||a.view.addDiyDom)&amp;&amp;e.getRoot(a).createdNodes.push(b)},addZTreeTools:function(a){H.push(a)},exSetting:function(a){r.extend(!0,P,a)},fixPIdKeyValue:function(a,b){a.data.simpleData.enable&amp;&amp;(b[a.data.simpleData.pIdKey]=b.parentTId?b.getParentNode()[a.data.simpleData.idKey]:a.data.simpleData.rootPId)},getAfterA:function(a,b,c){for(var d=0,e=E.length;d&lt;e;d++)E[d].apply(this,arguments)},getBeforeA:function(a,b,c){for(var d=&#x000A;0,e=D.length;d&lt;e;d++)D[d].apply(this,arguments)},getInnerAfterA:function(a,b,c){for(var d=0,e=G.length;d&lt;e;d++)G[d].apply(this,arguments)},getInnerBeforeA:function(a,b,c){for(var d=0,e=F.length;d&lt;e;d++)F[d].apply(this,arguments)},getCache:function(a){return x[a.treeId]},getNodeIndex:function(a,b){if(!b)return null;for(var c=b.parentTId?b.getParentNode():e.getRoot(a),c=e.nodeChildren(a,c),d=0,f=c.length-1;d&lt;=f;d++)if(c[d]===b)return d;return-1},getNextNode:function(a,b){if(!b)return null;for(var c=&#x000A;b.parentTId?b.getParentNode():e.getRoot(a),c=e.nodeChildren(a,c),d=0,f=c.length-1;d&lt;=f;d++)if(c[d]===b)return d==f?null:c[d+1];return null},getNodeByParam:function(a,b,c,d){if(!b||!c)return null;for(var f=0,i=b.length;f&lt;i;f++){var m=b[f];if(m[c]==d)return b[f];m=e.nodeChildren(a,m);if(m=e.getNodeByParam(a,m,c,d))return m}return null},getNodeCache:function(a,b){if(!b)return null;var c=x[a.treeId].nodes[e.getNodeCacheId(b)];return c?c:null},getNodePath:function(a,b){if(!b)return null;var c;(c=b.parentTId?&#x000A;b.getParentNode().getPath():[])&amp;&amp;c.push(b);return c},getNodes:function(a){return e.nodeChildren(a,e.getRoot(a))},getNodesByParam:function(a,b,c,d){if(!b||!c)return[];for(var f=[],i=0,m=b.length;i&lt;m;i++){var k=b[i];k[c]==d&amp;&amp;f.push(k);k=e.nodeChildren(a,k);f=f.concat(e.getNodesByParam(a,k,c,d))}return f},getNodesByParamFuzzy:function(a,b,c,d){if(!b||!c)return[];for(var f=[],d=d.toLowerCase(),i=0,m=b.length;i&lt;m;i++){var k=b[i];typeof k[c]==&quot;string&quot;&amp;&amp;b[i][c].toLowerCase().indexOf(d)&gt;-1&amp;&amp;f.push(k);k=e.nodeChildren(a,&#x000A;k);f=f.concat(e.getNodesByParamFuzzy(a,k,c,d))}return f},getNodesByFilter:function(a,b,c,d,f){if(!b)return d?null:[];for(var i=d?null:[],m=0,k=b.length;m&lt;k;m++){var g=b[m];if(h.apply(c,[g,f],!1)){if(d)return g;i.push(g)}g=e.nodeChildren(a,g);g=e.getNodesByFilter(a,g,c,d,f);if(d&amp;&amp;g)return g;i=d?g:i.concat(g)}return i},getPreNode:function(a,b){if(!b)return null;for(var c=b.parentTId?b.getParentNode():e.getRoot(a),c=e.nodeChildren(a,c),d=0,f=c.length;d&lt;f;d++)if(c[d]===b)return d==0?null:c[d-1];return null},&#x000A;getRoot:function(a){return a?w[a.treeId]:null},getRoots:function(){return w},getSetting:function(a){return t[a]},getSettings:function(){return t},getZTreeTools:function(a){return(a=this.getRoot(this.getSetting(a)))?a.treeTools:null},initCache:function(a){for(var b=0,c=A.length;b&lt;c;b++)A[b].apply(this,arguments)},initNode:function(a,b,c,d,e,i){for(var m=0,g=B.length;m&lt;g;m++)B[m].apply(this,arguments)},initRoot:function(a){for(var b=0,c=C.length;b&lt;c;b++)C[b].apply(this,arguments)},isSelectedNode:function(a,&#x000A;b){for(var c=e.getRoot(a),d=0,f=c.curSelectedList.length;d&lt;f;d++)if(b===c.curSelectedList[d])return!0;return!1},nodeChildren:function(a,b,c){if(!b)return null;a=a.data.key.children;typeof c!==&quot;undefined&quot;&amp;&amp;(b[a]=c);return b[a]},nodeIsParent:function(a,b,c){if(!b)return!1;a=a.data.key.isParent;typeof c!==&quot;undefined&quot;?(typeof c===&quot;string&quot;&amp;&amp;(c=h.eqs(c,&quot;true&quot;)),b[a]=!!c):b[a]=typeof b[a]==&quot;string&quot;?h.eqs(b[a],&quot;true&quot;):!!b[a];return b[a]},nodeName:function(a,b,c){a=a.data.key.name;typeof c!==&quot;undefined&quot;&amp;&amp;&#x000A;(b[a]=c);return&quot;&quot;+b[a]},nodeTitle:function(a,b){return&quot;&quot;+b[a.data.key.title===&quot;&quot;?a.data.key.name:a.data.key.title]},removeNodeCache:function(a,b){var c=e.nodeChildren(a,b);if(c)for(var d=0,f=c.length;d&lt;f;d++)e.removeNodeCache(a,c[d]);e.getCache(a).nodes[e.getNodeCacheId(b.tId)]=null},removeSelectedNode:function(a,b){for(var c=e.getRoot(a),d=0,f=c.curSelectedList.length;d&lt;f;d++)if(b===c.curSelectedList[d]||!e.getNodeCache(a,c.curSelectedList[d].tId))c.curSelectedList.splice(d,1),a.treeObj.trigger(g.event.UNSELECTED,&#x000A;[a.treeId,b]),d--,f--},setCache:function(a,b){x[a.treeId]=b},setRoot:function(a,b){w[a.treeId]=b},setZTreeTools:function(a,b){for(var c=0,d=H.length;c&lt;d;c++)H[c].apply(this,arguments)},transformToArrayFormat:function(a,b){function c(b){d.push(b);(b=e.nodeChildren(a,b))&amp;&amp;(d=d.concat(e.transformToArrayFormat(a,b)))}if(!b)return[];var d=[];if(h.isArray(b))for(var f=0,i=b.length;f&lt;i;f++)c(b[f]);else c(b);return d},transformTozTreeFormat:function(a,b){var c,d,f=a.data.simpleData.idKey,i=a.data.simpleData.pIdKey;&#x000A;if(!f||f==&quot;&quot;||!b)return[];if(h.isArray(b)){var g=[],k={};for(c=0,d=b.length;c&lt;d;c++)k[b[c][f]]=b[c];for(c=0,d=b.length;c&lt;d;c++){var j=k[b[c][i]];if(j&amp;&amp;b[c][f]!=b[c][i]){var o=e.nodeChildren(a,j);o||(o=e.nodeChildren(a,j,[]));o.push(b[c])}else g.push(b[c])}return g}else return[b]}},n={bindEvent:function(a){for(var b=0,c=y.length;b&lt;c;b++)y[b].apply(this,arguments)},unbindEvent:function(a){for(var b=0,c=z.length;b&lt;c;b++)z[b].apply(this,arguments)},bindTree:function(a){var b={treeId:a.treeId},c=a.treeObj;&#x000A;a.view.txtSelectedEnable||c.bind(&quot;selectstart&quot;,v).css({&quot;-moz-user-select&quot;:&quot;-moz-none&quot;});c.bind(&quot;click&quot;,b,n.proxy);c.bind(&quot;dblclick&quot;,b,n.proxy);c.bind(&quot;mouseover&quot;,b,n.proxy);c.bind(&quot;mouseout&quot;,b,n.proxy);c.bind(&quot;mousedown&quot;,b,n.proxy);c.bind(&quot;mouseup&quot;,b,n.proxy);c.bind(&quot;contextmenu&quot;,b,n.proxy)},unbindTree:function(a){a.treeObj.unbind(&quot;selectstart&quot;,v).unbind(&quot;click&quot;,n.proxy).unbind(&quot;dblclick&quot;,n.proxy).unbind(&quot;mouseover&quot;,n.proxy).unbind(&quot;mouseout&quot;,n.proxy).unbind(&quot;mousedown&quot;,n.proxy).unbind(&quot;mouseup&quot;,&#x000A;n.proxy).unbind(&quot;contextmenu&quot;,n.proxy)},doProxy:function(a){for(var b=[],c=0,d=u.length;c&lt;d;c++){var e=u[c].apply(this,arguments);b.push(e);if(e.stop)break}return b},proxy:function(a){var b=e.getSetting(a.data.treeId);if(!h.uCanDo(b,a))return!0;for(var b=n.doProxy(a),c=!0,d=0,f=b.length;d&lt;f;d++){var i=b[d];i.nodeEventCallback&amp;&amp;(c=i.nodeEventCallback.apply(i,[a,i.node])&amp;&amp;c);i.treeEventCallback&amp;&amp;(c=i.treeEventCallback.apply(i,[a,i.node])&amp;&amp;c)}return c}};J=function(a,b){var c=e.getSetting(a.data.treeId);&#x000A;if(b.open){if(h.apply(c.callback.beforeCollapse,[c.treeId,b],!0)==!1)return!0}else if(h.apply(c.callback.beforeExpand,[c.treeId,b],!0)==!1)return!0;e.getRoot(c).expandTriggerFlag=!0;j.switchNode(c,b);return!0};K=function(a,b){var c=e.getSetting(a.data.treeId),d=c.view.autoCancelSelected&amp;&amp;(a.ctrlKey||a.metaKey)&amp;&amp;e.isSelectedNode(c,b)?0:c.view.autoCancelSelected&amp;&amp;(a.ctrlKey||a.metaKey)&amp;&amp;c.view.selectedMulti?2:1;if(h.apply(c.callback.beforeClick,[c.treeId,b,d],!0)==!1)return!0;d===0?j.cancelPreSelectedNode(c,&#x000A;b):j.selectNode(c,b,d===2);c.treeObj.trigger(g.event.CLICK,[a,c.treeId,b,d]);return!0};L=function(a,b){var c=e.getSetting(a.data.treeId);h.apply(c.callback.beforeMouseDown,[c.treeId,b],!0)&amp;&amp;h.apply(c.callback.onMouseDown,[a,c.treeId,b]);return!0};M=function(a,b){var c=e.getSetting(a.data.treeId);h.apply(c.callback.beforeMouseUp,[c.treeId,b],!0)&amp;&amp;h.apply(c.callback.onMouseUp,[a,c.treeId,b]);return!0};N=function(a,b){var c=e.getSetting(a.data.treeId);h.apply(c.callback.beforeDblClick,[c.treeId,b],!0)&amp;&amp;&#x000A;h.apply(c.callback.onDblClick,[a,c.treeId,b]);return!0};O=function(a,b){var c=e.getSetting(a.data.treeId);h.apply(c.callback.beforeRightClick,[c.treeId,b],!0)&amp;&amp;h.apply(c.callback.onRightClick,[a,c.treeId,b]);return typeof c.callback.onRightClick!=&quot;function&quot;};v=function(a){a=a.originalEvent.srcElement.nodeName.toLowerCase();return a===&quot;input&quot;||a===&quot;textarea&quot;};var h={apply:function(a,b,c){return typeof a==&quot;function&quot;?a.apply(Q,b?b:[]):c},canAsync:function(a,b){var c=e.nodeChildren(a,b),d=e.nodeIsParent(a,&#x000A;b);return a.async.enable&amp;&amp;b&amp;&amp;d&amp;&amp;!(b.zAsync||c&amp;&amp;c.length&gt;0)},clone:function(a){if(a===null)return null;var b=h.isArray(a)?[]:{},c;for(c in a)b[c]=a[c]instanceof Date?new Date(a[c].getTime()):typeof a[c]===&quot;object&quot;?h.clone(a[c]):a[c];return b},eqs:function(a,b){return a.toLowerCase()===b.toLowerCase()},isArray:function(a){return Object.prototype.toString.apply(a)===&quot;[object Array]&quot;},isElement:function(a){return typeof HTMLElement===&quot;object&quot;?a instanceof HTMLElement:a&amp;&amp;typeof a===&quot;object&quot;&amp;&amp;a!==null&amp;&amp;&#x000A;a.nodeType===1&amp;&amp;typeof a.nodeName===&quot;string&quot;},$:function(a,b,c){b&amp;&amp;typeof b!=&quot;string&quot;&amp;&amp;(c=b,b=&quot;&quot;);return typeof a==&quot;string&quot;?r(a,c?c.treeObj.get(0).ownerDocument:null):r(&quot;#&quot;+a.tId+b,c?c.treeObj:null)},getMDom:function(a,b,c){if(!b)return null;for(;b&amp;&amp;b.id!==a.treeId;){for(var d=0,e=c.length;b.tagName&amp;&amp;d&lt;e;d++)if(h.eqs(b.tagName,c[d].tagName)&amp;&amp;b.getAttribute(c[d].attrName)!==null)return b;b=b.parentNode}return null},getNodeMainDom:function(a){return r(a).parent(&quot;li&quot;).get(0)||r(a).parentsUntil(&quot;li&quot;).parent().get(0)},&#x000A;isChildOrSelf:function(a,b){return r(a).closest(&quot;#&quot;+b).length&gt;0},uCanDo:function(){return!0}},j={addNodes:function(a,b,c,d,f){var i=e.nodeIsParent(a,b);if(!a.data.keep.leaf||!b||i)if(h.isArray(d)||(d=[d]),a.data.simpleData.enable&amp;&amp;(d=e.transformTozTreeFormat(a,d)),b){var i=l(b,g.id.SWITCH,a),m=l(b,g.id.ICON,a),k=l(b,g.id.UL,a);if(!b.open)j.replaceSwitchClass(b,i,g.folder.CLOSE),j.replaceIcoClass(b,m,g.folder.CLOSE),b.open=!1,k.css({display:&quot;none&quot;});e.addNodesData(a,b,c,d);j.createNodes(a,b.level+&#x000A;1,d,b,c);f||j.expandCollapseParentNode(a,b,!0)}else e.addNodesData(a,e.getRoot(a),c,d),j.createNodes(a,0,d,null,c)},appendNodes:function(a,b,c,d,f,i,g){if(!c)return[];var k=[],h=d?d:e.getRoot(a),h=e.nodeChildren(a,h),o,l;if(!h||f&gt;=h.length-c.length)f=-1;for(var s=0,n=c.length;s&lt;n;s++){var p=c[s];i&amp;&amp;(o=(f===0||h.length==c.length)&amp;&amp;s==0,l=f&lt;0&amp;&amp;s==c.length-1,e.initNode(a,b,p,d,o,l,g),e.addNodeCache(a,p));o=e.nodeIsParent(a,p);l=[];var I=e.nodeChildren(a,p);I&amp;&amp;I.length&gt;0&amp;&amp;(l=j.appendNodes(a,b+1,I,p,-1,&#x000A;i,g&amp;&amp;p.open));g&amp;&amp;(j.makeDOMNodeMainBefore(k,a,p),j.makeDOMNodeLine(k,a,p),e.getBeforeA(a,p,k),j.makeDOMNodeNameBefore(k,a,p),e.getInnerBeforeA(a,p,k),j.makeDOMNodeIcon(k,a,p),e.getInnerAfterA(a,p,k),j.makeDOMNodeNameAfter(k,a,p),e.getAfterA(a,p,k),o&amp;&amp;p.open&amp;&amp;j.makeUlHtml(a,p,k,l.join(&quot;&quot;)),j.makeDOMNodeMainAfter(k,a,p),e.addCreatedNode(a,p))}return k},appendParentULDom:function(a,b){var c=[],d=l(b,a);!d.get(0)&amp;&amp;b.parentTId&amp;&amp;(j.appendParentULDom(a,b.getParentNode()),d=l(b,a));var f=l(b,g.id.UL,a);f.get(0)&amp;&amp;&#x000A;f.remove();f=e.nodeChildren(a,b);f=j.appendNodes(a,b.level+1,f,b,-1,!1,!0);j.makeUlHtml(a,b,c,f.join(&quot;&quot;));d.append(c.join(&quot;&quot;))},asyncNode:function(a,b,c,d){var f,i;f=e.nodeIsParent(a,b);if(b&amp;&amp;!f)return h.apply(d),!1;else if(b&amp;&amp;b.isAjaxing)return!1;else if(h.apply(a.callback.beforeAsync,[a.treeId,b],!0)==!1)return h.apply(d),!1;if(b)b.isAjaxing=!0,l(b,g.id.ICON,a).attr({style:&quot;&quot;,&quot;class&quot;:g.className.BUTTON+&quot; &quot;+g.className.ICO_LOADING});var m={},k=h.apply(a.async.autoParam,[a.treeId,b],a.async.autoParam);&#x000A;for(f=0,i=k.length;b&amp;&amp;f&lt;i;f++){var q=k[f].split(&quot;=&quot;),o=q;q.length&gt;1&amp;&amp;(o=q[1],q=q[0]);m[o]=b[q]}k=h.apply(a.async.otherParam,[a.treeId,b],a.async.otherParam);if(h.isArray(k))for(f=0,i=k.length;f&lt;i;f+=2)m[k[f]]=k[f+1];else for(var n in k)m[n]=k[n];var s=e.getRoot(a)._ver;r.ajax({contentType:a.async.contentType,cache:!1,type:a.async.type,url:h.apply(a.async.url,[a.treeId,b],a.async.url),data:a.async.contentType.indexOf(&quot;application/json&quot;)&gt;-1?JSON.stringify(m):m,dataType:a.async.dataType,headers:a.async.headers,&#x000A;xhrFields:a.async.xhrFields,success:function(i){if(s==e.getRoot(a)._ver){var f=[];try{f=!i||i.length==0?[]:typeof i==&quot;string&quot;?eval(&quot;(&quot;+i+&quot;)&quot;):i}catch(k){f=i}if(b)b.isAjaxing=null,b.zAsync=!0;j.setNodeLineIcos(a,b);f&amp;&amp;f!==&quot;&quot;?(f=h.apply(a.async.dataFilter,[a.treeId,b,f],f),j.addNodes(a,b,-1,f?h.clone(f):[],!!c)):j.addNodes(a,b,-1,[],!!c);a.treeObj.trigger(g.event.ASYNC_SUCCESS,[a.treeId,b,i]);h.apply(d)}},error:function(c,d,i){if(s==e.getRoot(a)._ver){if(b)b.isAjaxing=null;j.setNodeLineIcos(a,b);a.treeObj.trigger(g.event.ASYNC_ERROR,&#x000A;[a.treeId,b,c,d,i])}}});return!0},cancelPreSelectedNode:function(a,b,c){var d=e.getRoot(a).curSelectedList,f,i;for(f=d.length-1;f&gt;=0;f--)if(i=d[f],b===i||!b&amp;&amp;(!c||c!==i))if(l(i,g.id.A,a).removeClass(g.node.CURSELECTED),b){e.removeSelectedNode(a,b);break}else d.splice(f,1),a.treeObj.trigger(g.event.UNSELECTED,[a.treeId,i])},createNodeCallback:function(a){if(a.callback.onNodeCreated||a.view.addDiyDom)for(var b=e.getRoot(a);b.createdNodes.length&gt;0;){var c=b.createdNodes.shift();h.apply(a.view.addDiyDom,&#x000A;[a.treeId,c]);a.callback.onNodeCreated&amp;&amp;a.treeObj.trigger(g.event.NODECREATED,[a.treeId,c])}},createNodes:function(a,b,c,d,f){if(c&amp;&amp;c.length!=0){var i=e.getRoot(a),m=!d||d.open||!!l(e.nodeChildren(a,d)[0],a).get(0);i.createdNodes=[];var b=j.appendNodes(a,b,c,d,f,!0,m),k,h;d?(d=l(d,g.id.UL,a),d.get(0)&amp;&amp;(k=d)):k=a.treeObj;k&amp;&amp;(f&gt;=0&amp;&amp;(h=k.children()[f]),f&gt;=0&amp;&amp;h?r(h).before(b.join(&quot;&quot;)):k.append(b.join(&quot;&quot;)));j.createNodeCallback(a)}},destroy:function(a){a&amp;&amp;(e.initCache(a),e.initRoot(a),n.unbindTree(a),&#x000A;n.unbindEvent(a),a.treeObj.empty(),delete t[a.treeId])},expandCollapseNode:function(a,b,c,d,f){var i=e.getRoot(a),m;if(b){var k=e.nodeChildren(a,b),q=e.nodeIsParent(a,b);if(i.expandTriggerFlag)m=f,f=function(){m&amp;&amp;m();b.open?a.treeObj.trigger(g.event.EXPAND,[a.treeId,b]):a.treeObj.trigger(g.event.COLLAPSE,[a.treeId,b])},i.expandTriggerFlag=!1;if(!b.open&amp;&amp;q&amp;&amp;(!l(b,g.id.UL,a).get(0)||k&amp;&amp;k.length&gt;0&amp;&amp;!l(k[0],a).get(0)))j.appendParentULDom(a,b),j.createNodeCallback(a);if(b.open==c)h.apply(f,[]);else{var c=&#x000A;l(b,g.id.UL,a),i=l(b,g.id.SWITCH,a),o=l(b,g.id.ICON,a);q?(b.open=!b.open,b.iconOpen&amp;&amp;b.iconClose&amp;&amp;o.attr(&quot;style&quot;,j.makeNodeIcoStyle(a,b)),b.open?(j.replaceSwitchClass(b,i,g.folder.OPEN),j.replaceIcoClass(b,o,g.folder.OPEN),d==!1||a.view.expandSpeed==&quot;&quot;?(c.show(),h.apply(f,[])):k&amp;&amp;k.length&gt;0?c.slideDown(a.view.expandSpeed,f):(c.show(),h.apply(f,[]))):(j.replaceSwitchClass(b,i,g.folder.CLOSE),j.replaceIcoClass(b,o,g.folder.CLOSE),d==!1||a.view.expandSpeed==&quot;&quot;||!(k&amp;&amp;k.length&gt;0)?(c.hide(),h.apply(f,[])):&#x000A;c.slideUp(a.view.expandSpeed,f))):h.apply(f,[])}}else h.apply(f,[])},expandCollapseParentNode:function(a,b,c,d,e){b&amp;&amp;(b.parentTId?(j.expandCollapseNode(a,b,c,d),b.parentTId&amp;&amp;j.expandCollapseParentNode(a,b.getParentNode(),c,d,e)):j.expandCollapseNode(a,b,c,d,e))},expandCollapseSonNode:function(a,b,c,d,f){var i=e.getRoot(a),i=b?e.nodeChildren(a,b):e.nodeChildren(a,i),g=b?!1:d,k=e.getRoot(a).expandTriggerFlag;e.getRoot(a).expandTriggerFlag=!1;if(i)for(var h=0,l=i.length;h&lt;l;h++)i[h]&amp;&amp;j.expandCollapseSonNode(a,&#x000A;i[h],c,g);e.getRoot(a).expandTriggerFlag=k;j.expandCollapseNode(a,b,c,d,f)},isSelectedNode:function(a,b){if(!b)return!1;var c=e.getRoot(a).curSelectedList,d;for(d=c.length-1;d&gt;=0;d--)if(b===c[d])return!0;return!1},makeDOMNodeIcon:function(a,b,c){var d=e.nodeName(b,c),d=b.view.nameIsHTML?d:d.replace(/&amp;/g,&quot;&amp;amp;&quot;).replace(/&lt;/g,&quot;&amp;lt;&quot;).replace(/&gt;/g,&quot;&amp;gt;&quot;);a.push(&quot;&lt;span id=&#x27;&quot;,c.tId,g.id.ICON,&quot;&#x27; title=&#x27;&#x27; treeNode&quot;,g.id.ICON,&quot; class=&#x27;&quot;,j.makeNodeIcoClass(b,c),&quot;&#x27; style=&#x27;&quot;,j.makeNodeIcoStyle(b,c),&quot;&#x27;&gt;&lt;/span&gt;&lt;span id=&#x27;&quot;,&#x000A;c.tId,g.id.SPAN,&quot;&#x27; class=&#x27;&quot;,g.className.NAME,&quot;&#x27;&gt;&quot;,d,&quot;&lt;/span&gt;&quot;)},makeDOMNodeLine:function(a,b,c){a.push(&quot;&lt;span id=&#x27;&quot;,c.tId,g.id.SWITCH,&quot;&#x27; title=&#x27;&#x27; class=&#x27;&quot;,j.makeNodeLineClass(b,c),&quot;&#x27; treeNode&quot;,g.id.SWITCH,&quot;&gt;&lt;/span&gt;&quot;)},makeDOMNodeMainAfter:function(a){a.push(&quot;&lt;/li&gt;&quot;)},makeDOMNodeMainBefore:function(a,b,c){a.push(&quot;&lt;li id=&#x27;&quot;,c.tId,&quot;&#x27; class=&#x27;&quot;,g.className.LEVEL,c.level,&quot;&#x27; tabindex=&#x27;0&#x27; hidefocus=&#x27;true&#x27; treenode&gt;&quot;)},makeDOMNodeNameAfter:function(a){a.push(&quot;&lt;/a&gt;&quot;)},makeDOMNodeNameBefore:function(a,b,c){var d=&#x000A;e.nodeTitle(b,c),f=j.makeNodeUrl(b,c),i=j.makeNodeFontCss(b,c),m=[],k;for(k in i)m.push(k,&quot;:&quot;,i[k],&quot;;&quot;);a.push(&quot;&lt;a id=&#x27;&quot;,c.tId,g.id.A,&quot;&#x27; class=&#x27;&quot;,g.className.LEVEL,c.level,&quot;&#x27; treeNode&quot;,g.id.A,&#x27; onclick=&quot;&#x27;,c.click||&quot;&quot;,&#x27;&quot; &#x27;,f!=null&amp;&amp;f.length&gt;0?&quot;href=&#x27;&quot;+f+&quot;&#x27;&quot;:&quot;&quot;,&quot; target=&#x27;&quot;,j.makeNodeTarget(c),&quot;&#x27; style=&#x27;&quot;,m.join(&quot;&quot;),&quot;&#x27;&quot;);h.apply(b.view.showTitle,[b.treeId,c],b.view.showTitle)&amp;&amp;d&amp;&amp;a.push(&quot;title=&#x27;&quot;,d.replace(/&#x27;/g,&quot;&amp;#39;&quot;).replace(/&lt;/g,&quot;&amp;lt;&quot;).replace(/&gt;/g,&quot;&amp;gt;&quot;),&quot;&#x27;&quot;);a.push(&quot;&gt;&quot;)},makeNodeFontCss:function(a,&#x000A;b){var c=h.apply(a.view.fontCss,[a.treeId,b],a.view.fontCss);return c&amp;&amp;typeof c!=&quot;function&quot;?c:{}},makeNodeIcoClass:function(a,b){var c=[&quot;ico&quot;];if(!b.isAjaxing){var d=e.nodeIsParent(a,b);c[0]=(b.iconSkin?b.iconSkin+&quot;_&quot;:&quot;&quot;)+c[0];d?c.push(b.open?g.folder.OPEN:g.folder.CLOSE):c.push(g.folder.DOCU)}return g.className.BUTTON+&quot; &quot;+c.join(&quot;_&quot;)},makeNodeIcoStyle:function(a,b){var c=[];if(!b.isAjaxing){var d=e.nodeIsParent(a,b)&amp;&amp;b.iconOpen&amp;&amp;b.iconClose?b.open?b.iconOpen:b.iconClose:b[a.data.key.icon];d&amp;&amp;c.push(&quot;background:url(&quot;,&#x000A;d,&quot;) 0 0 no-repeat;&quot;);(a.view.showIcon==!1||!h.apply(a.view.showIcon,[a.treeId,b],!0))&amp;&amp;c.push(&quot;width:0px;height:0px;&quot;)}return c.join(&quot;&quot;)},makeNodeLineClass:function(a,b){var c=[];a.view.showLine?b.level==0&amp;&amp;b.isFirstNode&amp;&amp;b.isLastNode?c.push(g.line.ROOT):b.level==0&amp;&amp;b.isFirstNode?c.push(g.line.ROOTS):b.isLastNode?c.push(g.line.BOTTOM):c.push(g.line.CENTER):c.push(g.line.NOLINE);e.nodeIsParent(a,b)?c.push(b.open?g.folder.OPEN:g.folder.CLOSE):c.push(g.folder.DOCU);return j.makeNodeLineClassEx(b)+c.join(&quot;_&quot;)},&#x000A;makeNodeLineClassEx:function(a){return g.className.BUTTON+&quot; &quot;+g.className.LEVEL+a.level+&quot; &quot;+g.className.SWITCH+&quot; &quot;},makeNodeTarget:function(a){return a.target||&quot;_blank&quot;},makeNodeUrl:function(a,b){var c=a.data.key.url;return b[c]?b[c]:null},makeUlHtml:function(a,b,c,d){c.push(&quot;&lt;ul id=&#x27;&quot;,b.tId,g.id.UL,&quot;&#x27; class=&#x27;&quot;,g.className.LEVEL,b.level,&quot; &quot;,j.makeUlLineClass(a,b),&quot;&#x27; style=&#x27;display:&quot;,b.open?&quot;block&quot;:&quot;none&quot;,&quot;&#x27;&gt;&quot;);c.push(d);c.push(&quot;&lt;/ul&gt;&quot;)},makeUlLineClass:function(a,b){return a.view.showLine&amp;&amp;!b.isLastNode?&#x000A;g.line.LINE:&quot;&quot;},removeChildNodes:function(a,b){if(b){var c=e.nodeChildren(a,b);if(c){for(var d=0,f=c.length;d&lt;f;d++)e.removeNodeCache(a,c[d]);e.removeSelectedNode(a);delete b[a.data.key.children];a.data.keep.parent?l(b,g.id.UL,a).empty():(e.nodeIsParent(a,b,!1),b.open=!1,c=l(b,g.id.SWITCH,a),d=l(b,g.id.ICON,a),j.replaceSwitchClass(b,c,g.folder.DOCU),j.replaceIcoClass(b,d,g.folder.DOCU),l(b,g.id.UL,a).remove())}}},scrollIntoView:function(a,b){if(b)if(typeof Element===&quot;undefined&quot;){var c=a.treeObj.get(0).getBoundingClientRect(),&#x000A;d=b.getBoundingClientRect();(d.top&lt;c.top||d.bottom&gt;c.bottom||d.right&gt;c.right||d.left&lt;c.left)&amp;&amp;b.scrollIntoView()}else{if(!Element.prototype.scrollIntoViewIfNeeded)Element.prototype.scrollIntoViewIfNeeded=function(a){function b(a,c){return{start:a,length:c,end:a+c}}function c(b,d){return!1===a||d.start&lt;b.end&amp;&amp;b.start&lt;d.end?Math.max(b.end-d.length,Math.min(d.start,b.start)):(b.start+b.end-d.length)/2}function d(a,b){return{x:a,y:b,translate:function(c,i){return d(a+c,b+i)}}}function e(a,b){for(;a;)b=&#x000A;b.translate(a.offsetLeft,a.offsetTop),a=a.offsetParent;return b}for(var g=e(this,d(0,0)),j=d(this.offsetWidth,this.offsetHeight),h=this.parentNode,l;h instanceof HTMLElement;)l=e(h,d(h.clientLeft,h.clientTop)),h.scrollLeft=c(b(g.x-l.x,j.x),b(h.scrollLeft,h.clientWidth)),h.scrollTop=c(b(g.y-l.y,j.y),b(h.scrollTop,h.clientHeight)),g=g.translate(-h.scrollLeft,-h.scrollTop),h=h.parentNode};b.scrollIntoViewIfNeeded()}},setFirstNode:function(a,b){var c=e.nodeChildren(a,b);if(c.length&gt;0)c[0].isFirstNode=&#x000A;!0},setLastNode:function(a,b){var c=e.nodeChildren(a,b);if(c.length&gt;0)c[c.length-1].isLastNode=!0},removeNode:function(a,b){var c=e.getRoot(a),d=b.parentTId?b.getParentNode():c;b.isFirstNode=!1;b.isLastNode=!1;b.getPreNode=function(){return null};b.getNextNode=function(){return null};if(e.getNodeCache(a,b.tId)){l(b,a).remove();e.removeNodeCache(a,b);e.removeSelectedNode(a,b);for(var f=e.nodeChildren(a,d),i=0,h=f.length;i&lt;h;i++)if(f[i].tId==b.tId){f.splice(i,1);break}j.setFirstNode(a,d);j.setLastNode(a,&#x000A;d);var k,i=f.length;if(!a.data.keep.parent&amp;&amp;i==0)e.nodeIsParent(a,d,!1),d.open=!1,delete d[a.data.key.children],i=l(d,g.id.UL,a),h=l(d,g.id.SWITCH,a),k=l(d,g.id.ICON,a),j.replaceSwitchClass(d,h,g.folder.DOCU),j.replaceIcoClass(d,k,g.folder.DOCU),i.css(&quot;display&quot;,&quot;none&quot;);else if(a.view.showLine&amp;&amp;i&gt;0){var q=f[i-1],i=l(q,g.id.UL,a),h=l(q,g.id.SWITCH,a);k=l(q,g.id.ICON,a);d==c?f.length==1?j.replaceSwitchClass(q,h,g.line.ROOT):(c=l(f[0],g.id.SWITCH,a),j.replaceSwitchClass(f[0],c,g.line.ROOTS),j.replaceSwitchClass(q,&#x000A;h,g.line.BOTTOM)):j.replaceSwitchClass(q,h,g.line.BOTTOM);i.removeClass(g.line.LINE)}}},replaceIcoClass:function(a,b,c){if(b&amp;&amp;!a.isAjaxing&amp;&amp;(a=b.attr(&quot;class&quot;),a!=void 0)){a=a.split(&quot;_&quot;);switch(c){case g.folder.OPEN:case g.folder.CLOSE:case g.folder.DOCU:a[a.length-1]=c}b.attr(&quot;class&quot;,a.join(&quot;_&quot;))}},replaceSwitchClass:function(a,b,c){if(b){var d=b.attr(&quot;class&quot;);if(d!=void 0){d=d.split(&quot;_&quot;);switch(c){case g.line.ROOT:case g.line.ROOTS:case g.line.CENTER:case g.line.BOTTOM:case g.line.NOLINE:d[0]=j.makeNodeLineClassEx(a)+&#x000A;c;break;case g.folder.OPEN:case g.folder.CLOSE:case g.folder.DOCU:d[1]=c}b.attr(&quot;class&quot;,d.join(&quot;_&quot;));c!==g.folder.DOCU?b.removeAttr(&quot;disabled&quot;):b.attr(&quot;disabled&quot;,&quot;disabled&quot;)}}},selectNode:function(a,b,c){c||j.cancelPreSelectedNode(a,null,b);l(b,g.id.A,a).addClass(g.node.CURSELECTED);e.addSelectedNode(a,b);a.treeObj.trigger(g.event.SELECTED,[a.treeId,b])},setNodeFontCss:function(a,b){var c=l(b,g.id.A,a),d=j.makeNodeFontCss(a,b);d&amp;&amp;c.css(d)},setNodeLineIcos:function(a,b){if(b){var c=l(b,g.id.SWITCH,&#x000A;a),d=l(b,g.id.UL,a),f=l(b,g.id.ICON,a),i=j.makeUlLineClass(a,b);i.length==0?d.removeClass(g.line.LINE):d.addClass(i);c.attr(&quot;class&quot;,j.makeNodeLineClass(a,b));e.nodeIsParent(a,b)?c.removeAttr(&quot;disabled&quot;):c.attr(&quot;disabled&quot;,&quot;disabled&quot;);f.removeAttr(&quot;style&quot;);f.attr(&quot;style&quot;,j.makeNodeIcoStyle(a,b));f.attr(&quot;class&quot;,j.makeNodeIcoClass(a,b))}},setNodeName:function(a,b){var c=e.nodeTitle(a,b),d=l(b,g.id.SPAN,a);d.empty();a.view.nameIsHTML?d.html(e.nodeName(a,b)):d.text(e.nodeName(a,b));h.apply(a.view.showTitle,&#x000A;[a.treeId,b],a.view.showTitle)&amp;&amp;l(b,g.id.A,a).attr(&quot;title&quot;,!c?&quot;&quot;:c)},setNodeTarget:function(a,b){l(b,g.id.A,a).attr(&quot;target&quot;,j.makeNodeTarget(b))},setNodeUrl:function(a,b){var c=l(b,g.id.A,a),d=j.makeNodeUrl(a,b);d==null||d.length==0?c.removeAttr(&quot;href&quot;):c.attr(&quot;href&quot;,d)},switchNode:function(a,b){b.open||!h.canAsync(a,b)?j.expandCollapseNode(a,b,!b.open):a.async.enable?j.asyncNode(a,b)||j.expandCollapseNode(a,b,!b.open):b&amp;&amp;j.expandCollapseNode(a,b,!b.open)}};r.fn.zTree={consts:{className:{BUTTON:&quot;button&quot;,&#x000A;LEVEL:&quot;level&quot;,ICO_LOADING:&quot;ico_loading&quot;,SWITCH:&quot;switch&quot;,NAME:&quot;node_name&quot;},event:{NODECREATED:&quot;ztree_nodeCreated&quot;,CLICK:&quot;ztree_click&quot;,EXPAND:&quot;ztree_expand&quot;,COLLAPSE:&quot;ztree_collapse&quot;,ASYNC_SUCCESS:&quot;ztree_async_success&quot;,ASYNC_ERROR:&quot;ztree_async_error&quot;,REMOVE:&quot;ztree_remove&quot;,SELECTED:&quot;ztree_selected&quot;,UNSELECTED:&quot;ztree_unselected&quot;},id:{A:&quot;_a&quot;,ICON:&quot;_ico&quot;,SPAN:&quot;_span&quot;,SWITCH:&quot;_switch&quot;,UL:&quot;_ul&quot;},line:{ROOT:&quot;root&quot;,ROOTS:&quot;roots&quot;,CENTER:&quot;center&quot;,BOTTOM:&quot;bottom&quot;,NOLINE:&quot;noline&quot;,LINE:&quot;line&quot;},folder:{OPEN:&quot;open&quot;,&#x000A;CLOSE:&quot;close&quot;,DOCU:&quot;docu&quot;},node:{CURSELECTED:&quot;curSelectedNode&quot;}},_z:{tools:h,view:j,event:n,data:e},getZTreeObj:function(a){return(a=e.getZTreeTools(a))?a:null},destroy:function(a){if(a&amp;&amp;a.length&gt;0)j.destroy(e.getSetting(a));else for(var b in t)j.destroy(t[b])},init:function(a,b,c){var d=h.clone(P);r.extend(!0,d,b);d.treeId=a.attr(&quot;id&quot;);d.treeObj=a;d.treeObj.empty();t[d.treeId]=d;if(typeof document.body.style.maxHeight===&quot;undefined&quot;)d.view.expandSpeed=&quot;&quot;;e.initRoot(d);a=e.getRoot(d);c=c?h.clone(h.isArray(c)?&#x000A;c:[c]):[];d.data.simpleData.enable?e.nodeChildren(d,a,e.transformTozTreeFormat(d,c)):e.nodeChildren(d,a,c);e.initCache(d);n.unbindTree(d);n.bindTree(d);n.unbindEvent(d);n.bindEvent(d);var f={setting:d,addNodes:function(a,b,c,f){function g(){j.addNodes(d,a,b,n,f==!0)}a||(a=null);var l=e.nodeIsParent(d,a);if(a&amp;&amp;!l&amp;&amp;d.data.keep.leaf)return null;l=parseInt(b,10);isNaN(l)?(f=!!c,c=b,b=-1):b=l;if(!c)return null;var n=h.clone(h.isArray(c)?c:[c]);h.canAsync(d,a)?j.asyncNode(d,a,f,g):g();return n},cancelSelectedNode:function(a){j.cancelPreSelectedNode(d,&#x000A;a)},destroy:function(){j.destroy(d)},expandAll:function(a){a=!!a;j.expandCollapseSonNode(d,null,a,!0);return a},expandNode:function(a,b,c,f,g){function n(){var b=l(a,d).get(0);b&amp;&amp;f!==!1&amp;&amp;j.scrollIntoView(d,b)}if(!a||!e.nodeIsParent(d,a))return null;b!==!0&amp;&amp;b!==!1&amp;&amp;(b=!a.open);if((g=!!g)&amp;&amp;b&amp;&amp;h.apply(d.callback.beforeExpand,[d.treeId,a],!0)==!1)return null;else if(g&amp;&amp;!b&amp;&amp;h.apply(d.callback.beforeCollapse,[d.treeId,a],!0)==!1)return null;b&amp;&amp;a.parentTId&amp;&amp;j.expandCollapseParentNode(d,a.getParentNode(),&#x000A;b,!1);if(b===a.open&amp;&amp;!c)return null;e.getRoot(d).expandTriggerFlag=g;!h.canAsync(d,a)&amp;&amp;c?j.expandCollapseSonNode(d,a,b,!0,n):(a.open=!b,j.switchNode(this.setting,a),n());return b},getNodes:function(){return e.getNodes(d)},getNodeByParam:function(a,b,c){return!a?null:e.getNodeByParam(d,c?e.nodeChildren(d,c):e.getNodes(d),a,b)},getNodeByTId:function(a){return e.getNodeCache(d,a)},getNodesByParam:function(a,b,c){return!a?null:e.getNodesByParam(d,c?e.nodeChildren(d,c):e.getNodes(d),a,b)},getNodesByParamFuzzy:function(a,&#x000A;b,c){return!a?null:e.getNodesByParamFuzzy(d,c?e.nodeChildren(d,c):e.getNodes(d),a,b)},getNodesByFilter:function(a,b,c,f){b=!!b;return!a||typeof a!=&quot;function&quot;?b?null:[]:e.getNodesByFilter(d,c?e.nodeChildren(d,c):e.getNodes(d),a,b,f)},getNodeIndex:function(a){if(!a)return null;for(var b=a.parentTId?a.getParentNode():e.getRoot(d),b=e.nodeChildren(d,b),c=0,f=b.length;c&lt;f;c++)if(b[c]==a)return c;return-1},getSelectedNodes:function(){for(var a=[],b=e.getRoot(d).curSelectedList,c=0,f=b.length;c&lt;f;c++)a.push(b[c]);&#x000A;return a},isSelectedNode:function(a){return e.isSelectedNode(d,a)},reAsyncChildNodesPromise:function(a,b,c){return new Promise(function(d,e){try{f.reAsyncChildNodes(a,b,c,function(){d(a)})}catch(g){e(g)}})},reAsyncChildNodes:function(a,b,c,f){if(this.setting.async.enable){var h=!a;h&amp;&amp;(a=e.getRoot(d));if(b==&quot;refresh&quot;){for(var b=e.nodeChildren(d,a),n=0,r=b?b.length:0;n&lt;r;n++)e.removeNodeCache(d,b[n]);e.removeSelectedNode(d);e.nodeChildren(d,a,[]);h?this.setting.treeObj.empty():l(a,g.id.UL,d).empty()}j.asyncNode(this.setting,&#x000A;h?null:a,!!c,f)}},refresh:function(){this.setting.treeObj.empty();var a=e.getRoot(d),b=e.nodeChildren(d,a);e.initRoot(d);e.nodeChildren(d,a,b);e.initCache(d);j.createNodes(d,0,e.nodeChildren(d,a),null,-1)},removeChildNodes:function(a){if(!a)return null;var b=e.nodeChildren(d,a);j.removeChildNodes(d,a);return b?b:null},removeNode:function(a,b){a&amp;&amp;(b=!!b,b&amp;&amp;h.apply(d.callback.beforeRemove,[d.treeId,a],!0)==!1||(j.removeNode(d,a),b&amp;&amp;this.setting.treeObj.trigger(g.event.REMOVE,[d.treeId,a])))},selectNode:function(a,&#x000A;b,c){function e(){if(!c){var b=l(a,d).get(0);j.scrollIntoView(d,b)}}if(a&amp;&amp;h.uCanDo(d)){b=d.view.selectedMulti&amp;&amp;b;if(a.parentTId)j.expandCollapseParentNode(d,a.getParentNode(),!0,!1,e);else if(!c)try{l(a,d).focus().blur()}catch(f){}j.selectNode(d,a,b)}},transformTozTreeNodes:function(a){return e.transformTozTreeFormat(d,a)},transformToArray:function(a){return e.transformToArrayFormat(d,a)},updateNode:function(a){a&amp;&amp;l(a,d).get(0)&amp;&amp;h.uCanDo(d)&amp;&amp;(j.setNodeName(d,a),j.setNodeTarget(d,a),j.setNodeUrl(d,&#x000A;a),j.setNodeLineIcos(d,a),j.setNodeFontCss(d,a))}};a.treeTools=f;e.setZTreeTools(d,f);(c=e.nodeChildren(d,a))&amp;&amp;c.length&gt;0?j.createNodes(d,0,c,null,-1):d.async.enable&amp;&amp;d.async.url&amp;&amp;d.async.url!==&quot;&quot;&amp;&amp;j.asyncNode(d);return f}};var Q=r.fn.zTree,l=h.$,g=Q.consts})(jQuery);&#x000A;&#x000A;/*&#x000A; * JQuery zTree excheck v3.5.40&#x000A; * http://treejs.cn/&#x000A; *&#x000A; * Copyright (c) 2010 Hunter.z&#x000A; *&#x000A; * Licensed same as jquery - MIT License&#x000A; * http://www.opensource.org/licenses/mit-license.php&#x000A; *&#x000A; * email: hunter.z@263.net&#x000A; * Date: 2019-01-18&#x000A; */&#x000A;(function(m){var p,q,r,o={event:{CHECK:&quot;ztree_check&quot;},id:{CHECK:&quot;_check&quot;},checkbox:{STYLE:&quot;checkbox&quot;,DEFAULT:&quot;chk&quot;,DISABLED:&quot;disable&quot;,FALSE:&quot;false&quot;,TRUE:&quot;true&quot;,FULL:&quot;full&quot;,PART:&quot;part&quot;,FOCUS:&quot;focus&quot;},radio:{STYLE:&quot;radio&quot;,TYPE_ALL:&quot;all&quot;,TYPE_LEVEL:&quot;level&quot;}},v={check:{enable:!1,autoCheckTrigger:!1,chkStyle:o.checkbox.STYLE,nocheckInherit:!1,chkDisabledInherit:!1,radioType:o.radio.TYPE_LEVEL,chkboxType:{Y:&quot;ps&quot;,N:&quot;ps&quot;}},data:{key:{checked:&quot;checked&quot;}},callback:{beforeCheck:null,onCheck:null}};p=function(c,&#x000A;a){if(a.chkDisabled===!0)return!1;var b=f.getSetting(c.data.treeId);if(i.apply(b.callback.beforeCheck,[b.treeId,a],!0)==!1)return!0;var d=f.nodeChecked(b,a);f.nodeChecked(b,a,!d);e.checkNodeRelation(b,a);d=n(a,h.id.CHECK,b);e.setChkClass(b,d,a);e.repairParentChkClassWithSelf(b,a);b.treeObj.trigger(h.event.CHECK,[c,b.treeId,a]);return!0};q=function(c,a){if(a.chkDisabled===!0)return!1;var b=f.getSetting(c.data.treeId),d=n(a,h.id.CHECK,b);a.check_Focus=!0;e.setChkClass(b,d,a);return!0};r=function(c,&#x000A;a){if(a.chkDisabled===!0)return!1;var b=f.getSetting(c.data.treeId),d=n(a,h.id.CHECK,b);a.check_Focus=!1;e.setChkClass(b,d,a);return!0};m.extend(!0,m.fn.zTree.consts,o);m.extend(!0,m.fn.zTree._z,{tools:{},view:{checkNodeRelation:function(c,a){var b,d,j;d=h.radio;b=f.nodeChecked(c,a);if(c.check.chkStyle==d.STYLE){var g=f.getRadioCheckedList(c);if(b)if(c.check.radioType==d.TYPE_ALL){for(d=g.length-1;d&gt;=0;d--){b=g[d];var k=f.nodeChecked(c,b);k&amp;&amp;b!=a&amp;&amp;(f.nodeChecked(c,b,!1),g.splice(d,1),e.setChkClass(c,&#x000A;n(b,h.id.CHECK,c),b),b.parentTId!=a.parentTId&amp;&amp;e.repairParentChkClassWithSelf(c,b))}g.push(a)}else{g=a.parentTId?a.getParentNode():f.getRoot(c);g=f.nodeChildren(c,g);for(d=0,j=g.length;d&lt;j;d++)if(b=g[d],(k=f.nodeChecked(c,b))&amp;&amp;b!=a)f.nodeChecked(c,b,!1),e.setChkClass(c,n(b,h.id.CHECK,c),b)}else if(c.check.radioType==d.TYPE_ALL)for(d=0,j=g.length;d&lt;j;d++)if(a==g[d]){g.splice(d,1);break}}else g=f.nodeChildren(c,a),b&amp;&amp;(!g||g.length==0||c.check.chkboxType.Y.indexOf(&quot;s&quot;)&gt;-1)&amp;&amp;e.setSonNodeCheckBox(c,a,&#x000A;!0),!b&amp;&amp;(!g||g.length==0||c.check.chkboxType.N.indexOf(&quot;s&quot;)&gt;-1)&amp;&amp;e.setSonNodeCheckBox(c,a,!1),b&amp;&amp;c.check.chkboxType.Y.indexOf(&quot;p&quot;)&gt;-1&amp;&amp;e.setParentNodeCheckBox(c,a,!0),!b&amp;&amp;c.check.chkboxType.N.indexOf(&quot;p&quot;)&gt;-1&amp;&amp;e.setParentNodeCheckBox(c,a,!1)},makeChkClass:function(c,a){var b=h.checkbox,d=h.radio,j=&quot;&quot;,g=f.nodeChecked(c,a),j=a.chkDisabled===!0?b.DISABLED:a.halfCheck?b.PART:c.check.chkStyle==d.STYLE?a.check_Child_State&lt;1?b.FULL:b.PART:g?a.check_Child_State===2||a.check_Child_State===-1?b.FULL:b.PART:&#x000A;a.check_Child_State&lt;1?b.FULL:b.PART,d=c.check.chkStyle+&quot;_&quot;+(g?b.TRUE:b.FALSE)+&quot;_&quot;+j,d=a.check_Focus&amp;&amp;a.chkDisabled!==!0?d+&quot;_&quot;+b.FOCUS:d;return h.className.BUTTON+&quot; &quot;+b.DEFAULT+&quot; &quot;+d},repairAllChk:function(c,a){if(c.check.enable&amp;&amp;c.check.chkStyle===h.checkbox.STYLE)for(var b=f.getRoot(c),b=f.nodeChildren(c,b),d=0,j=b.length;d&lt;j;d++){var g=b[d];g.nocheck!==!0&amp;&amp;g.chkDisabled!==!0&amp;&amp;f.nodeChecked(c,g,a);e.setSonNodeCheckBox(c,g,a)}},repairChkClass:function(c,a){if(a&amp;&amp;(f.makeChkFlag(c,a),a.nocheck!==!0)){var b=&#x000A;n(a,h.id.CHECK,c);e.setChkClass(c,b,a)}},repairParentChkClass:function(c,a){if(a&amp;&amp;a.parentTId){var b=a.getParentNode();e.repairChkClass(c,b);e.repairParentChkClass(c,b)}},repairParentChkClassWithSelf:function(c,a){if(a){var b=f.nodeChildren(c,a);b&amp;&amp;b.length&gt;0?e.repairParentChkClass(c,b[0]):e.repairParentChkClass(c,a)}},repairSonChkDisabled:function(c,a,b,d){if(a){if(a.chkDisabled!=b)a.chkDisabled=b;e.repairChkClass(c,a);if((a=f.nodeChildren(c,a))&amp;&amp;d)for(var j=0,g=a.length;j&lt;g;j++)e.repairSonChkDisabled(c,&#x000A;a[j],b,d)}},repairParentChkDisabled:function(c,a,b,d){if(a){if(a.chkDisabled!=b&amp;&amp;d)a.chkDisabled=b;e.repairChkClass(c,a);e.repairParentChkDisabled(c,a.getParentNode(),b,d)}},setChkClass:function(c,a,b){a&amp;&amp;(b.nocheck===!0?a.hide():a.show(),a.attr(&quot;class&quot;,e.makeChkClass(c,b)))},setParentNodeCheckBox:function(c,a,b,d){var j=n(a,h.id.CHECK,c);d||(d=a);f.makeChkFlag(c,a);a.nocheck!==!0&amp;&amp;a.chkDisabled!==!0&amp;&amp;(f.nodeChecked(c,a,b),e.setChkClass(c,j,a),c.check.autoCheckTrigger&amp;&amp;a!=d&amp;&amp;c.treeObj.trigger(h.event.CHECK,&#x000A;[null,c.treeId,a]));if(a.parentTId){j=!0;if(!b)for(var g=f.nodeChildren(c,a.getParentNode()),k=0,w=g.length;k&lt;w;k++){var l=g[k],i=f.nodeChecked(c,l);if(l.nocheck!==!0&amp;&amp;l.chkDisabled!==!0&amp;&amp;i||(l.nocheck===!0||l.chkDisabled===!0)&amp;&amp;l.check_Child_State&gt;0){j=!1;break}}j&amp;&amp;e.setParentNodeCheckBox(c,a.getParentNode(),b,d)}},setSonNodeCheckBox:function(c,a,b,d){if(a){var j=n(a,h.id.CHECK,c);d||(d=a);var g=!1,k=f.nodeChildren(c,a);if(k)for(var i=0,l=k.length;i&lt;l;i++){var m=k[i];e.setSonNodeCheckBox(c,m,b,d);&#x000A;m.chkDisabled===!0&amp;&amp;(g=!0)}if(a!=f.getRoot(c)&amp;&amp;a.chkDisabled!==!0){g&amp;&amp;a.nocheck!==!0&amp;&amp;f.makeChkFlag(c,a);if(a.nocheck!==!0&amp;&amp;a.chkDisabled!==!0){if(f.nodeChecked(c,a,b),!g)a.check_Child_State=k&amp;&amp;k.length&gt;0?b?2:0:-1}else a.check_Child_State=-1;e.setChkClass(c,j,a);c.check.autoCheckTrigger&amp;&amp;a!=d&amp;&amp;a.nocheck!==!0&amp;&amp;a.chkDisabled!==!0&amp;&amp;c.treeObj.trigger(h.event.CHECK,[null,c.treeId,a])}}}},event:{},data:{getRadioCheckedList:function(c){for(var a=f.getRoot(c).radioCheckedList,b=0,d=a.length;b&lt;d;b++)f.getNodeCache(c,&#x000A;a[b].tId)||(a.splice(b,1),b--,d--);return a},getCheckStatus:function(c,a){if(!c.check.enable||a.nocheck||a.chkDisabled)return null;var b=f.nodeChecked(c,a);return{checked:b,half:a.halfCheck?a.halfCheck:c.check.chkStyle==h.radio.STYLE?a.check_Child_State===2:b?a.check_Child_State&gt;-1&amp;&amp;a.check_Child_State&lt;2:a.check_Child_State&gt;0}},getTreeCheckedNodes:function(c,a,b,d){if(!a)return[];for(var j=b&amp;&amp;c.check.chkStyle==h.radio.STYLE&amp;&amp;c.check.radioType==h.radio.TYPE_ALL,d=!d?[]:d,g=0,e=a.length;g&lt;e;g++){var i=&#x000A;a[g],l=f.nodeChildren(c,i),m=f.nodeChecked(c,i);if(i.nocheck!==!0&amp;&amp;i.chkDisabled!==!0&amp;&amp;m==b&amp;&amp;(d.push(i),j))break;f.getTreeCheckedNodes(c,l,b,d);if(j&amp;&amp;d.length&gt;0)break}return d},getTreeChangeCheckedNodes:function(c,a,b){if(!a)return[];for(var b=!b?[]:b,d=0,j=a.length;d&lt;j;d++){var g=a[d],e=f.nodeChildren(c,g),h=f.nodeChecked(c,g);g.nocheck!==!0&amp;&amp;g.chkDisabled!==!0&amp;&amp;h!=g.checkedOld&amp;&amp;b.push(g);f.getTreeChangeCheckedNodes(c,e,b)}return b},makeChkFlag:function(c,a){if(a){var b=-1,d=f.nodeChildren(c,a);&#x000A;if(d)for(var j=0,g=d.length;j&lt;g;j++){var e=d[j],i=f.nodeChecked(c,e),l=-1;if(c.check.chkStyle==h.radio.STYLE)if(l=e.nocheck===!0||e.chkDisabled===!0?e.check_Child_State:e.halfCheck===!0?2:i?2:e.check_Child_State&gt;0?2:0,l==2){b=2;break}else l==0&amp;&amp;(b=0);else if(c.check.chkStyle==h.checkbox.STYLE)if(l=e.nocheck===!0||e.chkDisabled===!0?e.check_Child_State:e.halfCheck===!0?1:i?e.check_Child_State===-1||e.check_Child_State===2?2:1:e.check_Child_State&gt;0?1:0,l===1){b=1;break}else if(l===2&amp;&amp;b&gt;-1&amp;&amp;j&gt;0&amp;&amp;l!==&#x000A;b){b=1;break}else if(b===2&amp;&amp;l&gt;-1&amp;&amp;l&lt;2){b=1;break}else l&gt;-1&amp;&amp;(b=l)}a.check_Child_State=b}}}});var m=m.fn.zTree,i=m._z.tools,h=m.consts,e=m._z.view,f=m._z.data,n=i.$;f.nodeChecked=function(c,a,b){if(!a)return!1;c=c.data.key.checked;typeof b!==&quot;undefined&quot;?(typeof b===&quot;string&quot;&amp;&amp;(b=i.eqs(b,&quot;true&quot;)),a[c]=!!b):a[c]=typeof a[c]==&quot;string&quot;?i.eqs(a[c],&quot;true&quot;):!!a[c];return a[c]};f.exSetting(v);f.addInitBind(function(c){c.treeObj.bind(h.event.CHECK,function(a,b,d,e){a.srcEvent=b;i.apply(c.callback.onCheck,[a,&#x000A;d,e])})});f.addInitUnBind(function(c){c.treeObj.unbind(h.event.CHECK)});f.addInitCache(function(){});f.addInitNode(function(c,a,b,d){if(b){a=f.nodeChecked(c,b);b.checkedOld=a;if(typeof b.nocheck==&quot;string&quot;)b.nocheck=i.eqs(b.nocheck,&quot;true&quot;);b.nocheck=!!b.nocheck||c.check.nocheckInherit&amp;&amp;d&amp;&amp;!!d.nocheck;if(typeof b.chkDisabled==&quot;string&quot;)b.chkDisabled=i.eqs(b.chkDisabled,&quot;true&quot;);b.chkDisabled=!!b.chkDisabled||c.check.chkDisabledInherit&amp;&amp;d&amp;&amp;!!d.chkDisabled;if(typeof b.halfCheck==&quot;string&quot;)b.halfCheck=i.eqs(b.halfCheck,&#x000A;&quot;true&quot;);b.halfCheck=!!b.halfCheck;b.check_Child_State=-1;b.check_Focus=!1;b.getCheckStatus=function(){return f.getCheckStatus(c,b)};c.check.chkStyle==h.radio.STYLE&amp;&amp;c.check.radioType==h.radio.TYPE_ALL&amp;&amp;a&amp;&amp;f.getRoot(c).radioCheckedList.push(b)}});f.addInitProxy(function(c){var a=c.target,b=f.getSetting(c.data.treeId),d=&quot;&quot;,e=null,g=&quot;&quot;,k=null;if(i.eqs(c.type,&quot;mouseover&quot;)){if(b.check.enable&amp;&amp;i.eqs(a.tagName,&quot;span&quot;)&amp;&amp;a.getAttribute(&quot;treeNode&quot;+h.id.CHECK)!==null)d=i.getNodeMainDom(a).id,g=&quot;mouseoverCheck&quot;}else if(i.eqs(c.type,&#x000A;&quot;mouseout&quot;)){if(b.check.enable&amp;&amp;i.eqs(a.tagName,&quot;span&quot;)&amp;&amp;a.getAttribute(&quot;treeNode&quot;+h.id.CHECK)!==null)d=i.getNodeMainDom(a).id,g=&quot;mouseoutCheck&quot;}else if(i.eqs(c.type,&quot;click&quot;)&amp;&amp;b.check.enable&amp;&amp;i.eqs(a.tagName,&quot;span&quot;)&amp;&amp;a.getAttribute(&quot;treeNode&quot;+h.id.CHECK)!==null)d=i.getNodeMainDom(a).id,g=&quot;checkNode&quot;;if(d.length&gt;0)switch(e=f.getNodeCache(b,d),g){case &quot;checkNode&quot;:k=p;break;case &quot;mouseoverCheck&quot;:k=q;break;case &quot;mouseoutCheck&quot;:k=r}return{stop:g===&quot;checkNode&quot;,node:e,nodeEventType:g,nodeEventCallback:k,&#x000A;treeEventType:&quot;&quot;,treeEventCallback:null}},!0);f.addInitRoot(function(c){f.getRoot(c).radioCheckedList=[]});f.addBeforeA(function(c,a,b){c.check.enable&amp;&amp;(f.makeChkFlag(c,a),b.push(&quot;&lt;span ID=&#x27;&quot;,a.tId,h.id.CHECK,&quot;&#x27; class=&#x27;&quot;,e.makeChkClass(c,a),&quot;&#x27; treeNode&quot;,h.id.CHECK,a.nocheck===!0?&quot; style=&#x27;display:none;&#x27;&quot;:&quot;&quot;,&quot;&gt;&lt;/span&gt;&quot;))});f.addZTreeTools(function(c,a){a.checkNode=function(a,b,g,k){var m=f.nodeChecked(c,a);if(a.chkDisabled!==!0&amp;&amp;(b!==!0&amp;&amp;b!==!1&amp;&amp;(b=!m),k=!!k,(m!==b||g)&amp;&amp;!(k&amp;&amp;i.apply(this.setting.callback.beforeCheck,&#x000A;[this.setting.treeId,a],!0)==!1)&amp;&amp;i.uCanDo(this.setting)&amp;&amp;this.setting.check.enable&amp;&amp;a.nocheck!==!0))f.nodeChecked(c,a,b),b=n(a,h.id.CHECK,this.setting),(g||this.setting.check.chkStyle===h.radio.STYLE)&amp;&amp;e.checkNodeRelation(this.setting,a),e.setChkClass(this.setting,b,a),e.repairParentChkClassWithSelf(this.setting,a),k&amp;&amp;this.setting.treeObj.trigger(h.event.CHECK,[null,this.setting.treeId,a])};a.checkAllNodes=function(a){e.repairAllChk(this.setting,!!a)};a.getCheckedNodes=function(a){var a=a!==!1,b=&#x000A;f.nodeChildren(c,f.getRoot(this.setting));return f.getTreeCheckedNodes(this.setting,b,a)};a.getChangeCheckedNodes=function(){var a=f.nodeChildren(c,f.getRoot(this.setting));return f.getTreeChangeCheckedNodes(this.setting,a)};a.setChkDisabled=function(a,b,c,f){b=!!b;c=!!c;e.repairSonChkDisabled(this.setting,a,b,!!f);e.repairParentChkDisabled(this.setting,a.getParentNode(),b,c)};var b=a.updateNode;a.updateNode=function(c,f){b&amp;&amp;b.apply(a,arguments);if(c&amp;&amp;this.setting.check.enable&amp;&amp;n(c,this.setting).get(0)&amp;&amp;&#x000A;i.uCanDo(this.setting)){var g=n(c,h.id.CHECK,this.setting);(f==!0||this.setting.check.chkStyle===h.radio.STYLE)&amp;&amp;e.checkNodeRelation(this.setting,c);e.setChkClass(this.setting,g,c);e.repairParentChkClassWithSelf(this.setting,c)}}});var s=e.createNodes;e.createNodes=function(c,a,b,d,f){s&amp;&amp;s.apply(e,arguments);b&amp;&amp;e.repairParentChkClassWithSelf(c,d)};var t=e.removeNode;e.removeNode=function(c,a){var b=a.getParentNode();t&amp;&amp;t.apply(e,arguments);a&amp;&amp;b&amp;&amp;(e.repairChkClass(c,b),e.repairParentChkClass(c,b))};&#x000A;var u=e.appendNodes;e.appendNodes=function(c,a,b,d,h,g,i){var m=&quot;&quot;;u&amp;&amp;(m=u.apply(e,arguments));d&amp;&amp;f.makeChkFlag(c,d);return m}})(jQuery);&#x000A;&#x000A;/*&#x000A; * JQuery zTree exedit v3.5.40&#x000A; * http://treejs.cn/&#x000A; *&#x000A; * Copyright (c) 2010 Hunter.z&#x000A; *&#x000A; * Licensed same as jquery - MIT License&#x000A; * http://www.opensource.org/licenses/mit-license.php&#x000A; *&#x000A; * email: hunter.z@263.net&#x000A; * Date: 2019-01-18&#x000A; */&#x000A;(function(B){var I={event:{DRAG:&quot;ztree_drag&quot;,DROP:&quot;ztree_drop&quot;,RENAME:&quot;ztree_rename&quot;,DRAGMOVE:&quot;ztree_dragmove&quot;},id:{EDIT:&quot;_edit&quot;,INPUT:&quot;_input&quot;,REMOVE:&quot;_remove&quot;},move:{TYPE_INNER:&quot;inner&quot;,TYPE_PREV:&quot;prev&quot;,TYPE_NEXT:&quot;next&quot;},node:{CURSELECTED_EDIT:&quot;curSelectedNode_Edit&quot;,TMPTARGET_TREE:&quot;tmpTargetzTree&quot;,TMPTARGET_NODE:&quot;tmpTargetNode&quot;}},v={onHoverOverNode:function(a,b){var c=i.getSetting(a.data.treeId),d=i.getRoot(c);if(d.curHoverNode!=b)v.onHoverOutNode(a);d.curHoverNode=b;e.addHoverDom(c,b)},onHoverOutNode:function(a){var a=&#x000A;i.getSetting(a.data.treeId),b=i.getRoot(a);if(b.curHoverNode&amp;&amp;!i.isSelectedNode(a,b.curHoverNode))e.removeTreeDom(a,b.curHoverNode),b.curHoverNode=null},onMousedownNode:function(a,b){function c(a){if(m.dragFlag==0&amp;&amp;Math.abs(N-a.clientX)&lt;f.edit.drag.minMoveSize&amp;&amp;Math.abs(O-a.clientY)&lt;f.edit.drag.minMoveSize)return!0;var b,c,g,j;L.css(&quot;cursor&quot;,&quot;pointer&quot;);if(m.dragFlag==0){if(k.apply(f.callback.beforeDrag,[f.treeId,n],!0)==!1)return l(a),!0;for(b=0,c=n.length;b&lt;c;b++){if(b==0)m.dragNodeShowBefore=[];&#x000A;g=n[b];i.nodeIsParent(f,g)&amp;&amp;g.open?(e.expandCollapseNode(f,g,!g.open),m.dragNodeShowBefore[g.tId]=!0):m.dragNodeShowBefore[g.tId]=!1}m.dragFlag=1;y.showHoverDom=!1;k.showIfameMask(f,!0);j=!0;var p=-1;if(n.length&gt;1){var o=n[0].parentTId?i.nodeChildren(f,n[0].getParentNode()):i.getNodes(f);g=[];for(b=0,c=o.length;b&lt;c;b++)if(m.dragNodeShowBefore[o[b].tId]!==void 0&amp;&amp;(j&amp;&amp;p&gt;-1&amp;&amp;p+1!==b&amp;&amp;(j=!1),g.push(o[b]),p=b),n.length===g.length){n=g;break}}j&amp;&amp;(H=n[0].getPreNode(),Q=n[n.length-1].getNextNode());C=q(&quot;&lt;ul class=&#x27;zTreeDragUL&#x27;&gt;&lt;/ul&gt;&quot;,&#x000A;f);for(b=0,c=n.length;b&lt;c;b++)g=n[b],g.editNameFlag=!1,e.selectNode(f,g,b&gt;0),e.removeTreeDom(f,g),b&gt;f.edit.drag.maxShowNodeNum-1||(j=q(&quot;&lt;li id=&#x27;&quot;+g.tId+&quot;_tmp&#x27;&gt;&lt;/li&gt;&quot;,f),j.append(q(g,d.id.A,f).clone()),j.css(&quot;padding&quot;,&quot;0&quot;),j.children(&quot;#&quot;+g.tId+d.id.A).removeClass(d.node.CURSELECTED),C.append(j),b==f.edit.drag.maxShowNodeNum-1&amp;&amp;(j=q(&quot;&lt;li id=&#x27;&quot;+g.tId+&quot;_moretmp&#x27;&gt;&lt;a&gt;  ...  &lt;/a&gt;&lt;/li&gt;&quot;,f),C.append(j)));C.attr(&quot;id&quot;,n[0].tId+d.id.UL+&quot;_tmp&quot;);C.addClass(f.treeObj.attr(&quot;class&quot;));C.appendTo(L);u=q(&quot;&lt;span class=&#x27;tmpzTreeMove_arrow&#x27;&gt;&lt;/span&gt;&quot;,&#x000A;f);u.attr(&quot;id&quot;,&quot;zTreeMove_arrow_tmp&quot;);u.appendTo(L);f.treeObj.trigger(d.event.DRAG,[a,f.treeId,n])}if(m.dragFlag==1){t&amp;&amp;u.attr(&quot;id&quot;)==a.target.id&amp;&amp;w&amp;&amp;a.clientX+G.scrollLeft()+2&gt;B(&quot;#&quot;+w+d.id.A,t).offset().left?(g=B(&quot;#&quot;+w+d.id.A,t),a.target=g.length&gt;0?g.get(0):a.target):t&amp;&amp;(t.removeClass(d.node.TMPTARGET_TREE),w&amp;&amp;B(&quot;#&quot;+w+d.id.A,t).removeClass(d.node.TMPTARGET_NODE+&quot;_&quot;+d.move.TYPE_PREV).removeClass(d.node.TMPTARGET_NODE+&quot;_&quot;+I.move.TYPE_NEXT).removeClass(d.node.TMPTARGET_NODE+&quot;_&quot;+I.move.TYPE_INNER));&#x000A;w=t=null;J=!1;h=f;g=i.getSettings();for(var z in g)if(g[z].treeId&amp;&amp;g[z].edit.enable&amp;&amp;g[z].treeId!=f.treeId&amp;&amp;(a.target.id==g[z].treeId||B(a.target).parents(&quot;#&quot;+g[z].treeId).length&gt;0))J=!0,h=g[z];z=G.scrollTop();j=G.scrollLeft();p=h.treeObj.offset();b=h.treeObj.get(0).scrollHeight;g=h.treeObj.get(0).scrollWidth;c=a.clientY+z-p.top;var E=h.treeObj.height()+p.top-a.clientY-z,r=a.clientX+j-p.left,s=h.treeObj.width()+p.left-a.clientX-j,p=c&lt;f.edit.drag.borderMax&amp;&amp;c&gt;f.edit.drag.borderMin,o=E&lt;f.edit.drag.borderMax&amp;&amp;&#x000A;E&gt;f.edit.drag.borderMin,F=r&lt;f.edit.drag.borderMax&amp;&amp;r&gt;f.edit.drag.borderMin,v=s&lt;f.edit.drag.borderMax&amp;&amp;s&gt;f.edit.drag.borderMin,E=c&gt;f.edit.drag.borderMin&amp;&amp;E&gt;f.edit.drag.borderMin&amp;&amp;r&gt;f.edit.drag.borderMin&amp;&amp;s&gt;f.edit.drag.borderMin,r=p&amp;&amp;h.treeObj.scrollTop()&lt;=0,s=o&amp;&amp;h.treeObj.scrollTop()+h.treeObj.height()+10&gt;=b,M=F&amp;&amp;h.treeObj.scrollLeft()&lt;=0,P=v&amp;&amp;h.treeObj.scrollLeft()+h.treeObj.width()+10&gt;=g;if(a.target&amp;&amp;k.isChildOrSelf(a.target,h.treeId)){for(var D=a.target;D&amp;&amp;D.tagName&amp;&amp;!k.eqs(D.tagName,&quot;li&quot;)&amp;&amp;D.id!=&#x000A;h.treeId;)D=D.parentNode;var R=!0;for(b=0,c=n.length;b&lt;c;b++)if(g=n[b],D.id===g.tId){R=!1;break}else if(q(g,f).find(&quot;#&quot;+D.id).length&gt;0){R=!1;break}if(R&amp;&amp;a.target&amp;&amp;k.isChildOrSelf(a.target,D.id+d.id.A))t=B(D),w=D.id}g=n[0];if(E&amp;&amp;k.isChildOrSelf(a.target,h.treeId)){if(!t&amp;&amp;(a.target.id==h.treeId||r||s||M||P)&amp;&amp;(J||!J&amp;&amp;g.parentTId))t=h.treeObj;p?h.treeObj.scrollTop(h.treeObj.scrollTop()-10):o&amp;&amp;h.treeObj.scrollTop(h.treeObj.scrollTop()+10);F?h.treeObj.scrollLeft(h.treeObj.scrollLeft()-10):v&amp;&amp;h.treeObj.scrollLeft(h.treeObj.scrollLeft()+&#x000A;10);t&amp;&amp;t!=h.treeObj&amp;&amp;t.offset().left&lt;h.treeObj.offset().left&amp;&amp;h.treeObj.scrollLeft(h.treeObj.scrollLeft()+t.offset().left-h.treeObj.offset().left)}C.css({top:a.clientY+z+3+&quot;px&quot;,left:a.clientX+j+3+&quot;px&quot;});b=j=0;if(t&amp;&amp;t.attr(&quot;id&quot;)!=h.treeId){var A=w==null?null:i.getNodeCache(h,w),p=(a.ctrlKey||a.metaKey)&amp;&amp;f.edit.drag.isMove&amp;&amp;f.edit.drag.isCopy||!f.edit.drag.isMove&amp;&amp;f.edit.drag.isCopy;c=!!(H&amp;&amp;w===H.tId);F=!!(Q&amp;&amp;w===Q.tId);o=g.parentTId&amp;&amp;g.parentTId==w;g=(p||!F)&amp;&amp;k.apply(h.edit.drag.prev,[h.treeId,n,A],&#x000A;!!h.edit.drag.prev);c=(p||!c)&amp;&amp;k.apply(h.edit.drag.next,[h.treeId,n,A],!!h.edit.drag.next);p=(p||!o)&amp;&amp;!(h.data.keep.leaf&amp;&amp;!i.nodeIsParent(f,A))&amp;&amp;k.apply(h.edit.drag.inner,[h.treeId,n,A],!!h.edit.drag.inner);o=function(){t=null;w=&quot;&quot;;x=d.move.TYPE_INNER;u.css({display:&quot;none&quot;});if(window.zTreeMoveTimer)clearTimeout(window.zTreeMoveTimer),window.zTreeMoveTargetNodeTId=null};if(!g&amp;&amp;!c&amp;&amp;!p)o();else if(F=B(&quot;#&quot;+w+d.id.A,t),v=A.isLastNode?null:B(&quot;#&quot;+A.getNextNode().tId+d.id.A,t.next()),E=F.offset().top,r=&#x000A;F.offset().left,s=g?p?0.25:c?0.5:1:-1,M=c?p?0.75:g?0.5:0:-1,z=(a.clientY+z-E)/F.height(),(s==1||z&lt;=s&amp;&amp;z&gt;=-0.2)&amp;&amp;g?(j=1-u.width(),b=E-u.height()/2,x=d.move.TYPE_PREV):(M==0||z&gt;=M&amp;&amp;z&lt;=1.2)&amp;&amp;c?(j=1-u.width(),b=v==null||i.nodeIsParent(f,A)&amp;&amp;A.open?E+F.height()-u.height()/2:v.offset().top-u.height()/2,x=d.move.TYPE_NEXT):p?(j=5-u.width(),b=E,x=d.move.TYPE_INNER):o(),t){u.css({display:&quot;block&quot;,top:b+&quot;px&quot;,left:r+j+&quot;px&quot;});F.addClass(d.node.TMPTARGET_NODE+&quot;_&quot;+x);if(S!=w||T!=x)K=(new Date).getTime();if(A&amp;&amp;i.nodeIsParent(f,&#x000A;A)&amp;&amp;x==d.move.TYPE_INNER&amp;&amp;(z=!0,window.zTreeMoveTimer&amp;&amp;window.zTreeMoveTargetNodeTId!==A.tId?(clearTimeout(window.zTreeMoveTimer),window.zTreeMoveTargetNodeTId=null):window.zTreeMoveTimer&amp;&amp;window.zTreeMoveTargetNodeTId===A.tId&amp;&amp;(z=!1),z))window.zTreeMoveTimer=setTimeout(function(){x==d.move.TYPE_INNER&amp;&amp;A&amp;&amp;i.nodeIsParent(f,A)&amp;&amp;!A.open&amp;&amp;(new Date).getTime()-K&gt;h.edit.drag.autoOpenTime&amp;&amp;k.apply(h.callback.beforeDragOpen,[h.treeId,A],!0)&amp;&amp;(e.switchNode(h,A),h.edit.drag.autoExpandTrigger&amp;&amp;h.treeObj.trigger(d.event.EXPAND,&#x000A;[h.treeId,A]))},h.edit.drag.autoOpenTime+50),window.zTreeMoveTargetNodeTId=A.tId}}else if(x=d.move.TYPE_INNER,t&amp;&amp;k.apply(h.edit.drag.inner,[h.treeId,n,null],!!h.edit.drag.inner)?t.addClass(d.node.TMPTARGET_TREE):t=null,u.css({display:&quot;none&quot;}),window.zTreeMoveTimer)clearTimeout(window.zTreeMoveTimer),window.zTreeMoveTargetNodeTId=null;S=w;T=x;f.treeObj.trigger(d.event.DRAGMOVE,[a,f.treeId,n])}return!1}function l(a){if(window.zTreeMoveTimer)clearTimeout(window.zTreeMoveTimer),window.zTreeMoveTargetNodeTId=&#x000A;null;T=S=null;G.unbind(&quot;mousemove&quot;,c);G.unbind(&quot;mouseup&quot;,l);G.unbind(&quot;selectstart&quot;,g);L.css(&quot;cursor&quot;,&quot;&quot;);t&amp;&amp;(t.removeClass(d.node.TMPTARGET_TREE),w&amp;&amp;B(&quot;#&quot;+w+d.id.A,t).removeClass(d.node.TMPTARGET_NODE+&quot;_&quot;+d.move.TYPE_PREV).removeClass(d.node.TMPTARGET_NODE+&quot;_&quot;+I.move.TYPE_NEXT).removeClass(d.node.TMPTARGET_NODE+&quot;_&quot;+I.move.TYPE_INNER));k.showIfameMask(f,!1);y.showHoverDom=!0;if(m.dragFlag!=0){m.dragFlag=0;var b,j,o;for(b=0,j=n.length;b&lt;j;b++)o=n[b],i.nodeIsParent(f,o)&amp;&amp;m.dragNodeShowBefore[o.tId]&amp;&amp;&#x000A;!o.open&amp;&amp;(e.expandCollapseNode(f,o,!o.open),delete m.dragNodeShowBefore[o.tId]);C&amp;&amp;C.remove();u&amp;&amp;u.remove();var r=(a.ctrlKey||a.metaKey)&amp;&amp;f.edit.drag.isMove&amp;&amp;f.edit.drag.isCopy||!f.edit.drag.isMove&amp;&amp;f.edit.drag.isCopy;!r&amp;&amp;t&amp;&amp;w&amp;&amp;n[0].parentTId&amp;&amp;w==n[0].parentTId&amp;&amp;x==d.move.TYPE_INNER&amp;&amp;(t=null);if(t){var p=w==null?null:i.getNodeCache(h,w);if(k.apply(f.callback.beforeDrop,[h.treeId,n,p,x,r],!0)==!1)e.selectNodes(v,n);else{var s=r?k.clone(n):n;b=function(){if(J){if(!r)for(var b=0,c=n.length;b&lt;c;b++)e.removeNode(f,&#x000A;n[b]);x==d.move.TYPE_INNER?e.addNodes(h,p,-1,s):e.addNodes(h,p.getParentNode(),x==d.move.TYPE_PREV?p.getIndex():p.getIndex()+1,s)}else if(r&amp;&amp;x==d.move.TYPE_INNER)e.addNodes(h,p,-1,s);else if(r)e.addNodes(h,p.getParentNode(),x==d.move.TYPE_PREV?p.getIndex():p.getIndex()+1,s);else if(x!=d.move.TYPE_NEXT)for(b=0,c=s.length;b&lt;c;b++)e.moveNode(h,p,s[b],x,!1);else for(b=-1,c=s.length-1;b&lt;c;c--)e.moveNode(h,p,s[c],x,!1);e.selectNodes(h,s);b=q(s[0],f).get(0);e.scrollIntoView(f,b);f.treeObj.trigger(d.event.DROP,&#x000A;[a,h.treeId,s,p,x,r])};x==d.move.TYPE_INNER&amp;&amp;k.canAsync(h,p)?e.asyncNode(h,p,!1,b):b()}}else e.selectNodes(v,n),f.treeObj.trigger(d.event.DROP,[a,f.treeId,n,null,null,null])}}function g(){return!1}var o,j,f=i.getSetting(a.data.treeId),m=i.getRoot(f),y=i.getRoots();if(a.button==2||!f.edit.enable||!f.edit.drag.isCopy&amp;&amp;!f.edit.drag.isMove)return!0;var r=a.target,s=i.getRoot(f).curSelectedList,n=[];if(i.isSelectedNode(f,b))for(o=0,j=s.length;o&lt;j;o++){if(s[o].editNameFlag&amp;&amp;k.eqs(r.tagName,&quot;input&quot;)&amp;&amp;r.getAttribute(&quot;treeNode&quot;+&#x000A;d.id.INPUT)!==null)return!0;n.push(s[o]);if(n[0].parentTId!==s[o].parentTId){n=[b];break}}else n=[b];e.editNodeBlur=!0;e.cancelCurEditNode(f);var G=B(f.treeObj.get(0).ownerDocument),L=B(f.treeObj.get(0).ownerDocument.body),C,u,t,J=!1,h=f,v=f,H,Q,S=null,T=null,w=null,x=d.move.TYPE_INNER,N=a.clientX,O=a.clientY,K=(new Date).getTime();k.uCanDo(f)&amp;&amp;G.bind(&quot;mousemove&quot;,c);G.bind(&quot;mouseup&quot;,l);G.bind(&quot;selectstart&quot;,g);return!0}};B.extend(!0,B.fn.zTree.consts,I);B.extend(!0,B.fn.zTree._z,{tools:{getAbs:function(a){a=&#x000A;a.getBoundingClientRect();return[a.left+(document.body.scrollLeft+document.documentElement.scrollLeft),a.top+(document.body.scrollTop+document.documentElement.scrollTop)]},inputFocus:function(a){a.get(0)&amp;&amp;(a.focus(),k.setCursorPosition(a.get(0),a.val().length))},inputSelect:function(a){a.get(0)&amp;&amp;(a.focus(),a.select())},setCursorPosition:function(a,b){if(a.setSelectionRange)a.focus(),a.setSelectionRange(b,b);else if(a.createTextRange){var c=a.createTextRange();c.collapse(!0);c.moveEnd(&quot;character&quot;,&#x000A;b);c.moveStart(&quot;character&quot;,b);c.select()}},showIfameMask:function(a,b){for(var c=i.getRoot(a);c.dragMaskList.length&gt;0;)c.dragMaskList[0].remove(),c.dragMaskList.shift();if(b)for(var d=q(&quot;iframe&quot;,a),g=0,e=d.length;g&lt;e;g++){var j=d.get(g),f=k.getAbs(j),j=q(&quot;&lt;div id=&#x27;zTreeMask_&quot;+g+&quot;&#x27; class=&#x27;zTreeMask&#x27; style=&#x27;top:&quot;+f[1]+&quot;px; left:&quot;+f[0]+&quot;px; width:&quot;+j.offsetWidth+&quot;px; height:&quot;+j.offsetHeight+&quot;px;&#x27;&gt;&lt;/div&gt;&quot;,a);j.appendTo(q(&quot;body&quot;,a));c.dragMaskList.push(j)}}},view:{addEditBtn:function(a,b){if(!(b.editNameFlag||&#x000A;q(b,d.id.EDIT,a).length&gt;0)&amp;&amp;k.apply(a.edit.showRenameBtn,[a.treeId,b],a.edit.showRenameBtn)){var c=q(b,d.id.A,a),l=&quot;&lt;span class=&#x27;&quot;+d.className.BUTTON+&quot; edit&#x27; id=&#x27;&quot;+b.tId+d.id.EDIT+&quot;&#x27; title=&#x27;&quot;+k.apply(a.edit.renameTitle,[a.treeId,b],a.edit.renameTitle)+&quot;&#x27; treeNode&quot;+d.id.EDIT+&quot; style=&#x27;display:none;&#x27;&gt;&lt;/span&gt;&quot;;c.append(l);q(b,d.id.EDIT,a).bind(&quot;click&quot;,function(){if(!k.uCanDo(a)||k.apply(a.callback.beforeEditName,[a.treeId,b],!0)==!1)return!1;e.editNode(a,b);return!1}).show()}},addRemoveBtn:function(a,&#x000A;b){if(!(b.editNameFlag||q(b,d.id.REMOVE,a).length&gt;0)&amp;&amp;k.apply(a.edit.showRemoveBtn,[a.treeId,b],a.edit.showRemoveBtn)){var c=q(b,d.id.A,a),l=&quot;&lt;span class=&#x27;&quot;+d.className.BUTTON+&quot; remove&#x27; id=&#x27;&quot;+b.tId+d.id.REMOVE+&quot;&#x27; title=&#x27;&quot;+k.apply(a.edit.removeTitle,[a.treeId,b],a.edit.removeTitle)+&quot;&#x27; treeNode&quot;+d.id.REMOVE+&quot; style=&#x27;display:none;&#x27;&gt;&lt;/span&gt;&quot;;c.append(l);q(b,d.id.REMOVE,a).bind(&quot;click&quot;,function(){if(!k.uCanDo(a)||k.apply(a.callback.beforeRemove,[a.treeId,b],!0)==!1)return!1;e.removeNode(a,b);a.treeObj.trigger(d.event.REMOVE,&#x000A;[a.treeId,b]);return!1}).bind(&quot;mousedown&quot;,function(){return!0}).show()}},addHoverDom:function(a,b){if(i.getRoots().showHoverDom)b.isHover=!0,a.edit.enable&amp;&amp;(e.addEditBtn(a,b),e.addRemoveBtn(a,b)),k.apply(a.view.addHoverDom,[a.treeId,b])},cancelCurEditNode:function(a,b,c){var l=i.getRoot(a),g=l.curEditNode;if(g){var o=l.curEditInput,b=b?b:c?i.nodeName(a,g):o.val();if(k.apply(a.callback.beforeRename,[a.treeId,g,b,c],!0)===!1)return!1;i.nodeName(a,g,b);q(g,d.id.A,a).removeClass(d.node.CURSELECTED_EDIT);&#x000A;o.unbind();e.setNodeName(a,g);g.editNameFlag=!1;l.curEditNode=null;l.curEditInput=null;e.selectNode(a,g,!1);a.treeObj.trigger(d.event.RENAME,[a.treeId,g,c])}return l.noSelection=!0},editNode:function(a,b){var c=i.getRoot(a);e.editNodeBlur=!1;if(i.isSelectedNode(a,b)&amp;&amp;c.curEditNode==b&amp;&amp;b.editNameFlag)setTimeout(function(){k.inputFocus(c.curEditInput)},0);else{b.editNameFlag=!0;e.removeTreeDom(a,b);e.cancelCurEditNode(a);e.selectNode(a,b,!1);q(b,d.id.SPAN,a).html(&quot;&lt;input type=text class=&#x27;rename&#x27; id=&#x27;&quot;+&#x000A;b.tId+d.id.INPUT+&quot;&#x27; treeNode&quot;+d.id.INPUT+&quot; &gt;&quot;);var l=q(b,d.id.INPUT,a);l.attr(&quot;value&quot;,i.nodeName(a,b));a.edit.editNameSelectAll?k.inputSelect(l):k.inputFocus(l);l.bind(&quot;blur&quot;,function(){e.editNodeBlur||e.cancelCurEditNode(a)}).bind(&quot;keydown&quot;,function(b){b.keyCode==&quot;13&quot;?(e.editNodeBlur=!0,e.cancelCurEditNode(a)):b.keyCode==&quot;27&quot;&amp;&amp;e.cancelCurEditNode(a,null,!0)}).bind(&quot;click&quot;,function(){return!1}).bind(&quot;dblclick&quot;,function(){return!1});q(b,d.id.A,a).addClass(d.node.CURSELECTED_EDIT);c.curEditInput=l;&#x000A;c.noSelection=!1;c.curEditNode=b}},moveNode:function(a,b,c,l,g,k){var j=i.getRoot(a);if(b!=c&amp;&amp;(!a.data.keep.leaf||!b||i.nodeIsParent(a,b)||l!=d.move.TYPE_INNER)){var f=c.parentTId?c.getParentNode():j,m=b===null||b==j;m&amp;&amp;b===null&amp;&amp;(b=j);if(m)l=d.move.TYPE_INNER;j=b.parentTId?b.getParentNode():j;if(l!=d.move.TYPE_PREV&amp;&amp;l!=d.move.TYPE_NEXT)l=d.move.TYPE_INNER;if(l==d.move.TYPE_INNER)if(m)c.parentTId=null;else{if(!i.nodeIsParent(a,b))i.nodeIsParent(a,b,!0),b.open=!!b.open,e.setNodeLineIcos(a,b);c.parentTId=&#x000A;b.tId}var y;m?y=m=a.treeObj:(!k&amp;&amp;l==d.move.TYPE_INNER?e.expandCollapseNode(a,b,!0,!1):k||e.expandCollapseNode(a,b.getParentNode(),!0,!1),m=q(b,a),y=q(b,d.id.UL,a),m.get(0)&amp;&amp;!y.get(0)&amp;&amp;(y=[],e.makeUlHtml(a,b,y,&quot;&quot;),m.append(y.join(&quot;&quot;))),y=q(b,d.id.UL,a));var r=q(c,a);r.get(0)?m.get(0)||r.remove():r=e.appendNodes(a,c.level,[c],null,-1,!1,!0).join(&quot;&quot;);y.get(0)&amp;&amp;l==d.move.TYPE_INNER?y.append(r):m.get(0)&amp;&amp;l==d.move.TYPE_PREV?m.before(r):m.get(0)&amp;&amp;l==d.move.TYPE_NEXT&amp;&amp;m.after(r);var s;y=-1;var r=0,n=null,&#x000A;m=null,B=c.level,v=i.nodeChildren(a,f),C=i.nodeChildren(a,j),u=i.nodeChildren(a,b);if(c.isFirstNode){if(y=0,v.length&gt;1)n=v[1],n.isFirstNode=!0}else if(c.isLastNode)y=v.length-1,n=v[y-1],n.isLastNode=!0;else for(j=0,s=v.length;j&lt;s;j++)if(v[j].tId==c.tId){y=j;break}y&gt;=0&amp;&amp;v.splice(y,1);if(l!=d.move.TYPE_INNER)for(j=0,s=C.length;j&lt;s;j++)C[j].tId==b.tId&amp;&amp;(r=j);if(l==d.move.TYPE_INNER){u||(u=i.nodeChildren(a,b,[]));if(u.length&gt;0)m=u[u.length-1],m.isLastNode=!1;u.splice(u.length,0,c);c.isLastNode=!0;c.isFirstNode=&#x000A;u.length==1}else b.isFirstNode&amp;&amp;l==d.move.TYPE_PREV?(C.splice(r,0,c),m=b,m.isFirstNode=!1,c.parentTId=b.parentTId,c.isFirstNode=!0,c.isLastNode=!1):b.isLastNode&amp;&amp;l==d.move.TYPE_NEXT?(C.splice(r+1,0,c),m=b,m.isLastNode=!1,c.parentTId=b.parentTId,c.isFirstNode=!1,c.isLastNode=!0):(l==d.move.TYPE_PREV?C.splice(r,0,c):C.splice(r+1,0,c),c.parentTId=b.parentTId,c.isFirstNode=!1,c.isLastNode=!1);i.fixPIdKeyValue(a,c);i.setSonNodeLevel(a,c.getParentNode(),c);e.setNodeLineIcos(a,c);e.repairNodeLevelClass(a,&#x000A;c,B);!a.data.keep.parent&amp;&amp;v.length&lt;1?(i.nodeIsParent(a,f,!1),f.open=!1,b=q(f,d.id.UL,a),l=q(f,d.id.SWITCH,a),j=q(f,d.id.ICON,a),e.replaceSwitchClass(f,l,d.folder.DOCU),e.replaceIcoClass(f,j,d.folder.DOCU),b.css(&quot;display&quot;,&quot;none&quot;)):n&amp;&amp;e.setNodeLineIcos(a,n);m&amp;&amp;e.setNodeLineIcos(a,m);a.check&amp;&amp;a.check.enable&amp;&amp;e.repairChkClass&amp;&amp;(e.repairChkClass(a,f),e.repairParentChkClassWithSelf(a,f),f!=c.parent&amp;&amp;e.repairParentChkClassWithSelf(a,c));k||e.expandCollapseParentNode(a,c.getParentNode(),!0,g)}},removeEditBtn:function(a,&#x000A;b){q(b,d.id.EDIT,a).unbind().remove()},removeRemoveBtn:function(a,b){q(b,d.id.REMOVE,a).unbind().remove()},removeTreeDom:function(a,b){b.isHover=!1;e.removeEditBtn(a,b);e.removeRemoveBtn(a,b);k.apply(a.view.removeHoverDom,[a.treeId,b])},repairNodeLevelClass:function(a,b,c){if(c!==b.level){var e=q(b,a),g=q(b,d.id.A,a),a=q(b,d.id.UL,a),c=d.className.LEVEL+c,b=d.className.LEVEL+b.level;e.removeClass(c);e.addClass(b);g.removeClass(c);g.addClass(b);a.removeClass(c);a.addClass(b)}},selectNodes:function(a,&#x000A;b){for(var c=0,d=b.length;c&lt;d;c++)e.selectNode(a,b[c],c&gt;0)}},event:{},data:{setSonNodeLevel:function(a,b,c){if(c){var d=i.nodeChildren(a,c);c.level=b?b.level+1:0;if(d)for(var b=0,g=d.length;b&lt;g;b++)d[b]&amp;&amp;i.setSonNodeLevel(a,c,d[b])}}}});var H=B.fn.zTree,k=H._z.tools,d=H.consts,e=H._z.view,i=H._z.data,q=k.$;i.exSetting({edit:{enable:!1,editNameSelectAll:!1,showRemoveBtn:!0,showRenameBtn:!0,removeTitle:&quot;remove&quot;,renameTitle:&quot;rename&quot;,drag:{autoExpandTrigger:!1,isCopy:!0,isMove:!0,prev:!0,next:!0,inner:!0,&#x000A;minMoveSize:5,borderMax:10,borderMin:-5,maxShowNodeNum:5,autoOpenTime:500}},view:{addHoverDom:null,removeHoverDom:null},callback:{beforeDrag:null,beforeDragOpen:null,beforeDrop:null,beforeEditName:null,beforeRename:null,onDrag:null,onDragMove:null,onDrop:null,onRename:null}});i.addInitBind(function(a){var b=a.treeObj,c=d.event;b.bind(c.RENAME,function(b,c,d,e){k.apply(a.callback.onRename,[b,c,d,e])});b.bind(c.DRAG,function(b,c,d,e){k.apply(a.callback.onDrag,[c,d,e])});b.bind(c.DRAGMOVE,function(b,&#x000A;c,d,e){k.apply(a.callback.onDragMove,[c,d,e])});b.bind(c.DROP,function(b,c,d,e,f,i,q){k.apply(a.callback.onDrop,[c,d,e,f,i,q])})});i.addInitUnBind(function(a){var a=a.treeObj,b=d.event;a.unbind(b.RENAME);a.unbind(b.DRAG);a.unbind(b.DRAGMOVE);a.unbind(b.DROP)});i.addInitCache(function(){});i.addInitNode(function(a,b,c){if(c)c.isHover=!1,c.editNameFlag=!1});i.addInitProxy(function(a){var b=a.target,c=i.getSetting(a.data.treeId),e=a.relatedTarget,g=&quot;&quot;,o=null,j=&quot;&quot;,f=null,m=null;if(k.eqs(a.type,&quot;mouseover&quot;)){if(m=&#x000A;k.getMDom(c,b,[{tagName:&quot;a&quot;,attrName:&quot;treeNode&quot;+d.id.A}]))g=k.getNodeMainDom(m).id,j=&quot;hoverOverNode&quot;}else if(k.eqs(a.type,&quot;mouseout&quot;))m=k.getMDom(c,e,[{tagName:&quot;a&quot;,attrName:&quot;treeNode&quot;+d.id.A}]),m||(g=&quot;remove&quot;,j=&quot;hoverOutNode&quot;);else if(k.eqs(a.type,&quot;mousedown&quot;)&amp;&amp;(m=k.getMDom(c,b,[{tagName:&quot;a&quot;,attrName:&quot;treeNode&quot;+d.id.A}])))g=k.getNodeMainDom(m).id,j=&quot;mousedownNode&quot;;if(g.length&gt;0)switch(o=i.getNodeCache(c,g),j){case &quot;mousedownNode&quot;:f=v.onMousedownNode;break;case &quot;hoverOverNode&quot;:f=v.onHoverOverNode;&#x000A;break;case &quot;hoverOutNode&quot;:f=v.onHoverOutNode}return{stop:!1,node:o,nodeEventType:j,nodeEventCallback:f,treeEventType:&quot;&quot;,treeEventCallback:null}});i.addInitRoot(function(a){var a=i.getRoot(a),b=i.getRoots();a.curEditNode=null;a.curEditInput=null;a.curHoverNode=null;a.dragFlag=0;a.dragNodeShowBefore=[];a.dragMaskList=[];b.showHoverDom=!0});i.addZTreeTools(function(a,b){b.cancelEditName=function(a){i.getRoot(this.setting).curEditNode&amp;&amp;e.cancelCurEditNode(this.setting,a?a:null,!0)};b.copyNode=function(b,&#x000A;l,g,o){if(!l)return null;var j=i.nodeIsParent(a,b);if(b&amp;&amp;!j&amp;&amp;this.setting.data.keep.leaf&amp;&amp;g===d.move.TYPE_INNER)return null;var f=this,m=k.clone(l);if(!b)b=null,g=d.move.TYPE_INNER;g==d.move.TYPE_INNER?(l=function(){e.addNodes(f.setting,b,-1,[m],o)},k.canAsync(this.setting,b)?e.asyncNode(this.setting,b,o,l):l()):(e.addNodes(this.setting,b.parentNode,-1,[m],o),e.moveNode(this.setting,b,m,g,!1,o));return m};b.editName=function(a){a&amp;&amp;a.tId&amp;&amp;a===i.getNodeCache(this.setting,a.tId)&amp;&amp;(a.parentTId&amp;&amp;e.expandCollapseParentNode(this.setting,&#x000A;a.getParentNode(),!0),e.editNode(this.setting,a))};b.moveNode=function(b,l,g,o){function j(){e.moveNode(m.setting,b,l,g,!1,o)}if(!l)return l;var f=i.nodeIsParent(a,b);if(b&amp;&amp;!f&amp;&amp;this.setting.data.keep.leaf&amp;&amp;g===d.move.TYPE_INNER)return null;else if(b&amp;&amp;(l.parentTId==b.tId&amp;&amp;g==d.move.TYPE_INNER||q(l,this.setting).find(&quot;#&quot;+b.tId).length&gt;0))return null;else b||(b=null);var m=this;k.canAsync(this.setting,b)&amp;&amp;g===d.move.TYPE_INNER?e.asyncNode(this.setting,b,o,j):j();return l};b.setEditable=function(a){this.setting.edit.enable=&#x000A;a;return this.refresh()}});var N=e.cancelPreSelectedNode;e.cancelPreSelectedNode=function(a,b){for(var c=i.getRoot(a).curSelectedList,d=0,g=c.length;d&lt;g;d++)if(!b||b===c[d])if(e.removeTreeDom(a,c[d]),b)break;N&amp;&amp;N.apply(e,arguments)};var O=e.createNodes;e.createNodes=function(a,b,c,d,g){O&amp;&amp;O.apply(e,arguments);c&amp;&amp;e.repairParentChkClassWithSelf&amp;&amp;e.repairParentChkClassWithSelf(a,d)};var V=e.makeNodeUrl;e.makeNodeUrl=function(a,b){return a.edit.enable?null:V.apply(e,arguments)};var K=e.removeNode;e.removeNode=&#x000A;function(a,b){var c=i.getRoot(a);if(c.curEditNode===b)c.curEditNode=null;K&amp;&amp;K.apply(e,arguments)};var P=e.selectNode;e.selectNode=function(a,b,c){var d=i.getRoot(a);if(i.isSelectedNode(a,b)&amp;&amp;d.curEditNode==b&amp;&amp;b.editNameFlag)return!1;P&amp;&amp;P.apply(e,arguments);e.addHoverDom(a,b);return!0};var U=k.uCanDo;k.uCanDo=function(a,b){var c=i.getRoot(a);if(b&amp;&amp;(k.eqs(b.type,&quot;mouseover&quot;)||k.eqs(b.type,&quot;mouseout&quot;)||k.eqs(b.type,&quot;mousedown&quot;)||k.eqs(b.type,&quot;mouseup&quot;)))return!0;if(c.curEditNode)e.editNodeBlur=!1,c.curEditInput.focus();&#x000A;return!c.curEditNode&amp;&amp;(U?U.apply(e,arguments):!0)}})(jQuery);&#x000A;&#x000A;</textarea>
<a href="#" class="ui button" id="copy-text" style="border-left: none;">一键复制</a>
<a href="/zTree/zTree_v3/edit/master/js/jquery.ztree.all.min.js" class="ui button disabled has_tooltip edit-blob" title="无编辑权限">编辑</a>
<a href="/-/ide/project/zTree/zTree_v3/edit/master/-/js/jquery.ztree.all.min.js" class="ui button web-ide" target="_blank">Web IDE</a>
<a href="/zTree/zTree_v3/raw/master/js/jquery.ztree.all.min.js" class="ui button edit-raw" target="_blank">原始数据</a>
<a href="/zTree/zTree_v3/blame/master/js/jquery.ztree.all.min.js" class="ui button edit-blame">按行查看</a>
<a href="/zTree/zTree_v3/commits/master/js/jquery.ztree.all.min.js" class="ui button edit-history">历史</a>
</div>
<script>
  "use strict";
  try {
    if((gon.wait_fork!=undefined && gon.wait_fork==true) || (gon.wait_fetch!=undefined && gon.wait_fetch==true)){
      $('.edit-blob').popup({content:"当前仓库正在后台处理中,暂时无法编辑", on: 'hover', delay: { show: 200, hide: 200 }});
      $('.edit-blob').click(function(e){
        e.preventDefault();
      })
    }
  
    var setUrl = function() {
      var params = window.location.search
      if (params==undefined || $.trim(params).length==0) return;
      $('span.options').children('.basic').find('a').each(function(index,ele){
        var origin_href = $(ele).attr('href');
        if (origin_href!="#" && origin_href.indexOf('?') == -1){
          $(ele).attr('href',origin_href+params);
        }
      });
    }
  
    setUrl();
  
    var clipboard = null,
        $btncopy  = $("#copy-text");
  
    clipboard = new Clipboard("#copy-text", {
      text: function(trigger) {
        return $("#blob_raw").val();
      }
    })
  
    clipboard.on('success', function(e) {
      $btncopy.popup('hide');
      $btncopy.popup('destroy');
      $btncopy.popup({content: '已复制', position: 'bottom center'});
      $btncopy.popup('show');
    })
  
    clipboard.on('error', function(e) {
      var giteeModal = new GiteeModalHelper({okText: '确定'});
      giteeModal.alert("一键复制", '复制失败，请手动复制');
    })
  
    $(function() {
      $btncopy.popup({
        content: '点击复制',
        position: 'bottom center'
      })
    })
  
  } catch (error) {
    console.log('blob/action error:' + error);
  }
</script>
</div>
</div>
<div class='contributor-description'><span class='recent-commit' style='margin-top: 0.7rem'>
<a href="/zTree" class="commit-author-link">ztree</a>
<span>提交于</span>
<span class='timeago commit-date' title='2019-01-18 18:59:32 +0800'>
2019-01-18 18:59
</span>
.
<a href="/zTree/zTree_v3/commit/c07c71267d29b16abac8b8139c7d0d4f87cdd4e1">fixed issue:  fuzzySearch.js    Thanks </a><a href="/yigger" class="gfm gfm-team_member">@65419515 </a>
</span>
</div>
</div>
<div class='clearfix'></div>
<div class='file_content code'>
<div class='lines white'>
<div class='line-numbers'><a href='#L1' id='L1'>1</a><a href='#L2' id='L2'>2</a><a href='#L3' id='L3'>3</a><a href='#L4' id='L4'>4</a><a href='#L5' id='L5'>5</a><a href='#L6' id='L6'>6</a><a href='#L7' id='L7'>7</a><a href='#L8' id='L8'>8</a><a href='#L9' id='L9'>9</a><a href='#L10' id='L10'>10</a><a href='#L11' id='L11'>11</a><a href='#L12' id='L12'>12</a><a href='#L13' id='L13'>13</a><a href='#L14' id='L14'>14</a><a href='#L15' id='L15'>15</a><a href='#L16' id='L16'>16</a><a href='#L17' id='L17'>17</a><a href='#L18' id='L18'>18</a><a href='#L19' id='L19'>19</a><a href='#L20' id='L20'>20</a><a href='#L21' id='L21'>21</a><a href='#L22' id='L22'>22</a><a href='#L23' id='L23'>23</a><a href='#L24' id='L24'>24</a><a href='#L25' id='L25'>25</a><a href='#L26' id='L26'>26</a><a href='#L27' id='L27'>27</a><a href='#L28' id='L28'>28</a><a href='#L29' id='L29'>29</a><a href='#L30' id='L30'>30</a><a href='#L31' id='L31'>31</a><a href='#L32' id='L32'>32</a><a href='#L33' id='L33'>33</a><a href='#L34' id='L34'>34</a><a href='#L35' id='L35'>35</a><a href='#L36' id='L36'>36</a><a href='#L37' id='L37'>37</a><a href='#L38' id='L38'>38</a><a href='#L39' id='L39'>39</a><a href='#L40' id='L40'>40</a><a href='#L41' id='L41'>41</a><a href='#L42' id='L42'>42</a><a href='#L43' id='L43'>43</a><a href='#L44' id='L44'>44</a><a href='#L45' id='L45'>45</a><a href='#L46' id='L46'>46</a><a href='#L47' id='L47'>47</a><a href='#L48' id='L48'>48</a><a href='#L49' id='L49'>49</a><a href='#L50' id='L50'>50</a><a href='#L51' id='L51'>51</a><a href='#L52' id='L52'>52</a><a href='#L53' id='L53'>53</a><a href='#L54' id='L54'>54</a><a href='#L55' id='L55'>55</a><a href='#L56' id='L56'>56</a><a href='#L57' id='L57'>57</a><a href='#L58' id='L58'>58</a><a href='#L59' id='L59'>59</a><a href='#L60' id='L60'>60</a><a href='#L61' id='L61'>61</a><a href='#L62' id='L62'>62</a><a href='#L63' id='L63'>63</a><a href='#L64' id='L64'>64</a><a href='#L65' id='L65'>65</a><a href='#L66' id='L66'>66</a><a href='#L67' id='L67'>67</a><a href='#L68' id='L68'>68</a><a href='#L69' id='L69'>69</a><a href='#L70' id='L70'>70</a><a href='#L71' id='L71'>71</a><a href='#L72' id='L72'>72</a><a href='#L73' id='L73'>73</a><a href='#L74' id='L74'>74</a><a href='#L75' id='L75'>75</a><a href='#L76' id='L76'>76</a><a href='#L77' id='L77'>77</a><a href='#L78' id='L78'>78</a><a href='#L79' id='L79'>79</a><a href='#L80' id='L80'>80</a><a href='#L81' id='L81'>81</a><a href='#L82' id='L82'>82</a><a href='#L83' id='L83'>83</a><a href='#L84' id='L84'>84</a><a href='#L85' id='L85'>85</a><a href='#L86' id='L86'>86</a><a href='#L87' id='L87'>87</a><a href='#L88' id='L88'>88</a><a href='#L89' id='L89'>89</a><a href='#L90' id='L90'>90</a><a href='#L91' id='L91'>91</a><a href='#L92' id='L92'>92</a><a href='#L93' id='L93'>93</a><a href='#L94' id='L94'>94</a><a href='#L95' id='L95'>95</a><a href='#L96' id='L96'>96</a><a href='#L97' id='L97'>97</a><a href='#L98' id='L98'>98</a><a href='#L99' id='L99'>99</a><a href='#L100' id='L100'>100</a><a href='#L101' id='L101'>101</a><a href='#L102' id='L102'>102</a><a href='#L103' id='L103'>103</a><a href='#L104' id='L104'>104</a><a href='#L105' id='L105'>105</a><a href='#L106' id='L106'>106</a><a href='#L107' id='L107'>107</a><a href='#L108' id='L108'>108</a><a href='#L109' id='L109'>109</a><a href='#L110' id='L110'>110</a><a href='#L111' id='L111'>111</a><a href='#L112' id='L112'>112</a><a href='#L113' id='L113'>113</a><a href='#L114' id='L114'>114</a><a href='#L115' id='L115'>115</a><a href='#L116' id='L116'>116</a><a href='#L117' id='L117'>117</a><a href='#L118' id='L118'>118</a><a href='#L119' id='L119'>119</a><a href='#L120' id='L120'>120</a><a href='#L121' id='L121'>121</a><a href='#L122' id='L122'>122</a><a href='#L123' id='L123'>123</a><a href='#L124' id='L124'>124</a><a href='#L125' id='L125'>125</a><a href='#L126' id='L126'>126</a><a href='#L127' id='L127'>127</a><a href='#L128' id='L128'>128</a><a href='#L129' id='L129'>129</a><a href='#L130' id='L130'>130</a><a href='#L131' id='L131'>131</a><a href='#L132' id='L132'>132</a><a href='#L133' id='L133'>133</a><a href='#L134' id='L134'>134</a><a href='#L135' id='L135'>135</a><a href='#L136' id='L136'>136</a><a href='#L137' id='L137'>137</a><a href='#L138' id='L138'>138</a><a href='#L139' id='L139'>139</a><a href='#L140' id='L140'>140</a><a href='#L141' id='L141'>141</a><a href='#L142' id='L142'>142</a><a href='#L143' id='L143'>143</a><a href='#L144' id='L144'>144</a><a href='#L145' id='L145'>145</a><a href='#L146' id='L146'>146</a><a href='#L147' id='L147'>147</a><a href='#L148' id='L148'>148</a><a href='#L149' id='L149'>149</a><a href='#L150' id='L150'>150</a><a href='#L151' id='L151'>151</a><a href='#L152' id='L152'>152</a><a href='#L153' id='L153'>153</a><a href='#L154' id='L154'>154</a><a href='#L155' id='L155'>155</a><a href='#L156' id='L156'>156</a><a href='#L157' id='L157'>157</a><a href='#L158' id='L158'>158</a><a href='#L159' id='L159'>159</a><a href='#L160' id='L160'>160</a><a href='#L161' id='L161'>161</a><a href='#L162' id='L162'>162</a><a href='#L163' id='L163'>163</a><a href='#L164' id='L164'>164</a><a href='#L165' id='L165'>165</a><a href='#L166' id='L166'>166</a></div><div class='highlight'><pre><div class='line' id='LC1'>&#x000A;</div><div class='line' id='LC2'><span class="cm">/*</span>&#x000A;</div><div class='line' id='LC3'><span class="cm"> * JQuery zTree core v3.5.40</span>&#x000A;</div><div class='line' id='LC4'><span class="cm"> * http://treejs.cn/</span>&#x000A;</div><div class='line' id='LC5'><span class="cm"> *</span>&#x000A;</div><div class='line' id='LC6'><span class="cm"> * Copyright (c) 2010 Hunter.z</span>&#x000A;</div><div class='line' id='LC7'><span class="cm"> *</span>&#x000A;</div><div class='line' id='LC8'><span class="cm"> * Licensed same as jquery - MIT License</span>&#x000A;</div><div class='line' id='LC9'><span class="cm"> * http://www.opensource.org/licenses/mit-license.php</span>&#x000A;</div><div class='line' id='LC10'><span class="cm"> *</span>&#x000A;</div><div class='line' id='LC11'><span class="cm"> * email: hunter.z@263.net</span>&#x000A;</div><div class='line' id='LC12'><span class="cm"> * Date: 2019-01-18</span>&#x000A;</div><div class='line' id='LC13'><span class="cm"> */</span>&#x000A;</div><div class='line' id='LC14'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="kd">var</span> <span class="nx">J</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">L</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">N</span><span class="p">,</span><span class="nx">O</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="p">{},</span><span class="nx">w</span><span class="o">=</span><span class="p">{},</span><span class="nx">x</span><span class="o">=</span><span class="p">{},</span><span class="nx">P</span><span class="o">=</span><span class="p">{</span><span class="na">treeId</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="na">treeObj</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">view</span><span class="p">:{</span><span class="na">addDiyDom</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">autoCancelSelected</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">dblClickExpand</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">expandSpeed</span><span class="p">:</span><span class="s2">"fast"</span><span class="p">,</span><span class="na">fontCss</span><span class="p">:{},</span><span class="na">nameIsHTML</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">selectedMulti</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">showIcon</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">showLine</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">showTitle</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">txtSelectedEnable</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">},</span><span class="na">data</span><span class="p">:{</span><span class="na">key</span><span class="p">:{</span><span class="na">isParent</span><span class="p">:</span><span class="s2">"isParent"</span><span class="p">,</span><span class="na">children</span><span class="p">:</span><span class="s2">"children"</span><span class="p">,</span><span class="na">name</span><span class="p">:</span><span class="s2">"name"</span><span class="p">,</span><span class="na">title</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="na">url</span><span class="p">:</span><span class="s2">"url"</span><span class="p">,</span><span class="na">icon</span><span class="p">:</span><span class="s2">"icon"</span><span class="p">},</span><span class="na">simpleData</span><span class="p">:{</span><span class="na">enable</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">idKey</span><span class="p">:</span><span class="s2">"id"</span><span class="p">,</span><span class="na">pIdKey</span><span class="p">:</span><span class="s2">"pId"</span><span class="p">,</span><span class="na">rootPId</span><span class="p">:</span><span class="kc">null</span><span class="p">},</span><span class="na">keep</span><span class="p">:{</span><span class="na">parent</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">leaf</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">}},</span><span class="na">async</span><span class="p">:{</span><span class="na">enable</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">contentType</span><span class="p">:</span><span class="s2">"application/x-www-form-urlencoded"</span><span class="p">,</span><span class="na">type</span><span class="p">:</span><span class="s2">"post"</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC15'><span class="na">dataType</span><span class="p">:</span><span class="s2">"text"</span><span class="p">,</span><span class="na">headers</span><span class="p">:{},</span><span class="na">xhrFields</span><span class="p">:{},</span><span class="na">url</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="na">autoParam</span><span class="p">:[],</span><span class="na">otherParam</span><span class="p">:[],</span><span class="na">dataFilter</span><span class="p">:</span><span class="kc">null</span><span class="p">},</span><span class="na">callback</span><span class="p">:{</span><span class="na">beforeAsync</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeClick</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeDblClick</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeRightClick</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeMouseDown</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeMouseUp</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeExpand</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeCollapse</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeRemove</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onAsyncError</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onAsyncSuccess</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onNodeCreated</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onClick</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onDblClick</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onRightClick</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onMouseDown</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onMouseUp</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onExpand</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onCollapse</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onRemove</span><span class="p">:</span><span class="kc">null</span><span class="p">}},</span><span class="nx">y</span><span class="o">=</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">NODECREATED</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC16'><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onNodeCreated</span><span class="p">,[</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">])});</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">CLICK</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">k</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onClick</span><span class="p">,[</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">k</span><span class="p">])});</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">EXPAND</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onExpand</span><span class="p">,[</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">])});</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">COLLAPSE</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onCollapse</span><span class="p">,[</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">])});</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">ASYNC_SUCCESS</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onAsyncSuccess</span><span class="p">,[</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">])});</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">ASYNC_ERROR</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onAsyncError</span><span class="p">,[</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">g</span><span class="p">])});</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">REMOVE</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onRemove</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC17'><span class="p">[</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">])});</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">SELECTED</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onSelected</span><span class="p">,[</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">])});</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">UNSELECTED</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onUnSelected</span><span class="p">,[</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">])})}],</span><span class="nx">z</span><span class="o">=</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">NODECREATED</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">CLICK</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">EXPAND</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">COLLAPSE</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ASYNC_SUCCESS</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ASYNC_ERROR</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">REMOVE</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">SELECTED</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSELECTED</span><span class="p">)}],</span><span class="nx">A</span><span class="o">=</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getCache</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="p">{},</span><span class="nx">e</span><span class="p">.</span><span class="nx">setCache</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">));</span><span class="nx">b</span><span class="p">.</span><span class="nx">nodes</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="p">.</span><span class="nx">doms</span><span class="o">=</span><span class="p">[]}],</span><span class="nx">B</span><span class="o">=</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC18'><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">level</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">tId</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="o">+</span><span class="s2">"_"</span><span class="o">+</span> <span class="o">++</span><span class="nx">m</span><span class="p">.</span><span class="nx">zId</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">=</span><span class="nx">d</span><span class="p">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">tId</span><span class="p">:</span><span class="kc">null</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">open</span><span class="o">=</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">open</span><span class="o">==</span><span class="s2">"string"</span><span class="p">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">open</span><span class="p">,</span><span class="s2">"true"</span><span class="p">):</span><span class="o">!!</span><span class="nx">c</span><span class="p">.</span><span class="nx">open</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">k</span><span class="p">)?(</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">zAsync</span><span class="o">=!</span><span class="mi">0</span><span class="p">):(</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">open</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">enable</span><span class="p">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">open</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">zAsync</span><span class="o">=!</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">isLastNode</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">getParentNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">getNodeCache</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">)};</span><span class="nx">c</span><span class="p">.</span><span class="nx">getPreNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">getPreNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span><span class="nx">c</span><span class="p">.</span><span class="nx">getNextNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">getNextNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span>&#x000A;</div><div class='line' id='LC19'><span class="nx">c</span><span class="p">.</span><span class="nx">getIndex</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">getNodeIndex</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span><span class="nx">c</span><span class="p">.</span><span class="nx">getPath</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">getNodePath</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span><span class="nx">c</span><span class="p">.</span><span class="nx">isAjaxing</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">fixPIdKeyValue</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)}}],</span><span class="nx">u</span><span class="o">=</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="s2">""</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="s2">""</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="s2">""</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"mousedown"</span><span class="p">))</span><span class="nx">m</span><span class="o">=</span><span class="s2">"mousedown"</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"mouseup"</span><span class="p">))</span><span class="nx">m</span><span class="o">=</span><span class="s2">"mouseup"</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"contextmenu"</span><span class="p">))</span><span class="nx">m</span><span class="o">=</span><span class="s2">"contextmenu"</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"click"</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="s2">"span"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">"treeNode"</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SWITCH</span><span class="p">)</span><span class="o">!==</span><span class="kc">null</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">getNodeMainDom</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">id</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC20'><span class="nx">i</span><span class="o">=</span><span class="s2">"switchNode"</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">getMDom</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,[{</span><span class="na">tagName</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="na">attrName</span><span class="p">:</span><span class="s2">"treeNode"</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">}]))</span><span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">getNodeMainDom</span><span class="p">(</span><span class="nx">o</span><span class="p">).</span><span class="nx">id</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="s2">"clickNode"</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"dblclick"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="s2">"dblclick"</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">getMDom</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,[{</span><span class="na">tagName</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="na">attrName</span><span class="p">:</span><span class="s2">"treeNode"</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">}])))</span><span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">getNodeMainDom</span><span class="p">(</span><span class="nx">o</span><span class="p">).</span><span class="nx">id</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="s2">"switchNode"</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">getMDom</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,[{</span><span class="na">tagName</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="na">attrName</span><span class="p">:</span><span class="s2">"treeNode"</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">}])))</span><span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">getNodeMainDom</span><span class="p">(</span><span class="nx">o</span><span class="p">).</span><span class="nx">id</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodeCache</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">i</span><span class="p">){</span><span class="k">case</span> <span class="s2">"switchNode"</span><span class="p">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">)?</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"click"</span><span class="p">)</span><span class="o">||</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC21'><span class="s2">"dblclick"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">dblClickExpand</span><span class="p">,[</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">f</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">dblClickExpand</span><span class="p">)?</span><span class="nx">k</span><span class="o">=</span><span class="nx">J</span><span class="p">:</span><span class="nx">i</span><span class="o">=</span><span class="s2">""</span><span class="p">:</span><span class="nx">i</span><span class="o">=</span><span class="s2">""</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">"clickNode"</span><span class="p">:</span><span class="nx">k</span><span class="o">=</span><span class="nx">K</span><span class="p">}</span><span class="k">switch</span><span class="p">(</span><span class="nx">m</span><span class="p">){</span><span class="k">case</span> <span class="s2">"mousedown"</span><span class="p">:</span><span class="nx">j</span><span class="o">=</span><span class="nx">L</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">"mouseup"</span><span class="p">:</span><span class="nx">j</span><span class="o">=</span><span class="nx">M</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">"dblclick"</span><span class="p">:</span><span class="nx">j</span><span class="o">=</span><span class="nx">N</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">"contextmenu"</span><span class="p">:</span><span class="nx">j</span><span class="o">=</span><span class="nx">O</span><span class="p">}</span><span class="k">return</span><span class="p">{</span><span class="na">stop</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">node</span><span class="p">:</span><span class="nx">f</span><span class="p">,</span><span class="na">nodeEventType</span><span class="p">:</span><span class="nx">i</span><span class="p">,</span><span class="na">nodeEventCallback</span><span class="p">:</span><span class="nx">k</span><span class="p">,</span><span class="na">treeEventType</span><span class="p">:</span><span class="nx">m</span><span class="p">,</span><span class="na">treeEventCallback</span><span class="p">:</span><span class="nx">j</span><span class="p">}}],</span><span class="nx">C</span><span class="o">=</span><span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="p">{},</span><span class="nx">e</span><span class="p">.</span><span class="nx">setRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">));</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,[]);</span><span class="nx">b</span><span class="p">.</span><span class="nx">expandTriggerFlag</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">curSelectedList</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="p">.</span><span class="nx">noSelection</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">createdNodes</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="p">.</span><span class="nx">zId</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">_ver</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC22'><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">()}],</span><span class="nx">D</span><span class="o">=</span><span class="p">[],</span><span class="nx">E</span><span class="o">=</span><span class="p">[],</span><span class="nx">F</span><span class="o">=</span><span class="p">[],</span><span class="nx">G</span><span class="o">=</span><span class="p">[],</span><span class="nx">H</span><span class="o">=</span><span class="p">[],</span><span class="nx">e</span><span class="o">=</span><span class="p">{</span><span class="na">addNodeCache</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">getCache</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodeCacheId</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="p">)]</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="na">getNodeCacheId</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s2">"_"</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)},</span><span class="na">addAfterA</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">E</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="na">addBeforeA</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">D</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="na">addInnerAfterA</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">G</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="na">addInnerBeforeA</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">F</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="na">addInitBind</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">y</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="na">addInitUnBind</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">z</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="na">addInitCache</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">A</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="na">addInitNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">B</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="na">addInitProxy</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC23'><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">?</span><span class="nx">u</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">):</span><span class="nx">u</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="na">addInitRoot</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">C</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="na">addNodesData</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">f</span><span class="p">?</span><span class="nx">c</span><span class="o">&gt;=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=-</span><span class="mi">1</span><span class="p">):(</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,[]),</span><span class="nx">c</span><span class="o">=-</span><span class="mi">1</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">isFirstNode</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">setNodeLineIcos</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">f</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">isLastNode</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">setNodeLineIcos</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">c</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">d</span><span class="p">)):(</span><span class="nx">a</span><span class="o">=</span><span class="p">[</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">splice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">a</span><span class="p">))},</span><span class="na">addSelectedNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">isSelectedNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span>&#x000A;</div><div class='line' id='LC24'><span class="nx">c</span><span class="p">.</span><span class="nx">curSelectedList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="na">addCreatedNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onNodeCreated</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">addDiyDom</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">createdNodes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="na">addZTreeTools</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">H</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="na">exSetting</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">P</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="na">fixPIdKeyValue</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">simpleData</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">simpleData</span><span class="p">.</span><span class="nx">pIdKey</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">()[</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">simpleData</span><span class="p">.</span><span class="nx">idKey</span><span class="p">]:</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">simpleData</span><span class="p">.</span><span class="nx">rootPId</span><span class="p">)},</span><span class="na">getAfterA</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">E</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)},</span><span class="na">getBeforeA</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC25'><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">D</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)},</span><span class="na">getInnerAfterA</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">G</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)},</span><span class="na">getInnerBeforeA</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">F</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)},</span><span class="na">getCache</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">]},</span><span class="na">getNodeIndex</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">():</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;=</span><span class="nx">f</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="p">;</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span><span class="na">getNextNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC26'><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">():</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;=</span><span class="nx">f</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="o">==</span><span class="nx">f</span><span class="p">?</span><span class="kc">null</span><span class="p">:</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="k">return</span> <span class="kc">null</span><span class="p">},</span><span class="na">getNodeByParam</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="o">||!</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">==</span><span class="nx">d</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">m</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodeByParam</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">))</span><span class="k">return</span> <span class="nx">m</span><span class="p">}</span><span class="k">return</span> <span class="kc">null</span><span class="p">},</span><span class="na">getNodeCache</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">x</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">].</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodeCacheId</span><span class="p">(</span><span class="nx">b</span><span class="p">)];</span><span class="k">return</span> <span class="nx">c</span><span class="p">?</span><span class="nx">c</span><span class="p">:</span><span class="kc">null</span><span class="p">},</span><span class="na">getNodePath</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="p">;(</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">?</span>&#x000A;</div><div class='line' id='LC27'><span class="nx">b</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">().</span><span class="nx">getPath</span><span class="p">():[])</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="na">getNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">))},</span><span class="na">getNodesByParam</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="o">||!</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="nx">k</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">==</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodesByParam</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">))}</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="na">getNodesByParamFuzzy</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="o">||!</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(),</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="k">typeof</span> <span class="nx">k</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">==</span><span class="s2">"string"</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">c</span><span class="p">].</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">&gt;-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC28'><span class="nx">k</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodesByParamFuzzy</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">))}</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="na">getNodesByFilter</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="p">?</span><span class="kc">null</span><span class="p">:[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">?</span><span class="kc">null</span><span class="p">:[],</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">m</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">,[</span><span class="nx">g</span><span class="p">,</span><span class="nx">f</span><span class="p">],</span><span class="o">!</span><span class="mi">1</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="k">return</span> <span class="nx">g</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodesByFilter</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">)</span><span class="k">return</span> <span class="nx">g</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">?</span><span class="nx">g</span><span class="p">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="k">return</span> <span class="nx">i</span><span class="p">},</span><span class="na">getPreNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">():</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="o">==</span><span class="mi">0</span><span class="p">?</span><span class="kc">null</span><span class="p">:</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="k">return</span> <span class="kc">null</span><span class="p">},</span>&#x000A;</div><div class='line' id='LC29'><span class="na">getRoot</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">?</span><span class="nx">w</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">]:</span><span class="kc">null</span><span class="p">},</span><span class="na">getRoots</span><span class="p">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">w</span><span class="p">},</span><span class="na">getSetting</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">t</span><span class="p">[</span><span class="nx">a</span><span class="p">]},</span><span class="na">getSettings</span><span class="p">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">t</span><span class="p">},</span><span class="na">getZTreeTools</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">)))?</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeTools</span><span class="p">:</span><span class="kc">null</span><span class="p">},</span><span class="na">initCache</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">A</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)},</span><span class="na">initNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">)</span><span class="nx">B</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)},</span><span class="na">initRoot</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">C</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)},</span><span class="na">isSelectedNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC30'><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">curSelectedList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">curSelectedList</span><span class="p">[</span><span class="nx">d</span><span class="p">])</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">},</span><span class="na">nodeChildren</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">!==</span><span class="s2">"undefined"</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]},</span><span class="na">nodeIsParent</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">isParent</span><span class="p">;</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">!==</span><span class="s2">"undefined"</span><span class="p">?(</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">===</span><span class="s2">"string"</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="s2">"true"</span><span class="p">)),</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=!!</span><span class="nx">c</span><span class="p">):</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">==</span><span class="s2">"string"</span><span class="p">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="s2">"true"</span><span class="p">):</span><span class="o">!!</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]},</span><span class="na">nodeName</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">!==</span><span class="s2">"undefined"</span><span class="o">&amp;&amp;</span>&#x000A;</div><div class='line' id='LC31'><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span><span class="s2">""</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]},</span><span class="na">nodeTitle</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="s2">""</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">title</span><span class="o">===</span><span class="s2">""</span><span class="p">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">name</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">title</span><span class="p">]},</span><span class="na">removeNodeCache</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeNodeCache</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="nx">e</span><span class="p">.</span><span class="nx">getCache</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodeCacheId</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="p">)]</span><span class="o">=</span><span class="kc">null</span><span class="p">},</span><span class="na">removeSelectedNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">curSelectedList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">curSelectedList</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">||!</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodeCache</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">curSelectedList</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">tId</span><span class="p">))</span><span class="nx">c</span><span class="p">.</span><span class="nx">curSelectedList</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">UNSELECTED</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC32'><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">]),</span><span class="nx">d</span><span class="o">--</span><span class="p">,</span><span class="nx">f</span><span class="o">--</span><span class="p">},</span><span class="na">setCache</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">x</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="na">setRoot</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">w</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="na">setZTreeTools</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">H</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)},</span><span class="na">transformToArrayFormat</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">);(</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">transformToArrayFormat</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)))}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">]);</span><span class="k">else</span> <span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="na">transformTozTreeFormat</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">simpleData</span><span class="p">.</span><span class="nx">idKey</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">simpleData</span><span class="p">.</span><span class="nx">pIdKey</span><span class="p">;</span>&#x000A;</div><div class='line' id='LC33'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">f</span><span class="o">||</span><span class="nx">f</span><span class="o">==</span><span class="s2">""</span><span class="o">||!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">k</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">f</span><span class="p">]]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">i</span><span class="p">]];</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">f</span><span class="p">]</span><span class="o">!=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">i</span><span class="p">]){</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">o</span><span class="o">||</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">,[]));</span><span class="nx">o</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">])}</span><span class="k">else</span> <span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">])}</span><span class="k">return</span> <span class="nx">g</span><span class="p">}</span><span class="k">else</span> <span class="k">return</span><span class="p">[</span><span class="nx">b</span><span class="p">]}},</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="na">bindEvent</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">y</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)},</span><span class="na">unbindEvent</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">z</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)},</span><span class="na">bindTree</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="na">treeId</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">},</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">;</span>&#x000A;</div><div class='line' id='LC34'><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">txtSelectedEnable</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"selectstart"</span><span class="p">,</span><span class="nx">v</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span><span class="s2">"-moz-user-select"</span><span class="p">:</span><span class="s2">"-moz-none"</span><span class="p">});</span><span class="nx">c</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"click"</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"dblclick"</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"mouseover"</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"mouseout"</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"mousedown"</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"mouseup"</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"contextmenu"</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">)},</span><span class="na">unbindTree</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">"selectstart"</span><span class="p">,</span><span class="nx">v</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">"click"</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">"dblclick"</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">"mouseover"</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">"mouseout"</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">"mousedown"</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">"mouseup"</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC35'><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">"contextmenu"</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">proxy</span><span class="p">)},</span><span class="na">doProxy</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kr">arguments</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">stop</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="na">proxy</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">uCanDo</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">doProxy</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeEventCallback</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeEventCallback</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">i</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">node</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">treeEventCallback</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">treeEventCallback</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">i</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">node</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">)}</span><span class="k">return</span> <span class="nx">c</span><span class="p">}};</span><span class="nx">J</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">);</span>&#x000A;</div><div class='line' id='LC36'><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeCollapse</span><span class="p">,[</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeExpand</span><span class="p">,[</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">expandTriggerFlag</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">switchNode</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="nx">K</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">autoCancelSelected</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">metaKey</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">isSelectedNode</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">)?</span><span class="mi">0</span><span class="p">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">autoCancelSelected</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">metaKey</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">selectedMulti</span><span class="p">?</span><span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeClick</span><span class="p">,[</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">===</span><span class="mi">0</span><span class="p">?</span><span class="nx">j</span><span class="p">.</span><span class="nx">cancelPreSelectedNode</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC37'><span class="nx">b</span><span class="p">):</span><span class="nx">j</span><span class="p">.</span><span class="nx">selectNode</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="o">===</span><span class="mi">2</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">CLICK</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">]);</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="nx">L</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeMouseDown</span><span class="p">,[</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onMouseDown</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">]);</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="nx">M</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeMouseUp</span><span class="p">,[</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onMouseUp</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">]);</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="nx">N</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeDblClick</span><span class="p">,[</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span>&#x000A;</div><div class='line' id='LC38'><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onDblClick</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">]);</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="nx">O</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeRightClick</span><span class="p">,[</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onRightClick</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">]);</span><span class="k">return</span> <span class="k">typeof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onRightClick</span><span class="o">!=</span><span class="s2">"function"</span><span class="p">};</span><span class="nx">v</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">originalEvent</span><span class="p">.</span><span class="nx">srcElement</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span><span class="k">return</span> <span class="nx">a</span><span class="o">===</span><span class="s2">"input"</span><span class="o">||</span><span class="nx">a</span><span class="o">===</span><span class="s2">"textarea"</span><span class="p">};</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="p">{</span><span class="na">apply</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="k">typeof</span> <span class="nx">a</span><span class="o">==</span><span class="s2">"function"</span><span class="p">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">Q</span><span class="p">,</span><span class="nx">b</span><span class="p">?</span><span class="nx">b</span><span class="p">:[]):</span><span class="nx">c</span><span class="p">},</span><span class="na">canAsync</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC39'><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">zAsync</span><span class="o">||</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)},</span><span class="na">clone</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="kc">null</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)?[]:{},</span><span class="nx">c</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="k">instanceof</span> <span class="nb">Date</span><span class="p">?</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">getTime</span><span class="p">()):</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">===</span><span class="s2">"object"</span><span class="p">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]):</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="na">eqs</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()},</span><span class="na">isArray</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">===</span><span class="s2">"[object Array]"</span><span class="p">},</span><span class="na">isElement</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">typeof</span> <span class="nx">HTMLElement</span><span class="o">===</span><span class="s2">"object"</span><span class="p">?</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">HTMLElement</span><span class="p">:</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">===</span><span class="s2">"object"</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">!==</span><span class="kc">null</span><span class="o">&amp;&amp;</span>&#x000A;</div><div class='line' id='LC40'><span class="nx">a</span><span class="p">.</span><span class="nx">nodeType</span><span class="o">===</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">nodeName</span><span class="o">===</span><span class="s2">"string"</span><span class="p">},</span><span class="na">$</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">!=</span><span class="s2">"string"</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="s2">""</span><span class="p">);</span><span class="k">return</span> <span class="k">typeof</span> <span class="nx">a</span><span class="o">==</span><span class="s2">"string"</span><span class="p">?</span><span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">ownerDocument</span><span class="p">:</span><span class="kc">null</span><span class="p">):</span><span class="nx">r</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">tId</span><span class="o">+</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">:</span><span class="kc">null</span><span class="p">)},</span><span class="na">getMDom</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">for</span><span class="p">(;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">;){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">tagName</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">tagName</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">attrName</span><span class="p">)</span><span class="o">!==</span><span class="kc">null</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">}</span><span class="k">return</span> <span class="kc">null</span><span class="p">},</span><span class="na">getNodeMainDom</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">parent</span><span class="p">(</span><span class="s2">"li"</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">||</span><span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">parentsUntil</span><span class="p">(</span><span class="s2">"li"</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)},</span>&#x000A;</div><div class='line' id='LC41'><span class="na">isChildOrSelf</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">b</span><span class="p">).</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">},</span><span class="na">uCanDo</span><span class="p">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}},</span><span class="nx">j</span><span class="o">=</span><span class="p">{</span><span class="na">addNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">keep</span><span class="p">.</span><span class="nx">leaf</span><span class="o">||!</span><span class="nx">b</span><span class="o">||</span><span class="nx">i</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="p">[</span><span class="nx">d</span><span class="p">]),</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">simpleData</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">transformTozTreeFormat</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">)),</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SWITCH</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">ICON</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">)</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceSwitchClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">CLOSE</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceIcoClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">CLOSE</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="na">display</span><span class="p">:</span><span class="s2">"none"</span><span class="p">});</span><span class="nx">e</span><span class="p">.</span><span class="nx">addNodesData</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">createNodes</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">level</span><span class="o">+</span>&#x000A;</div><div class='line' id='LC42'><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">f</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseParentNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)}</span><span class="k">else</span> <span class="nx">e</span><span class="p">.</span><span class="nx">addNodesData</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">createNodes</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="na">appendNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">?</span><span class="nx">d</span><span class="p">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">o</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="o">||</span><span class="nx">f</span><span class="o">&gt;=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="nx">f</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">s</span><span class="p">];</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="p">(</span><span class="nx">f</span><span class="o">===</span><span class="mi">0</span><span class="o">||</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="o">==</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">f</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">initNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">addNodeCache</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">));</span><span class="nx">o</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">I</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">);</span><span class="nx">I</span><span class="o">&amp;&amp;</span><span class="nx">I</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">appendNodes</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">I</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC43'><span class="nx">i</span><span class="p">,</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">open</span><span class="p">));</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeDOMNodeMainBefore</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeDOMNodeLine</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">getBeforeA</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">k</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeDOMNodeNameBefore</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">getInnerBeforeA</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">k</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeDOMNodeIcon</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">getInnerAfterA</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">k</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeDOMNodeNameAfter</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">getAfterA</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">k</span><span class="p">),</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">open</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeUlHtml</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">)),</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeDOMNodeMainAfter</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">addCreatedNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">))}</span><span class="k">return</span> <span class="nx">k</span><span class="p">},</span><span class="na">appendParentULDom</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="o">!</span><span class="nx">d</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">appendParentULDom</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">()),</span><span class="nx">d</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">));</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span>&#x000A;</div><div class='line' id='LC44'><span class="nx">f</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">appendNodes</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">level</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeUlHtml</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">));</span><span class="nx">d</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">))},</span><span class="na">asyncNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;!</span><span class="nx">f</span><span class="p">)</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">isAjaxing</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeAsync</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">isAjaxing</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">ICON</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">attr</span><span class="p">({</span><span class="na">style</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="s2">"class"</span><span class="p">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">BUTTON</span><span class="o">+</span><span class="s2">" "</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">ICO_LOADING</span><span class="p">});</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="p">{},</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">autoParam</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">autoParam</span><span class="p">);</span>&#x000A;</div><div class='line' id='LC45'><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s2">"="</span><span class="p">),</span><span class="nx">o</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">m</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">q</span><span class="p">]}</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">otherParam</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">otherParam</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">f</span><span class="o">+=</span><span class="mi">2</span><span class="p">)</span><span class="nx">m</span><span class="p">[</span><span class="nx">k</span><span class="p">[</span><span class="nx">f</span><span class="p">]]</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span> <span class="k">in</span> <span class="nx">k</span><span class="p">)</span><span class="nx">m</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">_ver</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span><span class="na">contentType</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">contentType</span><span class="p">,</span><span class="na">cache</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">type</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="na">url</span><span class="p">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">url</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">url</span><span class="p">),</span><span class="na">data</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">contentType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">"application/json"</span><span class="p">)</span><span class="o">&gt;-</span><span class="mi">1</span><span class="p">?</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">m</span><span class="p">):</span><span class="nx">m</span><span class="p">,</span><span class="na">dataType</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">dataType</span><span class="p">,</span><span class="na">headers</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">headers</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC46'><span class="na">xhrFields</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">xhrFields</span><span class="p">,</span><span class="na">success</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">_ver</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[];</span><span class="k">try</span><span class="p">{</span><span class="nx">f</span><span class="o">=!</span><span class="nx">i</span><span class="o">||</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">0</span><span class="p">?[]:</span><span class="k">typeof</span> <span class="nx">i</span><span class="o">==</span><span class="s2">"string"</span><span class="p">?</span><span class="kr">eval</span><span class="p">(</span><span class="s2">"("</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">")"</span><span class="p">):</span><span class="nx">i</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">k</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">i</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">isAjaxing</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">zAsync</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">setNodeLineIcos</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">!==</span><span class="s2">""</span><span class="p">?(</span><span class="nx">f</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">dataFilter</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">],</span><span class="nx">f</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">addNodes</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="p">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">f</span><span class="p">):[],</span><span class="o">!!</span><span class="nx">c</span><span class="p">)):</span><span class="nx">j</span><span class="p">.</span><span class="nx">addNodes</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,[],</span><span class="o">!!</span><span class="nx">c</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">ASYNC_SUCCESS</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="p">]);</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">)}},</span><span class="na">error</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">_ver</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">isAjaxing</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">setNodeLineIcos</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">ASYNC_ERROR</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC47'><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">])}}});</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">},</span><span class="na">cancelPreSelectedNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">curSelectedList</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">--</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">b</span><span class="o">===</span><span class="nx">i</span><span class="o">||!</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="o">||</span><span class="nx">c</span><span class="o">!==</span><span class="nx">i</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">CURSELECTED</span><span class="p">),</span><span class="nx">b</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeSelectedNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">break</span><span class="p">}</span><span class="k">else</span> <span class="nx">d</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">UNSELECTED</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">i</span><span class="p">])},</span><span class="na">createNodeCallback</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onNodeCreated</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">addDiyDom</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">createdNodes</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createdNodes</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">addDiyDom</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC48'><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">c</span><span class="p">]);</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onNodeCreated</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">NODECREATED</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">c</span><span class="p">])}},</span><span class="na">createNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">!=</span><span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">m</span><span class="o">=!</span><span class="nx">d</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">open</span><span class="o">||!!</span><span class="nx">l</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">createdNodes</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">appendNodes</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="p">),</span><span class="nx">k</span><span class="p">,</span><span class="nx">h</span><span class="p">;</span><span class="nx">d</span><span class="p">?(</span><span class="nx">d</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">d</span><span class="p">)):</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">;</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">children</span><span class="p">()[</span><span class="nx">f</span><span class="p">]),</span><span class="nx">f</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">?</span><span class="nx">r</span><span class="p">(</span><span class="nx">h</span><span class="p">).</span><span class="nx">before</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">)):</span><span class="nx">k</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">)));</span><span class="nx">j</span><span class="p">.</span><span class="nx">createNodeCallback</span><span class="p">(</span><span class="nx">a</span><span class="p">)}},</span><span class="na">destroy</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">initCache</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">initRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">n</span><span class="p">.</span><span class="nx">unbindTree</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span>&#x000A;</div><div class='line' id='LC49'><span class="nx">n</span><span class="p">.</span><span class="nx">unbindEvent</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">empty</span><span class="p">(),</span><span class="k">delete</span> <span class="nx">t</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">])},</span><span class="na">expandCollapseNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">m</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">q</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">expandTriggerFlag</span><span class="p">)</span><span class="nx">m</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">EXPAND</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">]):</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">COLLAPSE</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">])},</span><span class="nx">i</span><span class="p">.</span><span class="nx">expandTriggerFlag</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">||</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;!</span><span class="nx">l</span><span class="p">(</span><span class="nx">k</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="nx">j</span><span class="p">.</span><span class="nx">appendParentULDom</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">createNodeCallback</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="o">==</span><span class="nx">c</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,[]);</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC50'><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SWITCH</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">o</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">ICON</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">q</span><span class="p">?(</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="o">=!</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">iconOpen</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">iconClose</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"style"</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeIcoStyle</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)),</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">?(</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceSwitchClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">OPEN</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceIcoClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">OPEN</span><span class="p">),</span><span class="nx">d</span><span class="o">==!</span><span class="mi">1</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">expandSpeed</span><span class="o">==</span><span class="s2">""</span><span class="p">?(</span><span class="nx">c</span><span class="p">.</span><span class="nx">show</span><span class="p">(),</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,[])):</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">slideDown</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">expandSpeed</span><span class="p">,</span><span class="nx">f</span><span class="p">):(</span><span class="nx">c</span><span class="p">.</span><span class="nx">show</span><span class="p">(),</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,[]))):(</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceSwitchClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">CLOSE</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceIcoClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">CLOSE</span><span class="p">),</span><span class="nx">d</span><span class="o">==!</span><span class="mi">1</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">expandSpeed</span><span class="o">==</span><span class="s2">""</span><span class="o">||!</span><span class="p">(</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)?(</span><span class="nx">c</span><span class="p">.</span><span class="nx">hide</span><span class="p">(),</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,[])):</span>&#x000A;</div><div class='line' id='LC51'><span class="nx">c</span><span class="p">.</span><span class="nx">slideUp</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">expandSpeed</span><span class="p">,</span><span class="nx">f</span><span class="p">))):</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,[])}}</span><span class="k">else</span> <span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,[])},</span><span class="na">expandCollapseParentNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">?(</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseParentNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)):</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">))},</span><span class="na">expandCollapseSonNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">):</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">?</span><span class="o">!</span><span class="mi">1</span><span class="p">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">expandTriggerFlag</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">expandTriggerFlag</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseSonNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC52'><span class="nx">i</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">expandTriggerFlag</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">)},</span><span class="na">isSelectedNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">curSelectedList</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">--</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">===</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">])</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">},</span><span class="na">makeDOMNodeIcon</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">nameIsHTML</span><span class="p">?</span><span class="nx">d</span><span class="p">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&amp;/g</span><span class="p">,</span><span class="s2">"&amp;amp;"</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&lt;/g</span><span class="p">,</span><span class="s2">"&amp;lt;"</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&gt;/g</span><span class="p">,</span><span class="s2">"&amp;gt;"</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"&lt;span id='"</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">tId</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">ICON</span><span class="p">,</span><span class="s2">"' title='' treeNode"</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">ICON</span><span class="p">,</span><span class="s2">" class='"</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeIcoClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="s2">"' style='"</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeIcoStyle</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="s2">"'&gt;&lt;/span&gt;&lt;span id='"</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC53'><span class="nx">c</span><span class="p">.</span><span class="nx">tId</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SPAN</span><span class="p">,</span><span class="s2">"' class='"</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">NAME</span><span class="p">,</span><span class="s2">"'&gt;"</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="s2">"&lt;/span&gt;"</span><span class="p">)},</span><span class="na">makeDOMNodeLine</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"&lt;span id='"</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">tId</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SWITCH</span><span class="p">,</span><span class="s2">"' title='' class='"</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeLineClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="s2">"' treeNode"</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SWITCH</span><span class="p">,</span><span class="s2">"&gt;&lt;/span&gt;"</span><span class="p">)},</span><span class="na">makeDOMNodeMainAfter</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"&lt;/li&gt;"</span><span class="p">)},</span><span class="na">makeDOMNodeMainBefore</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"&lt;li id='"</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">tId</span><span class="p">,</span><span class="s2">"' class='"</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">LEVEL</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">level</span><span class="p">,</span><span class="s2">"' tabindex='0' hidefocus='true' treenode&gt;"</span><span class="p">)},</span><span class="na">makeDOMNodeNameAfter</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"&lt;/a&gt;"</span><span class="p">)},</span><span class="na">makeDOMNodeNameBefore</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC54'><span class="nx">e</span><span class="p">.</span><span class="nx">nodeTitle</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeUrl</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeFontCss</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">i</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="s2">":"</span><span class="p">,</span><span class="nx">i</span><span class="p">[</span><span class="nx">k</span><span class="p">],</span><span class="s2">";"</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"&lt;a id='"</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">tId</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="s2">"' class='"</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">LEVEL</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">level</span><span class="p">,</span><span class="s2">"' treeNode"</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="s1">' onclick="'</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">click</span><span class="o">||</span><span class="s2">""</span><span class="p">,</span><span class="s1">'" '</span><span class="p">,</span><span class="nx">f</span><span class="o">!=</span><span class="kc">null</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">?</span><span class="s2">"href='"</span><span class="o">+</span><span class="nx">f</span><span class="o">+</span><span class="s2">"'"</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="s2">" target='"</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeTarget</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="s2">"' style='"</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">),</span><span class="s2">"'"</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">showTitle</span><span class="p">,[</span><span class="nx">b</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">c</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">showTitle</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"title='"</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/'/g</span><span class="p">,</span><span class="s2">"&amp;#39;"</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&lt;/g</span><span class="p">,</span><span class="s2">"&amp;lt;"</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&gt;/g</span><span class="p">,</span><span class="s2">"&amp;gt;"</span><span class="p">),</span><span class="s2">"'"</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"&gt;"</span><span class="p">)},</span><span class="na">makeNodeFontCss</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC55'><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">fontCss</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">fontCss</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="o">&amp;&amp;</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">!=</span><span class="s2">"function"</span><span class="p">?</span><span class="nx">c</span><span class="p">:{}},</span><span class="na">makeNodeIcoClass</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[</span><span class="s2">"ico"</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">isAjaxing</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">iconSkin</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">iconSkin</span><span class="o">+</span><span class="s2">"_"</span><span class="p">:</span><span class="s2">""</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">d</span><span class="p">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">OPEN</span><span class="p">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">CLOSE</span><span class="p">):</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">DOCU</span><span class="p">)}</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">BUTTON</span><span class="o">+</span><span class="s2">" "</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">"_"</span><span class="p">)},</span><span class="na">makeNodeIcoStyle</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">isAjaxing</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">iconOpen</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">iconClose</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">iconOpen</span><span class="p">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">iconClose</span><span class="p">:</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">icon</span><span class="p">];</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"background:url("</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC56'><span class="nx">d</span><span class="p">,</span><span class="s2">") 0 0 no-repeat;"</span><span class="p">);(</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">showIcon</span><span class="o">==!</span><span class="mi">1</span><span class="o">||!</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">showIcon</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"width:0px;height:0px;"</span><span class="p">)}</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">)},</span><span class="na">makeNodeLineClass</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">showLine</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">level</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">isLastNode</span><span class="p">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">ROOT</span><span class="p">):</span><span class="nx">b</span><span class="p">.</span><span class="nx">level</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="p">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">ROOTS</span><span class="p">):</span><span class="nx">b</span><span class="p">.</span><span class="nx">isLastNode</span><span class="p">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">BOTTOM</span><span class="p">):</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">CENTER</span><span class="p">):</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">NOLINE</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)?</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">OPEN</span><span class="p">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">CLOSE</span><span class="p">):</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">DOCU</span><span class="p">);</span><span class="k">return</span> <span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeLineClassEx</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">"_"</span><span class="p">)},</span>&#x000A;</div><div class='line' id='LC57'><span class="na">makeNodeLineClassEx</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">BUTTON</span><span class="o">+</span><span class="s2">" "</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">LEVEL</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">level</span><span class="o">+</span><span class="s2">" "</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">SWITCH</span><span class="o">+</span><span class="s2">" "</span><span class="p">},</span><span class="na">makeNodeTarget</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="o">||</span><span class="s2">"_blank"</span><span class="p">},</span><span class="na">makeNodeUrl</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]?</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]:</span><span class="kc">null</span><span class="p">},</span><span class="na">makeUlHtml</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"&lt;ul id='"</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="s2">"' class='"</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">LEVEL</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">level</span><span class="p">,</span><span class="s2">" "</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeUlLineClass</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="s2">"' style='display:"</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">?</span><span class="s2">"block"</span><span class="p">:</span><span class="s2">"none"</span><span class="p">,</span><span class="s2">"'&gt;"</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"&lt;/ul&gt;"</span><span class="p">)},</span><span class="na">makeUlLineClass</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">showLine</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">isLastNode</span><span class="p">?</span>&#x000A;</div><div class='line' id='LC58'><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">LINE</span><span class="p">:</span><span class="s2">""</span><span class="p">},</span><span class="na">removeChildNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeNodeCache</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeSelectedNode</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">delete</span> <span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">children</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">keep</span><span class="p">.</span><span class="nx">parent</span><span class="p">?</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">empty</span><span class="p">():(</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SWITCH</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">ICON</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceSwitchClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">DOCU</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceIcoClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">DOCU</span><span class="p">),</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">remove</span><span class="p">())}}},</span><span class="na">scrollIntoView</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">Element</span><span class="o">===</span><span class="s2">"undefined"</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">getBoundingClientRect</span><span class="p">(),</span>&#x000A;</div><div class='line' id='LC59'><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getBoundingClientRect</span><span class="p">();(</span><span class="nx">d</span><span class="p">.</span><span class="nx">top</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">top</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">bottom</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">bottom</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">right</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">right</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">left</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">left</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">scrollIntoView</span><span class="p">()}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">Element</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">scrollIntoViewIfNeeded</span><span class="p">)</span><span class="nx">Element</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">scrollIntoViewIfNeeded</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span><span class="p">{</span><span class="na">start</span><span class="p">:</span><span class="nx">a</span><span class="p">,</span><span class="na">length</span><span class="p">:</span><span class="nx">c</span><span class="p">,</span><span class="na">end</span><span class="p">:</span><span class="nx">a</span><span class="o">+</span><span class="nx">c</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">start</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">start</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">end</span><span class="p">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">start</span><span class="p">)):(</span><span class="nx">b</span><span class="p">.</span><span class="nx">start</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="p">{</span><span class="na">x</span><span class="p">:</span><span class="nx">a</span><span class="p">,</span><span class="na">y</span><span class="p">:</span><span class="nx">b</span><span class="p">,</span><span class="na">translate</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="o">+</span><span class="nx">i</span><span class="p">)}}}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(;</span><span class="nx">a</span><span class="p">;)</span><span class="nx">b</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC60'><span class="nx">b</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">offsetLeft</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">offsetTop</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">offsetParent</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)),</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="nx">h</span> <span class="k">instanceof</span> <span class="nx">HTMLElement</span><span class="p">;)</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">d</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">clientLeft</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">clientTop</span><span class="p">)),</span><span class="nx">h</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">l</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">clientWidth</span><span class="p">)),</span><span class="nx">h</span><span class="p">.</span><span class="nx">scrollTop</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">clientHeight</span><span class="p">)),</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="o">-</span><span class="nx">h</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">,</span><span class="o">-</span><span class="nx">h</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">scrollIntoViewIfNeeded</span><span class="p">()}},</span><span class="na">setFirstNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">isFirstNode</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC61'><span class="o">!</span><span class="mi">0</span><span class="p">},</span><span class="na">setLastNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">isLastNode</span><span class="o">=!</span><span class="mi">0</span><span class="p">},</span><span class="na">removeNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">():</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">isLastNode</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">getPreNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="kc">null</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">getNextNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="kc">null</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodeCache</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="p">)){</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeNodeCache</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeSelectedNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">tId</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">break</span><span class="p">}</span><span class="nx">j</span><span class="p">.</span><span class="nx">setFirstNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">setLastNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC62'><span class="nx">d</span><span class="p">);</span><span class="kd">var</span> <span class="nx">k</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">keep</span><span class="p">.</span><span class="nx">parent</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">open</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">delete</span> <span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">children</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SWITCH</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">ICON</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceSwitchClass</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">DOCU</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceIcoClass</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">DOCU</span><span class="p">),</span><span class="nx">i</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">"display"</span><span class="p">,</span><span class="s2">"none"</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">showLine</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SWITCH</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">ICON</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="o">==</span><span class="nx">c</span><span class="p">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">1</span><span class="p">?</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceSwitchClass</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">ROOT</span><span class="p">):(</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SWITCH</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceSwitchClass</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">ROOTS</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceSwitchClass</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC63'><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">BOTTOM</span><span class="p">)):</span><span class="nx">j</span><span class="p">.</span><span class="nx">replaceSwitchClass</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">BOTTOM</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">LINE</span><span class="p">)}}},</span><span class="na">replaceIcoClass</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">isAjaxing</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"class"</span><span class="p">),</span><span class="nx">a</span><span class="o">!=</span><span class="k">void</span> <span class="mi">0</span><span class="p">)){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">"_"</span><span class="p">);</span><span class="k">switch</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">case</span> <span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="na">OPEN</span><span class="p">:</span><span class="k">case</span> <span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="na">CLOSE</span><span class="p">:</span><span class="k">case</span> <span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="na">DOCU</span><span class="p">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="nx">b</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"class"</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">"_"</span><span class="p">))}},</span><span class="na">replaceSwitchClass</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"class"</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">!=</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">"_"</span><span class="p">);</span><span class="k">switch</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">case</span> <span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="na">ROOT</span><span class="p">:</span><span class="k">case</span> <span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="na">ROOTS</span><span class="p">:</span><span class="k">case</span> <span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="na">CENTER</span><span class="p">:</span><span class="k">case</span> <span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="na">BOTTOM</span><span class="p">:</span><span class="k">case</span> <span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="na">NOLINE</span><span class="p">:</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeLineClassEx</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span>&#x000A;</div><div class='line' id='LC64'><span class="nx">c</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="na">OPEN</span><span class="p">:</span><span class="k">case</span> <span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="na">CLOSE</span><span class="p">:</span><span class="k">case</span> <span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="na">DOCU</span><span class="p">:</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="nx">b</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"class"</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">"_"</span><span class="p">));</span><span class="nx">c</span><span class="o">!==</span><span class="nx">g</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">DOCU</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s2">"disabled"</span><span class="p">):</span><span class="nx">b</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"disabled"</span><span class="p">,</span><span class="s2">"disabled"</span><span class="p">)}}},</span><span class="na">selectNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">cancelPreSelectedNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">CURSELECTED</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">addSelectedNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">SELECTED</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">])},</span><span class="na">setNodeFontCss</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeFontCss</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="nx">d</span><span class="p">)},</span><span class="na">setNodeLineIcos</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SWITCH</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC65'><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">ICON</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeUlLineClass</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">0</span><span class="p">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">LINE</span><span class="p">):</span><span class="nx">d</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"class"</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeLineClass</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">));</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)?</span><span class="nx">c</span><span class="p">.</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s2">"disabled"</span><span class="p">):</span><span class="nx">c</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"disabled"</span><span class="p">,</span><span class="s2">"disabled"</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s2">"style"</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"style"</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeIcoStyle</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">));</span><span class="nx">f</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"class"</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeIcoClass</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">))}},</span><span class="na">setNodeName</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeTitle</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SPAN</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">nameIsHTML</span><span class="p">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)):</span><span class="nx">d</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">));</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">showTitle</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC66'><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">showTitle</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"title"</span><span class="p">,</span><span class="o">!</span><span class="nx">c</span><span class="p">?</span><span class="s2">""</span><span class="p">:</span><span class="nx">c</span><span class="p">)},</span><span class="na">setNodeTarget</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"target"</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeTarget</span><span class="p">(</span><span class="nx">b</span><span class="p">))},</span><span class="na">setNodeUrl</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeNodeUrl</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="o">==</span><span class="kc">null</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">0</span><span class="p">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s2">"href"</span><span class="p">):</span><span class="nx">c</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"href"</span><span class="p">,</span><span class="nx">d</span><span class="p">)},</span><span class="na">switchNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="o">||!</span><span class="nx">h</span><span class="p">.</span><span class="nx">canAsync</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)?</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">):</span><span class="nx">a</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">enable</span><span class="p">?</span><span class="nx">j</span><span class="p">.</span><span class="nx">asyncNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">):</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">)}};</span><span class="nx">r</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">zTree</span><span class="o">=</span><span class="p">{</span><span class="na">consts</span><span class="p">:{</span><span class="na">className</span><span class="p">:{</span><span class="na">BUTTON</span><span class="p">:</span><span class="s2">"button"</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC67'><span class="na">LEVEL</span><span class="p">:</span><span class="s2">"level"</span><span class="p">,</span><span class="na">ICO_LOADING</span><span class="p">:</span><span class="s2">"ico_loading"</span><span class="p">,</span><span class="na">SWITCH</span><span class="p">:</span><span class="s2">"switch"</span><span class="p">,</span><span class="na">NAME</span><span class="p">:</span><span class="s2">"node_name"</span><span class="p">},</span><span class="na">event</span><span class="p">:{</span><span class="na">NODECREATED</span><span class="p">:</span><span class="s2">"ztree_nodeCreated"</span><span class="p">,</span><span class="na">CLICK</span><span class="p">:</span><span class="s2">"ztree_click"</span><span class="p">,</span><span class="na">EXPAND</span><span class="p">:</span><span class="s2">"ztree_expand"</span><span class="p">,</span><span class="na">COLLAPSE</span><span class="p">:</span><span class="s2">"ztree_collapse"</span><span class="p">,</span><span class="na">ASYNC_SUCCESS</span><span class="p">:</span><span class="s2">"ztree_async_success"</span><span class="p">,</span><span class="na">ASYNC_ERROR</span><span class="p">:</span><span class="s2">"ztree_async_error"</span><span class="p">,</span><span class="na">REMOVE</span><span class="p">:</span><span class="s2">"ztree_remove"</span><span class="p">,</span><span class="na">SELECTED</span><span class="p">:</span><span class="s2">"ztree_selected"</span><span class="p">,</span><span class="na">UNSELECTED</span><span class="p">:</span><span class="s2">"ztree_unselected"</span><span class="p">},</span><span class="na">id</span><span class="p">:{</span><span class="na">A</span><span class="p">:</span><span class="s2">"_a"</span><span class="p">,</span><span class="na">ICON</span><span class="p">:</span><span class="s2">"_ico"</span><span class="p">,</span><span class="na">SPAN</span><span class="p">:</span><span class="s2">"_span"</span><span class="p">,</span><span class="na">SWITCH</span><span class="p">:</span><span class="s2">"_switch"</span><span class="p">,</span><span class="na">UL</span><span class="p">:</span><span class="s2">"_ul"</span><span class="p">},</span><span class="na">line</span><span class="p">:{</span><span class="na">ROOT</span><span class="p">:</span><span class="s2">"root"</span><span class="p">,</span><span class="na">ROOTS</span><span class="p">:</span><span class="s2">"roots"</span><span class="p">,</span><span class="na">CENTER</span><span class="p">:</span><span class="s2">"center"</span><span class="p">,</span><span class="na">BOTTOM</span><span class="p">:</span><span class="s2">"bottom"</span><span class="p">,</span><span class="na">NOLINE</span><span class="p">:</span><span class="s2">"noline"</span><span class="p">,</span><span class="na">LINE</span><span class="p">:</span><span class="s2">"line"</span><span class="p">},</span><span class="na">folder</span><span class="p">:{</span><span class="na">OPEN</span><span class="p">:</span><span class="s2">"open"</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC68'><span class="na">CLOSE</span><span class="p">:</span><span class="s2">"close"</span><span class="p">,</span><span class="na">DOCU</span><span class="p">:</span><span class="s2">"docu"</span><span class="p">},</span><span class="na">node</span><span class="p">:{</span><span class="na">CURSELECTED</span><span class="p">:</span><span class="s2">"curSelectedNode"</span><span class="p">}},</span><span class="na">_z</span><span class="p">:{</span><span class="na">tools</span><span class="p">:</span><span class="nx">h</span><span class="p">,</span><span class="na">view</span><span class="p">:</span><span class="nx">j</span><span class="p">,</span><span class="na">event</span><span class="p">:</span><span class="nx">n</span><span class="p">,</span><span class="na">data</span><span class="p">:</span><span class="nx">e</span><span class="p">},</span><span class="na">getZTreeObj</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getZTreeTools</span><span class="p">(</span><span class="nx">a</span><span class="p">))?</span><span class="nx">a</span><span class="p">:</span><span class="kc">null</span><span class="p">},</span><span class="na">destroy</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">j</span><span class="p">.</span><span class="nx">destroy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">t</span><span class="p">)</span><span class="nx">j</span><span class="p">.</span><span class="nx">destroy</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">b</span><span class="p">])},</span><span class="na">init</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">P</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">treeId</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"id"</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">treeObj</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span><span class="nx">t</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">treeId</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">maxHeight</span><span class="o">===</span><span class="s2">"undefined"</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">expandSpeed</span><span class="o">=</span><span class="s2">""</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">initRoot</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">c</span><span class="p">)?</span>&#x000A;</div><div class='line' id='LC69'><span class="nx">c</span><span class="p">:[</span><span class="nx">c</span><span class="p">]):[];</span><span class="nx">d</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">simpleData</span><span class="p">.</span><span class="nx">enable</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">transformTozTreeFormat</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">)):</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">initCache</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">unbindTree</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">bindTree</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">unbindEvent</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">bindEvent</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">{</span><span class="na">setting</span><span class="p">:</span><span class="nx">d</span><span class="p">,</span><span class="na">addNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(){</span><span class="nx">j</span><span class="p">.</span><span class="nx">addNodes</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">f</span><span class="o">==!</span><span class="mi">0</span><span class="p">)}</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="kc">null</span><span class="p">);</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;!</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">keep</span><span class="p">.</span><span class="nx">leaf</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">l</span><span class="p">)?(</span><span class="nx">f</span><span class="o">=!!</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="o">=-</span><span class="mi">1</span><span class="p">):</span><span class="nx">b</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">c</span><span class="p">)?</span><span class="nx">c</span><span class="p">:[</span><span class="nx">c</span><span class="p">]);</span><span class="nx">h</span><span class="p">.</span><span class="nx">canAsync</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">)?</span><span class="nx">j</span><span class="p">.</span><span class="nx">asyncNode</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">):</span><span class="nx">g</span><span class="p">();</span><span class="k">return</span> <span class="nx">n</span><span class="p">},</span><span class="na">cancelSelectedNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">cancelPreSelectedNode</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC70'><span class="nx">a</span><span class="p">)},</span><span class="na">destroy</span><span class="p">:</span><span class="kd">function</span><span class="p">(){</span><span class="nx">j</span><span class="p">.</span><span class="nx">destroy</span><span class="p">(</span><span class="nx">d</span><span class="p">)},</span><span class="na">expandAll</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=!!</span><span class="nx">a</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseSonNode</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="na">expandNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">!==!</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="o">||!</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="nx">b</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">!==!</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=!</span><span class="nx">a</span><span class="p">.</span><span class="nx">open</span><span class="p">);</span><span class="k">if</span><span class="p">((</span><span class="nx">g</span><span class="o">=!!</span><span class="nx">g</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeExpand</span><span class="p">,[</span><span class="nx">d</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">a</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeCollapse</span><span class="p">,[</span><span class="nx">d</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">a</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseParentNode</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span>&#x000A;</div><div class='line' id='LC71'><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">open</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">d</span><span class="p">).</span><span class="nx">expandTriggerFlag</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">canAsync</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">?</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseSonNode</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="p">):(</span><span class="nx">a</span><span class="p">.</span><span class="nx">open</span><span class="o">=!</span><span class="nx">b</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">switchNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">n</span><span class="p">());</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="na">getNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">getNodes</span><span class="p">(</span><span class="nx">d</span><span class="p">)},</span><span class="na">getNodeByParam</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="nx">a</span><span class="p">?</span><span class="kc">null</span><span class="p">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodeByParam</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">):</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodes</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="na">getNodeByTId</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">getNodeCache</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="na">getNodesByParam</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="nx">a</span><span class="p">?</span><span class="kc">null</span><span class="p">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodesByParam</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">):</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodes</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="na">getNodesByParamFuzzy</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC72'><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="nx">a</span><span class="p">?</span><span class="kc">null</span><span class="p">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodesByParamFuzzy</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">):</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodes</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="na">getNodesByFilter</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">b</span><span class="o">=!!</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="nx">a</span><span class="o">||</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">!=</span><span class="s2">"function"</span><span class="p">?</span><span class="nx">b</span><span class="p">?</span><span class="kc">null</span><span class="p">:[]:</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodesByFilter</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">):</span><span class="nx">e</span><span class="p">.</span><span class="nx">getNodes</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">)},</span><span class="na">getNodeIndex</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">():</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="p">;</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span><span class="na">getSelectedNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">d</span><span class="p">).</span><span class="nx">curSelectedList</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]);</span>&#x000A;</div><div class='line' id='LC73'><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="na">isSelectedNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">isSelectedNode</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="na">reAsyncChildNodesPromise</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">try</span><span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">reAsyncChildNodes</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">)})}</span><span class="k">catch</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="nx">e</span><span class="p">(</span><span class="nx">g</span><span class="p">)}})},</span><span class="na">reAsyncChildNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">enable</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=!</span><span class="nx">a</span><span class="p">;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">==</span><span class="s2">"refresh"</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">b</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeNodeCache</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">n</span><span class="p">]);</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeSelectedNode</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,[]);</span><span class="nx">h</span><span class="p">?</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">empty</span><span class="p">():</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">d</span><span class="p">).</span><span class="nx">empty</span><span class="p">()}</span><span class="nx">j</span><span class="p">.</span><span class="nx">asyncNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC74'><span class="nx">h</span><span class="p">?</span><span class="kc">null</span><span class="p">:</span><span class="nx">a</span><span class="p">,</span><span class="o">!!</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">)}},</span><span class="na">refresh</span><span class="p">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">initRoot</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">initCache</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">createNodes</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="kc">null</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)},</span><span class="na">removeChildNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">removeChildNodes</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">?</span><span class="nx">b</span><span class="p">:</span><span class="kc">null</span><span class="p">},</span><span class="na">removeNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=!!</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeRemove</span><span class="p">,[</span><span class="nx">d</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">a</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="o">||</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">removeNode</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">REMOVE</span><span class="p">,[</span><span class="nx">d</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">a</span><span class="p">])))},</span><span class="na">selectNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC75'><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">uCanDo</span><span class="p">(</span><span class="nx">d</span><span class="p">)){</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">selectedMulti</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">)</span><span class="nx">j</span><span class="p">.</span><span class="nx">expandCollapseParentNode</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">)</span><span class="k">try</span><span class="p">{</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">).</span><span class="nx">focus</span><span class="p">().</span><span class="nx">blur</span><span class="p">()}</span><span class="k">catch</span><span class="p">(</span><span class="nx">f</span><span class="p">){}</span><span class="nx">j</span><span class="p">.</span><span class="nx">selectNode</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}},</span><span class="na">transformTozTreeNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">transformTozTreeFormat</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="na">transformToArray</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">transformToArrayFormat</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="na">updateNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">uCanDo</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">setNodeName</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">setNodeTarget</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">setNodeUrl</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC76'><span class="nx">a</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">setNodeLineIcos</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">setNodeFontCss</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">))}};</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeTools</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">setZTreeTools</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">);(</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">?</span><span class="nx">j</span><span class="p">.</span><span class="nx">createNodes</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span><span class="nx">d</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">url</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="k">async</span><span class="p">.</span><span class="nx">url</span><span class="o">!==</span><span class="s2">""</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">asyncNode</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">}};</span><span class="kd">var</span> <span class="nx">Q</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">zTree</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">$</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">consts</span><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>&#x000A;</div><div class='line' id='LC77'>&#x000A;</div><div class='line' id='LC78'><span class="cm">/*</span>&#x000A;</div><div class='line' id='LC79'><span class="cm"> * JQuery zTree excheck v3.5.40</span>&#x000A;</div><div class='line' id='LC80'><span class="cm"> * http://treejs.cn/</span>&#x000A;</div><div class='line' id='LC81'><span class="cm"> *</span>&#x000A;</div><div class='line' id='LC82'><span class="cm"> * Copyright (c) 2010 Hunter.z</span>&#x000A;</div><div class='line' id='LC83'><span class="cm"> *</span>&#x000A;</div><div class='line' id='LC84'><span class="cm"> * Licensed same as jquery - MIT License</span>&#x000A;</div><div class='line' id='LC85'><span class="cm"> * http://www.opensource.org/licenses/mit-license.php</span>&#x000A;</div><div class='line' id='LC86'><span class="cm"> *</span>&#x000A;</div><div class='line' id='LC87'><span class="cm"> * email: hunter.z@263.net</span>&#x000A;</div><div class='line' id='LC88'><span class="cm"> * Date: 2019-01-18</span>&#x000A;</div><div class='line' id='LC89'><span class="cm"> */</span>&#x000A;</div><div class='line' id='LC90'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">m</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="p">{</span><span class="na">event</span><span class="p">:{</span><span class="na">CHECK</span><span class="p">:</span><span class="s2">"ztree_check"</span><span class="p">},</span><span class="na">id</span><span class="p">:{</span><span class="na">CHECK</span><span class="p">:</span><span class="s2">"_check"</span><span class="p">},</span><span class="na">checkbox</span><span class="p">:{</span><span class="na">STYLE</span><span class="p">:</span><span class="s2">"checkbox"</span><span class="p">,</span><span class="na">DEFAULT</span><span class="p">:</span><span class="s2">"chk"</span><span class="p">,</span><span class="na">DISABLED</span><span class="p">:</span><span class="s2">"disable"</span><span class="p">,</span><span class="na">FALSE</span><span class="p">:</span><span class="s2">"false"</span><span class="p">,</span><span class="na">TRUE</span><span class="p">:</span><span class="s2">"true"</span><span class="p">,</span><span class="na">FULL</span><span class="p">:</span><span class="s2">"full"</span><span class="p">,</span><span class="na">PART</span><span class="p">:</span><span class="s2">"part"</span><span class="p">,</span><span class="na">FOCUS</span><span class="p">:</span><span class="s2">"focus"</span><span class="p">},</span><span class="na">radio</span><span class="p">:{</span><span class="na">STYLE</span><span class="p">:</span><span class="s2">"radio"</span><span class="p">,</span><span class="na">TYPE_ALL</span><span class="p">:</span><span class="s2">"all"</span><span class="p">,</span><span class="na">TYPE_LEVEL</span><span class="p">:</span><span class="s2">"level"</span><span class="p">}},</span><span class="nx">v</span><span class="o">=</span><span class="p">{</span><span class="na">check</span><span class="p">:{</span><span class="na">enable</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">autoCheckTrigger</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">chkStyle</span><span class="p">:</span><span class="nx">o</span><span class="p">.</span><span class="nx">checkbox</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">,</span><span class="na">nocheckInherit</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">chkDisabledInherit</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">radioType</span><span class="p">:</span><span class="nx">o</span><span class="p">.</span><span class="nx">radio</span><span class="p">.</span><span class="nx">TYPE_LEVEL</span><span class="p">,</span><span class="na">chkboxType</span><span class="p">:{</span><span class="na">Y</span><span class="p">:</span><span class="s2">"ps"</span><span class="p">,</span><span class="na">N</span><span class="p">:</span><span class="s2">"ps"</span><span class="p">}},</span><span class="na">data</span><span class="p">:{</span><span class="na">key</span><span class="p">:{</span><span class="na">checked</span><span class="p">:</span><span class="s2">"checked"</span><span class="p">}},</span><span class="na">callback</span><span class="p">:{</span><span class="na">beforeCheck</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onCheck</span><span class="p">:</span><span class="kc">null</span><span class="p">}};</span><span class="nx">p</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC91'><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">===!</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeCheck</span><span class="p">,[</span><span class="nx">b</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">a</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="nx">d</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">checkNodeRelation</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">setChkClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClassWithSelf</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,[</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">a</span><span class="p">]);</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="nx">q</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">===!</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Focus</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">setChkClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="nx">r</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC92'><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">===!</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Focus</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">setChkClass</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="nx">m</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">zTree</span><span class="p">.</span><span class="nx">consts</span><span class="p">,</span><span class="nx">o</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">zTree</span><span class="p">.</span><span class="nx">_z</span><span class="p">,{</span><span class="na">tools</span><span class="p">:{},</span><span class="na">view</span><span class="p">:{</span><span class="na">checkNodeRelation</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">radio</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkStyle</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRadioCheckedList</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">radioType</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">TYPE_ALL</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">--</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">!=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">setChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC93'><span class="nx">n</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClassWithSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">))}</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">():</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">],(</span><span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">!=</span><span class="nx">a</span><span class="p">)</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">setChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">n</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">b</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">radioType</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">TYPE_ALL</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">==</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">]){</span><span class="nx">g</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">break</span><span class="p">}}</span><span class="k">else</span> <span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">0</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkboxType</span><span class="p">.</span><span class="nx">Y</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">"s"</span><span class="p">)</span><span class="o">&gt;-</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">setSonNodeCheckBox</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC94'><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="o">!</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">0</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkboxType</span><span class="p">.</span><span class="nx">N</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">"s"</span><span class="p">)</span><span class="o">&gt;-</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">setSonNodeCheckBox</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkboxType</span><span class="p">.</span><span class="nx">Y</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">"p"</span><span class="p">)</span><span class="o">&gt;-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">setParentNodeCheckBox</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="o">!</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkboxType</span><span class="p">.</span><span class="nx">N</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">"p"</span><span class="p">)</span><span class="o">&gt;-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">setParentNodeCheckBox</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)},</span><span class="na">makeChkClass</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">checkbox</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">radio</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="s2">""</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">===!</span><span class="mi">0</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">DISABLED</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">halfCheck</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">PART</span><span class="p">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkStyle</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">FULL</span><span class="p">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">PART</span><span class="p">:</span><span class="nx">g</span><span class="p">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">===</span><span class="mi">2</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">===-</span><span class="mi">1</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">FULL</span><span class="p">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">PART</span><span class="p">:</span>&#x000A;</div><div class='line' id='LC95'><span class="nx">a</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">FULL</span><span class="p">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">PART</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkStyle</span><span class="o">+</span><span class="s2">"_"</span><span class="o">+</span><span class="p">(</span><span class="nx">g</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">TRUE</span><span class="p">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">FALSE</span><span class="p">)</span><span class="o">+</span><span class="s2">"_"</span><span class="o">+</span><span class="nx">j</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Focus</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!==!</span><span class="mi">0</span><span class="p">?</span><span class="nx">d</span><span class="o">+</span><span class="s2">"_"</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">FOCUS</span><span class="p">:</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">BUTTON</span><span class="o">+</span><span class="s2">" "</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">DEFAULT</span><span class="o">+</span><span class="s2">" "</span><span class="o">+</span><span class="nx">d</span><span class="p">},</span><span class="na">repairAllChk</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkStyle</span><span class="o">===</span><span class="nx">h</span><span class="p">.</span><span class="nx">checkbox</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">g</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">setSonNodeCheckBox</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">)}},</span><span class="na">repairChkClass</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">makeChkFlag</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">!==!</span><span class="mi">0</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC96'><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">setChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)}},</span><span class="na">repairParentChkClass</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">)}},</span><span class="na">repairParentChkClassWithSelf</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">)}},</span><span class="na">repairSonChkDisabled</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!=</span><span class="nx">b</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">((</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairSonChkDisabled</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC97'><span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">)}},</span><span class="na">repairParentChkDisabled</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!=</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkDisabled</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">)}},</span><span class="na">setChkClass</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">===!</span><span class="mi">0</span><span class="p">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">hide</span><span class="p">():</span><span class="nx">a</span><span class="p">.</span><span class="nx">show</span><span class="p">(),</span><span class="nx">a</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"class"</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">makeChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">)))},</span><span class="na">setParentNodeCheckBox</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">makeChkFlag</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">setChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">autoCheckTrigger</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">!=</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC98'><span class="p">[</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">a</span><span class="p">]));</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">){</span><span class="nx">j</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">()),</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">w</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">k</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="o">||</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">===!</span><span class="mi">0</span><span class="o">||</span><span class="nx">l</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">===!</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">j</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">}}</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">setParentNodeCheckBox</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">)}},</span><span class="na">setSonNodeCheckBox</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">setSonNodeCheckBox</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span>&#x000A;</div><div class='line' id='LC99'><span class="nx">m</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">===!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=!</span><span class="mi">0</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!==!</span><span class="mi">0</span><span class="p">){</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">makeChkFlag</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!==!</span><span class="mi">0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="o">!</span><span class="nx">g</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">=</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">?</span><span class="nx">b</span><span class="p">?</span><span class="mi">2</span><span class="p">:</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span> <span class="nx">a</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">setChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">autoCheckTrigger</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">!=</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,[</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">a</span><span class="p">])}}}},</span><span class="na">event</span><span class="p">:{},</span><span class="na">data</span><span class="p">:{</span><span class="na">getRadioCheckedList</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">radioCheckedList</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="p">.</span><span class="nx">getNodeCache</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC100'><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">tId</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="o">--</span><span class="p">,</span><span class="nx">d</span><span class="o">--</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="na">getCheckStatus</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">enable</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span><span class="p">{</span><span class="na">checked</span><span class="p">:</span><span class="nx">b</span><span class="p">,</span><span class="na">half</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">halfCheck</span><span class="p">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">halfCheck</span><span class="p">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkStyle</span><span class="o">==</span><span class="nx">h</span><span class="p">.</span><span class="nx">radio</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">===</span><span class="mi">2</span><span class="p">:</span><span class="nx">b</span><span class="p">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">&gt;-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">}},</span><span class="na">getTreeCheckedNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkStyle</span><span class="o">==</span><span class="nx">h</span><span class="p">.</span><span class="nx">radio</span><span class="p">.</span><span class="nx">STYLE</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">radioType</span><span class="o">==</span><span class="nx">h</span><span class="p">.</span><span class="nx">radio</span><span class="p">.</span><span class="nx">TYPE_ALL</span><span class="p">,</span><span class="nx">d</span><span class="o">=!</span><span class="nx">d</span><span class="p">?[]:</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC101'><span class="nx">a</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="o">==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">j</span><span class="p">))</span><span class="k">break</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">getTreeCheckedNodes</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="na">getTreeChangeCheckedNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=!</span><span class="nx">b</span><span class="p">?[]:</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="o">!=</span><span class="nx">g</span><span class="p">.</span><span class="nx">checkedOld</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">getTreeChangeCheckedNodes</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="na">makeChkFlag</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span>&#x000A;</div><div class='line' id='LC102'><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">l</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkStyle</span><span class="o">==</span><span class="nx">h</span><span class="p">.</span><span class="nx">radio</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">===!</span><span class="mi">0</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">===!</span><span class="mi">0</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="p">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">halfCheck</span><span class="o">===!</span><span class="mi">0</span><span class="p">?</span><span class="mi">2</span><span class="p">:</span><span class="nx">i</span><span class="p">?</span><span class="mi">2</span><span class="p">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">?</span><span class="mi">2</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">==</span><span class="mi">2</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">else</span> <span class="nx">l</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkStyle</span><span class="o">==</span><span class="nx">h</span><span class="p">.</span><span class="nx">checkbox</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">===!</span><span class="mi">0</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">===!</span><span class="mi">0</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="p">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">halfCheck</span><span class="o">===!</span><span class="mi">0</span><span class="p">?</span><span class="mi">1</span><span class="p">:</span><span class="nx">i</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">===-</span><span class="mi">1</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">===</span><span class="mi">2</span><span class="p">?</span><span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">?</span><span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">===</span><span class="mi">2</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&gt;-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="o">!==</span>&#x000A;</div><div class='line' id='LC103'><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">===</span><span class="mi">2</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="o">&gt;-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">else</span> <span class="nx">l</span><span class="o">&gt;-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">l</span><span class="p">)}</span><span class="nx">a</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">=</span><span class="nx">b</span><span class="p">}}}});</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">zTree</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">_z</span><span class="p">.</span><span class="nx">tools</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">consts</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">_z</span><span class="p">.</span><span class="nx">view</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">_z</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">$</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">checked</span><span class="p">;</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">!==</span><span class="s2">"undefined"</span><span class="p">?(</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">===</span><span class="s2">"string"</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="s2">"true"</span><span class="p">)),</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=!!</span><span class="nx">b</span><span class="p">):</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">==</span><span class="s2">"string"</span><span class="p">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="s2">"true"</span><span class="p">):</span><span class="o">!!</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]};</span><span class="nx">f</span><span class="p">.</span><span class="nx">exSetting</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">addInitBind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">srcEvent</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onCheck</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC104'><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">])})});</span><span class="nx">f</span><span class="p">.</span><span class="nx">addInitUnBind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">)});</span><span class="nx">f</span><span class="p">.</span><span class="nx">addInitCache</span><span class="p">(</span><span class="kd">function</span><span class="p">(){});</span><span class="nx">f</span><span class="p">.</span><span class="nx">addInitNode</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">checkedOld</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">==</span><span class="s2">"string"</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">nocheck</span><span class="p">,</span><span class="s2">"true"</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">=!!</span><span class="nx">b</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">nocheckInherit</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&amp;&amp;!!</span><span class="nx">d</span><span class="p">.</span><span class="nx">nocheck</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">==</span><span class="s2">"string"</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="p">,</span><span class="s2">"true"</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">=!!</span><span class="nx">b</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkDisabledInherit</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&amp;&amp;!!</span><span class="nx">d</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">halfCheck</span><span class="o">==</span><span class="s2">"string"</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">halfCheck</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">halfCheck</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC105'><span class="s2">"true"</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">halfCheck</span><span class="o">=!!</span><span class="nx">b</span><span class="p">.</span><span class="nx">halfCheck</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">check_Child_State</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">check_Focus</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">getCheckStatus</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nx">getCheckStatus</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkStyle</span><span class="o">==</span><span class="nx">h</span><span class="p">.</span><span class="nx">radio</span><span class="p">.</span><span class="nx">STYLE</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">radioType</span><span class="o">==</span><span class="nx">h</span><span class="p">.</span><span class="nx">radio</span><span class="p">.</span><span class="nx">TYPE_ALL</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">radioCheckedList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)}});</span><span class="nx">f</span><span class="p">.</span><span class="nx">addInitProxy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="s2">""</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="s2">""</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"mouseover"</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="s2">"span"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">"treeNode"</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">)</span><span class="o">!==</span><span class="kc">null</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getNodeMainDom</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">id</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="s2">"mouseoverCheck"</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC106'><span class="s2">"mouseout"</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="s2">"span"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">"treeNode"</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">)</span><span class="o">!==</span><span class="kc">null</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getNodeMainDom</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">id</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="s2">"mouseoutCheck"</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"click"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="s2">"span"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">"treeNode"</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">)</span><span class="o">!==</span><span class="kc">null</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getNodeMainDom</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">id</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="s2">"checkNode"</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getNodeCache</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">g</span><span class="p">){</span><span class="k">case</span> <span class="s2">"checkNode"</span><span class="p">:</span><span class="nx">k</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">"mouseoverCheck"</span><span class="p">:</span><span class="nx">k</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">"mouseoutCheck"</span><span class="p">:</span><span class="nx">k</span><span class="o">=</span><span class="nx">r</span><span class="p">}</span><span class="k">return</span><span class="p">{</span><span class="na">stop</span><span class="p">:</span><span class="nx">g</span><span class="o">===</span><span class="s2">"checkNode"</span><span class="p">,</span><span class="na">node</span><span class="p">:</span><span class="nx">e</span><span class="p">,</span><span class="na">nodeEventType</span><span class="p">:</span><span class="nx">g</span><span class="p">,</span><span class="na">nodeEventCallback</span><span class="p">:</span><span class="nx">k</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC107'><span class="na">treeEventType</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="na">treeEventCallback</span><span class="p">:</span><span class="kc">null</span><span class="p">}},</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">addInitRoot</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">radioCheckedList</span><span class="o">=</span><span class="p">[]});</span><span class="nx">f</span><span class="p">.</span><span class="nx">addBeforeA</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">makeChkFlag</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"&lt;span ID='"</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">tId</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="s2">"' class='"</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">makeChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="s2">"' treeNode"</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">===!</span><span class="mi">0</span><span class="p">?</span><span class="s2">" style='display:none;'"</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="s2">"&gt;&lt;/span&gt;"</span><span class="p">))});</span><span class="nx">f</span><span class="p">.</span><span class="nx">addZTreeTools</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">checkNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">chkDisabled</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">!==!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">!==!</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=!</span><span class="nx">m</span><span class="p">),</span><span class="nx">k</span><span class="o">=!!</span><span class="nx">k</span><span class="p">,(</span><span class="nx">m</span><span class="o">!==</span><span class="nx">b</span><span class="o">||</span><span class="nx">g</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeCheck</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC108'><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">a</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">uCanDo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">nocheck</span><span class="o">!==!</span><span class="mi">0</span><span class="p">))</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChecked</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">),(</span><span class="nx">g</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkStyle</span><span class="o">===</span><span class="nx">h</span><span class="p">.</span><span class="nx">radio</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">checkNodeRelation</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">setChkClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClassWithSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,[</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">a</span><span class="p">])};</span><span class="nx">a</span><span class="p">.</span><span class="nx">checkAllNodes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairAllChk</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="o">!!</span><span class="nx">a</span><span class="p">)};</span><span class="nx">a</span><span class="p">.</span><span class="nx">getCheckedNodes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">!==!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC109'><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">));</span><span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nx">getTreeCheckedNodes</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">a</span><span class="p">.</span><span class="nx">getChangeCheckedNodes</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">));</span><span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nx">getTreeChangeCheckedNodes</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">a</span><span class="p">.</span><span class="nx">setChkDisabled</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">b</span><span class="o">=!!</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">=!!</span><span class="nx">c</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairSonChkDisabled</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!!</span><span class="nx">f</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkDisabled</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">updateNode</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">updateNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kr">arguments</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span>&#x000A;</div><div class='line' id='LC110'><span class="nx">i</span><span class="p">.</span><span class="nx">uCanDo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">CHECK</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">);(</span><span class="nx">f</span><span class="o">==!</span><span class="mi">0</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">chkStyle</span><span class="o">===</span><span class="nx">h</span><span class="p">.</span><span class="nx">radio</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">checkNodeRelation</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">setChkClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClassWithSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">c</span><span class="p">)}}});</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">createNodes</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">createNodes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kr">arguments</span><span class="p">);</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClassWithSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeNode</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">();</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kr">arguments</span><span class="p">);</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClass</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">))};</span>&#x000A;</div><div class='line' id='LC111'><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">appendNodes</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">appendNodes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="s2">""</span><span class="p">;</span><span class="nx">u</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kr">arguments</span><span class="p">));</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">makeChkFlag</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="k">return</span> <span class="nx">m</span><span class="p">}})(</span><span class="nx">jQuery</span><span class="p">);</span>&#x000A;</div><div class='line' id='LC112'>&#x000A;</div><div class='line' id='LC113'><span class="cm">/*</span>&#x000A;</div><div class='line' id='LC114'><span class="cm"> * JQuery zTree exedit v3.5.40</span>&#x000A;</div><div class='line' id='LC115'><span class="cm"> * http://treejs.cn/</span>&#x000A;</div><div class='line' id='LC116'><span class="cm"> *</span>&#x000A;</div><div class='line' id='LC117'><span class="cm"> * Copyright (c) 2010 Hunter.z</span>&#x000A;</div><div class='line' id='LC118'><span class="cm"> *</span>&#x000A;</div><div class='line' id='LC119'><span class="cm"> * Licensed same as jquery - MIT License</span>&#x000A;</div><div class='line' id='LC120'><span class="cm"> * http://www.opensource.org/licenses/mit-license.php</span>&#x000A;</div><div class='line' id='LC121'><span class="cm"> *</span>&#x000A;</div><div class='line' id='LC122'><span class="cm"> * email: hunter.z@263.net</span>&#x000A;</div><div class='line' id='LC123'><span class="cm"> * Date: 2019-01-18</span>&#x000A;</div><div class='line' id='LC124'><span class="cm"> */</span>&#x000A;</div><div class='line' id='LC125'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">B</span><span class="p">){</span><span class="kd">var</span> <span class="nx">I</span><span class="o">=</span><span class="p">{</span><span class="na">event</span><span class="p">:{</span><span class="na">DRAG</span><span class="p">:</span><span class="s2">"ztree_drag"</span><span class="p">,</span><span class="na">DROP</span><span class="p">:</span><span class="s2">"ztree_drop"</span><span class="p">,</span><span class="na">RENAME</span><span class="p">:</span><span class="s2">"ztree_rename"</span><span class="p">,</span><span class="na">DRAGMOVE</span><span class="p">:</span><span class="s2">"ztree_dragmove"</span><span class="p">},</span><span class="na">id</span><span class="p">:{</span><span class="na">EDIT</span><span class="p">:</span><span class="s2">"_edit"</span><span class="p">,</span><span class="na">INPUT</span><span class="p">:</span><span class="s2">"_input"</span><span class="p">,</span><span class="na">REMOVE</span><span class="p">:</span><span class="s2">"_remove"</span><span class="p">},</span><span class="na">move</span><span class="p">:{</span><span class="na">TYPE_INNER</span><span class="p">:</span><span class="s2">"inner"</span><span class="p">,</span><span class="na">TYPE_PREV</span><span class="p">:</span><span class="s2">"prev"</span><span class="p">,</span><span class="na">TYPE_NEXT</span><span class="p">:</span><span class="s2">"next"</span><span class="p">},</span><span class="na">node</span><span class="p">:{</span><span class="na">CURSELECTED_EDIT</span><span class="p">:</span><span class="s2">"curSelectedNode_Edit"</span><span class="p">,</span><span class="na">TMPTARGET_TREE</span><span class="p">:</span><span class="s2">"tmpTargetzTree"</span><span class="p">,</span><span class="na">TMPTARGET_NODE</span><span class="p">:</span><span class="s2">"tmpTargetNode"</span><span class="p">}},</span><span class="nx">v</span><span class="o">=</span><span class="p">{</span><span class="na">onHoverOverNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">curHoverNode</span><span class="o">!=</span><span class="nx">b</span><span class="p">)</span><span class="nx">v</span><span class="p">.</span><span class="nx">onHoverOutNode</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">curHoverNode</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">addHoverDom</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="na">onHoverOutNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC126'><span class="nx">i</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">curHoverNode</span><span class="o">&amp;&amp;!</span><span class="nx">i</span><span class="p">.</span><span class="nx">isSelectedNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">curHoverNode</span><span class="p">))</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeTreeDom</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">curHoverNode</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">curHoverNode</span><span class="o">=</span><span class="kc">null</span><span class="p">},</span><span class="na">onMousedownNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">dragFlag</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">N</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="p">)</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">minMoveSize</span><span class="o">&amp;&amp;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">O</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="p">)</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">minMoveSize</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="nx">L</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">"cursor"</span><span class="p">,</span><span class="s2">"pointer"</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">dragFlag</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeDrag</span><span class="p">,[</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">n</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">dragNodeShowBefore</span><span class="o">=</span><span class="p">[];</span>&#x000A;</div><div class='line' id='LC127'><span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">open</span><span class="p">?(</span><span class="nx">e</span><span class="p">.</span><span class="nx">expandCollapseNode</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="o">!</span><span class="nx">g</span><span class="p">.</span><span class="nx">open</span><span class="p">),</span><span class="nx">m</span><span class="p">.</span><span class="nx">dragNodeShowBefore</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">tId</span><span class="p">]</span><span class="o">=!</span><span class="mi">0</span><span class="p">):</span><span class="nx">m</span><span class="p">.</span><span class="nx">dragNodeShowBefore</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">tId</span><span class="p">]</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="nx">m</span><span class="p">.</span><span class="nx">dragFlag</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">showHoverDom</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">showIfameMask</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">j</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">parentTId</span><span class="p">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getParentNode</span><span class="p">()):</span><span class="nx">i</span><span class="p">.</span><span class="nx">getNodes</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">dragNodeShowBefore</span><span class="p">[</span><span class="nx">o</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">tId</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="o">&gt;-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="o">+</span><span class="mi">1</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="o">=!</span><span class="mi">1</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">o</span><span class="p">[</span><span class="nx">b</span><span class="p">]),</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="p">),</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">break</span><span class="p">}}</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">H</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getPreNode</span><span class="p">(),</span><span class="nx">Q</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">getNextNode</span><span class="p">());</span><span class="nx">C</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="s2">"&lt;ul class='zTreeDragUL'&gt;&lt;/ul&gt;"</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC128'><span class="nx">f</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">g</span><span class="p">.</span><span class="nx">editNameFlag</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">selectNode</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeTreeDom</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">maxShowNodeNum</span><span class="o">-</span><span class="mi">1</span><span class="o">||</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="s2">"&lt;li id='"</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">tId</span><span class="o">+</span><span class="s2">"_tmp'&gt;&lt;/li&gt;"</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">q</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">f</span><span class="p">).</span><span class="nx">clone</span><span class="p">()),</span><span class="nx">j</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">"padding"</span><span class="p">,</span><span class="s2">"0"</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">tId</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">CURSELECTED</span><span class="p">),</span><span class="nx">C</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">j</span><span class="p">),</span><span class="nx">b</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">maxShowNodeNum</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="s2">"&lt;li id='"</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">tId</span><span class="o">+</span><span class="s2">"_moretmp'&gt;&lt;a&gt;  ...  &lt;/a&gt;&lt;/li&gt;"</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">C</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">j</span><span class="p">)));</span><span class="nx">C</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"id"</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">tId</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="o">+</span><span class="s2">"_tmp"</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"class"</span><span class="p">));</span><span class="nx">C</span><span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">L</span><span class="p">);</span><span class="nx">u</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="s2">"&lt;span class='tmpzTreeMove_arrow'&gt;&lt;/span&gt;"</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC129'><span class="nx">f</span><span class="p">);</span><span class="nx">u</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"id"</span><span class="p">,</span><span class="s2">"zTreeMove_arrow_tmp"</span><span class="p">);</span><span class="nx">u</span><span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">L</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">DRAG</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">n</span><span class="p">])}</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">dragFlag</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">u</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"id"</span><span class="p">)</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="o">+</span><span class="nx">G</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">()</span><span class="o">+</span><span class="mi">2</span><span class="o">&gt;</span><span class="nx">B</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">w</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">t</span><span class="p">).</span><span class="nx">offset</span><span class="p">().</span><span class="nx">left</span><span class="p">?(</span><span class="nx">g</span><span class="o">=</span><span class="nx">B</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">w</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">t</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">?</span><span class="nx">g</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">):</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">):</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">TMPTARGET_TREE</span><span class="p">),</span><span class="nx">w</span><span class="o">&amp;&amp;</span><span class="nx">B</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">w</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">t</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">TMPTARGET_NODE</span><span class="o">+</span><span class="s2">"_"</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_PREV</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">TMPTARGET_NODE</span><span class="o">+</span><span class="s2">"_"</span><span class="o">+</span><span class="nx">I</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_NEXT</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">TMPTARGET_NODE</span><span class="o">+</span><span class="s2">"_"</span><span class="o">+</span><span class="nx">I</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">));</span>&#x000A;</div><div class='line' id='LC130'><span class="nx">w</span><span class="o">=</span><span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">J</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getSettings</span><span class="p">();</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">z</span> <span class="k">in</span> <span class="nx">g</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="nx">z</span><span class="p">].</span><span class="nx">treeId</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">[</span><span class="nx">z</span><span class="p">].</span><span class="nx">edit</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">[</span><span class="nx">z</span><span class="p">].</span><span class="nx">treeId</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeId</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span><span class="o">==</span><span class="nx">g</span><span class="p">[</span><span class="nx">z</span><span class="p">].</span><span class="nx">treeId</span><span class="o">||</span><span class="nx">B</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nx">parents</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">g</span><span class="p">[</span><span class="nx">z</span><span class="p">].</span><span class="nx">treeId</span><span class="p">).</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">))</span><span class="nx">J</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">z</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">();</span><span class="nx">j</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">();</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">offset</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">scrollHeight</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">scrollWidth</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="o">+</span><span class="nx">z</span><span class="o">-</span><span class="nx">p</span><span class="p">.</span><span class="nx">top</span><span class="p">;</span><span class="kd">var</span> <span class="nx">E</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">height</span><span class="p">()</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">top</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="o">-</span><span class="nx">z</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="o">+</span><span class="nx">j</span><span class="o">-</span><span class="nx">p</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">width</span><span class="p">()</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">left</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="o">-</span><span class="nx">j</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMax</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMin</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMax</span><span class="o">&amp;&amp;</span>&#x000A;</div><div class='line' id='LC131'><span class="nx">E</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMin</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMax</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMin</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMax</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMin</span><span class="p">,</span><span class="nx">E</span><span class="o">=</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMin</span><span class="o">&amp;&amp;</span><span class="nx">E</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMin</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMin</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">borderMin</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">p</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">()</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">()</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">height</span><span class="p">()</span><span class="o">+</span><span class="mi">10</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="nx">F</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">()</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">,</span><span class="nx">P</span><span class="o">=</span><span class="nx">v</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">()</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">width</span><span class="p">()</span><span class="o">+</span><span class="mi">10</span><span class="o">&gt;=</span><span class="nx">g</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">isChildOrSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">)){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">D</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span><span class="nx">D</span><span class="o">&amp;&amp;</span><span class="nx">D</span><span class="p">.</span><span class="nx">tagName</span><span class="o">&amp;&amp;!</span><span class="nx">k</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">D</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="s2">"li"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">D</span><span class="p">.</span><span class="nx">id</span><span class="o">!=</span>&#x000A;</div><div class='line' id='LC132'><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">;)</span><span class="nx">D</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">;</span><span class="kd">var</span> <span class="nx">R</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">D</span><span class="p">.</span><span class="nx">id</span><span class="o">===</span><span class="nx">g</span><span class="p">.</span><span class="nx">tId</span><span class="p">){</span><span class="nx">R</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">f</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">D</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">R</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">R</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">isChildOrSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">))</span><span class="nx">t</span><span class="o">=</span><span class="nx">B</span><span class="p">(</span><span class="nx">D</span><span class="p">),</span><span class="nx">w</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">E</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">isChildOrSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span><span class="o">==</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="o">||</span><span class="nx">r</span><span class="o">||</span><span class="nx">s</span><span class="o">||</span><span class="nx">M</span><span class="o">||</span><span class="nx">P</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">J</span><span class="o">||!</span><span class="nx">J</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">))</span><span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">;</span><span class="nx">p</span><span class="p">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">()</span><span class="o">-</span><span class="mi">10</span><span class="p">):</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">()</span><span class="o">+</span><span class="mi">10</span><span class="p">);</span><span class="nx">F</span><span class="p">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">()</span><span class="o">-</span><span class="mi">10</span><span class="p">):</span><span class="nx">v</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">()</span><span class="o">+</span>&#x000A;</div><div class='line' id='LC133'><span class="mi">10</span><span class="p">);</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="o">!=</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">offset</span><span class="p">().</span><span class="nx">left</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">offset</span><span class="p">().</span><span class="nx">left</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">()</span><span class="o">+</span><span class="nx">t</span><span class="p">.</span><span class="nx">offset</span><span class="p">().</span><span class="nx">left</span><span class="o">-</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">offset</span><span class="p">().</span><span class="nx">left</span><span class="p">)}</span><span class="nx">C</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="na">top</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="o">+</span><span class="nx">z</span><span class="o">+</span><span class="mi">3</span><span class="o">+</span><span class="s2">"px"</span><span class="p">,</span><span class="na">left</span><span class="p">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="o">+</span><span class="nx">j</span><span class="o">+</span><span class="mi">3</span><span class="o">+</span><span class="s2">"px"</span><span class="p">});</span><span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"id"</span><span class="p">)</span><span class="o">!=</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">){</span><span class="kd">var</span> <span class="nx">A</span><span class="o">=</span><span class="nx">w</span><span class="o">==</span><span class="kc">null</span><span class="p">?</span><span class="kc">null</span><span class="p">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">getNodeCache</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">w</span><span class="p">),</span><span class="nx">p</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">metaKey</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">isMove</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">isCopy</span><span class="o">||!</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">isMove</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">isCopy</span><span class="p">;</span><span class="nx">c</span><span class="o">=!!</span><span class="p">(</span><span class="nx">H</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="o">===</span><span class="nx">H</span><span class="p">.</span><span class="nx">tId</span><span class="p">);</span><span class="nx">F</span><span class="o">=!!</span><span class="p">(</span><span class="nx">Q</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="o">===</span><span class="nx">Q</span><span class="p">.</span><span class="nx">tId</span><span class="p">);</span><span class="nx">o</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">==</span><span class="nx">w</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">p</span><span class="o">||!</span><span class="nx">F</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">prev</span><span class="p">,[</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">A</span><span class="p">],</span>&#x000A;</div><div class='line' id='LC134'><span class="o">!!</span><span class="nx">h</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">prev</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">p</span><span class="o">||!</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">next</span><span class="p">,[</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">A</span><span class="p">],</span><span class="o">!!</span><span class="nx">h</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">next</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="p">(</span><span class="nx">p</span><span class="o">||!</span><span class="nx">o</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">keep</span><span class="p">.</span><span class="nx">leaf</span><span class="o">&amp;&amp;!</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">A</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">inner</span><span class="p">,[</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">A</span><span class="p">],</span><span class="o">!!</span><span class="nx">h</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">inner</span><span class="p">);</span><span class="nx">o</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">w</span><span class="o">=</span><span class="s2">""</span><span class="p">;</span><span class="nx">x</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">;</span><span class="nx">u</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="na">display</span><span class="p">:</span><span class="s2">"none"</span><span class="p">});</span><span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTimer</span><span class="p">)</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTimer</span><span class="p">),</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTargetNodeTId</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="o">&amp;&amp;!</span><span class="nx">p</span><span class="p">)</span><span class="nx">o</span><span class="p">();</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">F</span><span class="o">=</span><span class="nx">B</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">w</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">t</span><span class="p">),</span><span class="nx">v</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">isLastNode</span><span class="p">?</span><span class="kc">null</span><span class="p">:</span><span class="nx">B</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">A</span><span class="p">.</span><span class="nx">getNextNode</span><span class="p">().</span><span class="nx">tId</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="p">()),</span><span class="nx">E</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">offset</span><span class="p">().</span><span class="nx">top</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC135'><span class="nx">F</span><span class="p">.</span><span class="nx">offset</span><span class="p">().</span><span class="nx">left</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">g</span><span class="p">?</span><span class="nx">p</span><span class="p">?</span><span class="mf">0.25</span><span class="p">:</span><span class="nx">c</span><span class="p">?</span><span class="mf">0.5</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="nx">c</span><span class="p">?</span><span class="nx">p</span><span class="p">?</span><span class="mf">0.75</span><span class="p">:</span><span class="nx">g</span><span class="p">?</span><span class="mf">0.5</span><span class="p">:</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="o">+</span><span class="nx">z</span><span class="o">-</span><span class="nx">E</span><span class="p">)</span><span class="o">/</span><span class="nx">F</span><span class="p">.</span><span class="nx">height</span><span class="p">(),(</span><span class="nx">s</span><span class="o">==</span><span class="mi">1</span><span class="o">||</span><span class="nx">z</span><span class="o">&lt;=</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">z</span><span class="o">&gt;=-</span><span class="mf">0.2</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">?(</span><span class="nx">j</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">u</span><span class="p">.</span><span class="nx">width</span><span class="p">(),</span><span class="nx">b</span><span class="o">=</span><span class="nx">E</span><span class="o">-</span><span class="nx">u</span><span class="p">.</span><span class="nx">height</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_PREV</span><span class="p">):(</span><span class="nx">M</span><span class="o">==</span><span class="mi">0</span><span class="o">||</span><span class="nx">z</span><span class="o">&gt;=</span><span class="nx">M</span><span class="o">&amp;&amp;</span><span class="nx">z</span><span class="o">&lt;=</span><span class="mf">1.2</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">?(</span><span class="nx">j</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">u</span><span class="p">.</span><span class="nx">width</span><span class="p">(),</span><span class="nx">b</span><span class="o">=</span><span class="nx">v</span><span class="o">==</span><span class="kc">null</span><span class="o">||</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">A</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">A</span><span class="p">.</span><span class="nx">open</span><span class="p">?</span><span class="nx">E</span><span class="o">+</span><span class="nx">F</span><span class="p">.</span><span class="nx">height</span><span class="p">()</span><span class="o">-</span><span class="nx">u</span><span class="p">.</span><span class="nx">height</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span><span class="p">:</span><span class="nx">v</span><span class="p">.</span><span class="nx">offset</span><span class="p">().</span><span class="nx">top</span><span class="o">-</span><span class="nx">u</span><span class="p">.</span><span class="nx">height</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_NEXT</span><span class="p">):</span><span class="nx">p</span><span class="p">?(</span><span class="nx">j</span><span class="o">=</span><span class="mi">5</span><span class="o">-</span><span class="nx">u</span><span class="p">.</span><span class="nx">width</span><span class="p">(),</span><span class="nx">b</span><span class="o">=</span><span class="nx">E</span><span class="p">,</span><span class="nx">x</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">):</span><span class="nx">o</span><span class="p">(),</span><span class="nx">t</span><span class="p">){</span><span class="nx">u</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="na">display</span><span class="p">:</span><span class="s2">"block"</span><span class="p">,</span><span class="na">top</span><span class="p">:</span><span class="nx">b</span><span class="o">+</span><span class="s2">"px"</span><span class="p">,</span><span class="na">left</span><span class="p">:</span><span class="nx">r</span><span class="o">+</span><span class="nx">j</span><span class="o">+</span><span class="s2">"px"</span><span class="p">});</span><span class="nx">F</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">TMPTARGET_NODE</span><span class="o">+</span><span class="s2">"_"</span><span class="o">+</span><span class="nx">x</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">S</span><span class="o">!=</span><span class="nx">w</span><span class="o">||</span><span class="nx">T</span><span class="o">!=</span><span class="nx">x</span><span class="p">)</span><span class="nx">K</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">A</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC136'><span class="nx">A</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">x</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">z</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTimer</span><span class="o">&amp;&amp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTargetNodeTId</span><span class="o">!==</span><span class="nx">A</span><span class="p">.</span><span class="nx">tId</span><span class="p">?(</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTimer</span><span class="p">),</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTargetNodeTId</span><span class="o">=</span><span class="kc">null</span><span class="p">):</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTimer</span><span class="o">&amp;&amp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTargetNodeTId</span><span class="o">===</span><span class="nx">A</span><span class="p">.</span><span class="nx">tId</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">z</span><span class="o">=!</span><span class="mi">1</span><span class="p">),</span><span class="nx">z</span><span class="p">))</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTimer</span><span class="o">=</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">x</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="o">&amp;&amp;</span><span class="nx">A</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">A</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="nx">A</span><span class="p">.</span><span class="nx">open</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">()</span><span class="o">-</span><span class="nx">K</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">autoOpenTime</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeDragOpen</span><span class="p">,[</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">A</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">switchNode</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">A</span><span class="p">),</span><span class="nx">h</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">autoExpandTrigger</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">EXPAND</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC137'><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">A</span><span class="p">]))},</span><span class="nx">h</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">autoOpenTime</span><span class="o">+</span><span class="mi">50</span><span class="p">),</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTargetNodeTId</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">tId</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">,</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">inner</span><span class="p">,[</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="kc">null</span><span class="p">],</span><span class="o">!!</span><span class="nx">h</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">inner</span><span class="p">)?</span><span class="nx">t</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">TMPTARGET_TREE</span><span class="p">):</span><span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="na">display</span><span class="p">:</span><span class="s2">"none"</span><span class="p">}),</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTimer</span><span class="p">)</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTimer</span><span class="p">),</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTargetNodeTId</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">S</span><span class="o">=</span><span class="nx">w</span><span class="p">;</span><span class="nx">T</span><span class="o">=</span><span class="nx">x</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">DRAGMOVE</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">n</span><span class="p">])}</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTimer</span><span class="p">)</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTimer</span><span class="p">),</span><span class="nb">window</span><span class="p">.</span><span class="nx">zTreeMoveTargetNodeTId</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC138'><span class="kc">null</span><span class="p">;</span><span class="nx">T</span><span class="o">=</span><span class="nx">S</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">"mousemove"</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">"mouseup"</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">"selectstart"</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">L</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">"cursor"</span><span class="p">,</span><span class="s2">""</span><span class="p">);</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">TMPTARGET_TREE</span><span class="p">),</span><span class="nx">w</span><span class="o">&amp;&amp;</span><span class="nx">B</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">w</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">t</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">TMPTARGET_NODE</span><span class="o">+</span><span class="s2">"_"</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_PREV</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">TMPTARGET_NODE</span><span class="o">+</span><span class="s2">"_"</span><span class="o">+</span><span class="nx">I</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_NEXT</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">TMPTARGET_NODE</span><span class="o">+</span><span class="s2">"_"</span><span class="o">+</span><span class="nx">I</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">));</span><span class="nx">k</span><span class="p">.</span><span class="nx">showIfameMask</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">showHoverDom</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">dragFlag</span><span class="o">!=</span><span class="mi">0</span><span class="p">){</span><span class="nx">m</span><span class="p">.</span><span class="nx">dragFlag</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">o</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">o</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">.</span><span class="nx">dragNodeShowBefore</span><span class="p">[</span><span class="nx">o</span><span class="p">.</span><span class="nx">tId</span><span class="p">]</span><span class="o">&amp;&amp;</span>&#x000A;</div><div class='line' id='LC139'><span class="o">!</span><span class="nx">o</span><span class="p">.</span><span class="nx">open</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">expandCollapseNode</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="o">!</span><span class="nx">o</span><span class="p">.</span><span class="nx">open</span><span class="p">),</span><span class="k">delete</span> <span class="nx">m</span><span class="p">.</span><span class="nx">dragNodeShowBefore</span><span class="p">[</span><span class="nx">o</span><span class="p">.</span><span class="nx">tId</span><span class="p">]);</span><span class="nx">C</span><span class="o">&amp;&amp;</span><span class="nx">C</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span><span class="nx">u</span><span class="o">&amp;&amp;</span><span class="nx">u</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">metaKey</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">isMove</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">isCopy</span><span class="o">||!</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">isMove</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">isCopy</span><span class="p">;</span><span class="o">!</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">parentTId</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="o">==</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">parentTId</span><span class="o">&amp;&amp;</span><span class="nx">x</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">w</span><span class="o">==</span><span class="kc">null</span><span class="p">?</span><span class="kc">null</span><span class="p">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">getNodeCache</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">w</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeDrop</span><span class="p">,[</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">x</span><span class="p">,</span><span class="nx">r</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">selectNodes</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">n</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">r</span><span class="p">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">n</span><span class="p">):</span><span class="nx">n</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">J</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeNode</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC140'><span class="nx">n</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="nx">x</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">addNodes</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">s</span><span class="p">):</span><span class="nx">e</span><span class="p">.</span><span class="nx">addNodes</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span><span class="nx">x</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_PREV</span><span class="p">?</span><span class="nx">p</span><span class="p">.</span><span class="nx">getIndex</span><span class="p">():</span><span class="nx">p</span><span class="p">.</span><span class="nx">getIndex</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">s</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">x</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">addNodes</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">addNodes</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span><span class="nx">x</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_PREV</span><span class="p">?</span><span class="nx">p</span><span class="p">.</span><span class="nx">getIndex</span><span class="p">():</span><span class="nx">p</span><span class="p">.</span><span class="nx">getIndex</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_NEXT</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">moveNode</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">s</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">x</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">--</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">moveNode</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">s</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">x</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">selectNodes</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">DROP</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC141'><span class="p">[</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">x</span><span class="p">,</span><span class="nx">r</span><span class="p">])};</span><span class="nx">x</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">canAsync</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">p</span><span class="p">)?</span><span class="nx">e</span><span class="p">.</span><span class="nx">asyncNode</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">):</span><span class="nx">b</span><span class="p">()}}</span><span class="k">else</span> <span class="nx">e</span><span class="p">.</span><span class="nx">selectNodes</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">n</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">DROP</span><span class="p">,[</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">])}}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(){</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="kd">var</span> <span class="nx">o</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">y</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoots</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">button</span><span class="o">==</span><span class="mi">2</span><span class="o">||!</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">enable</span><span class="o">||!</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">isCopy</span><span class="o">&amp;&amp;!</span><span class="nx">f</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">drag</span><span class="p">.</span><span class="nx">isMove</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">f</span><span class="p">).</span><span class="nx">curSelectedList</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">isSelectedNode</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">o</span><span class="p">].</span><span class="nx">editNameFlag</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="s2">"input"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">"treeNode"</span><span class="o">+</span>&#x000A;</div><div class='line' id='LC142'><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">INPUT</span><span class="p">)</span><span class="o">!==</span><span class="kc">null</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">o</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">parentTId</span><span class="o">!==</span><span class="nx">s</span><span class="p">[</span><span class="nx">o</span><span class="p">].</span><span class="nx">parentTId</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">break</span><span class="p">}}</span><span class="k">else</span> <span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">editNodeBlur</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">cancelCurEditNode</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="kd">var</span> <span class="nx">G</span><span class="o">=</span><span class="nx">B</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">ownerDocument</span><span class="p">),</span><span class="nx">L</span><span class="o">=</span><span class="nx">B</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">ownerDocument</span><span class="p">.</span><span class="nx">body</span><span class="p">),</span><span class="nx">C</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">J</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">Q</span><span class="p">,</span><span class="nx">S</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">T</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">x</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">,</span><span class="nx">N</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="p">,</span><span class="nx">O</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">uCanDo</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">G</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"mousemove"</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"mouseup"</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"selectstart"</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}};</span><span class="nx">B</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">zTree</span><span class="p">.</span><span class="nx">consts</span><span class="p">,</span><span class="nx">I</span><span class="p">);</span><span class="nx">B</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">zTree</span><span class="p">.</span><span class="nx">_z</span><span class="p">,{</span><span class="na">tools</span><span class="p">:{</span><span class="na">getAbs</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC143'><span class="nx">a</span><span class="p">.</span><span class="nx">getBoundingClientRect</span><span class="p">();</span><span class="k">return</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">left</span><span class="o">+</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="o">+</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">top</span><span class="o">+</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">scrollTop</span><span class="o">+</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">)]},</span><span class="na">inputFocus</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">focus</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">setCursorPosition</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">val</span><span class="p">().</span><span class="nx">length</span><span class="p">))},</span><span class="na">inputSelect</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">focus</span><span class="p">(),</span><span class="nx">a</span><span class="p">.</span><span class="nx">select</span><span class="p">())},</span><span class="na">setCursorPosition</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">setSelectionRange</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">focus</span><span class="p">(),</span><span class="nx">a</span><span class="p">.</span><span class="nx">setSelectionRange</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">createTextRange</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">createTextRange</span><span class="p">();</span><span class="nx">c</span><span class="p">.</span><span class="nx">collapse</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">moveEnd</span><span class="p">(</span><span class="s2">"character"</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC144'><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">moveStart</span><span class="p">(</span><span class="s2">"character"</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">select</span><span class="p">()}},</span><span class="na">showIfameMask</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">dragMaskList</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;)</span><span class="nx">c</span><span class="p">.</span><span class="nx">dragMaskList</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">remove</span><span class="p">(),</span><span class="nx">c</span><span class="p">.</span><span class="nx">dragMaskList</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="s2">"iframe"</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getAbs</span><span class="p">(</span><span class="nx">j</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="s2">"&lt;div id='zTreeMask_"</span><span class="o">+</span><span class="nx">g</span><span class="o">+</span><span class="s2">"' class='zTreeMask' style='top:"</span><span class="o">+</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="s2">"px; left:"</span><span class="o">+</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="s2">"px; width:"</span><span class="o">+</span><span class="nx">j</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="o">+</span><span class="s2">"px; height:"</span><span class="o">+</span><span class="nx">j</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="o">+</span><span class="s2">"px;'&gt;&lt;/div&gt;"</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"body"</span><span class="p">,</span><span class="nx">a</span><span class="p">));</span><span class="nx">c</span><span class="p">.</span><span class="nx">dragMaskList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)}}},</span><span class="na">view</span><span class="p">:{</span><span class="na">addEditBtn</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">editNameFlag</span><span class="o">||</span>&#x000A;</div><div class='line' id='LC145'><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">EDIT</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">showRenameBtn</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">showRenameBtn</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="s2">"&lt;span class='"</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">BUTTON</span><span class="o">+</span><span class="s2">" edit' id='"</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">EDIT</span><span class="o">+</span><span class="s2">"' title='"</span><span class="o">+</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">renameTitle</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">renameTitle</span><span class="p">)</span><span class="o">+</span><span class="s2">"' treeNode"</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">EDIT</span><span class="o">+</span><span class="s2">" style='display:none;'&gt;&lt;/span&gt;"</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">EDIT</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"click"</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">k</span><span class="p">.</span><span class="nx">uCanDo</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">||</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeEditName</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">editNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}).</span><span class="nx">show</span><span class="p">()}},</span><span class="na">addRemoveBtn</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC146'><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">editNameFlag</span><span class="o">||</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">REMOVE</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">showRemoveBtn</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">showRemoveBtn</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="s2">"&lt;span class='"</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">BUTTON</span><span class="o">+</span><span class="s2">" remove' id='"</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">REMOVE</span><span class="o">+</span><span class="s2">"' title='"</span><span class="o">+</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">removeTitle</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">removeTitle</span><span class="p">)</span><span class="o">+</span><span class="s2">"' treeNode"</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">REMOVE</span><span class="o">+</span><span class="s2">" style='display:none;'&gt;&lt;/span&gt;"</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">REMOVE</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"click"</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">k</span><span class="p">.</span><span class="nx">uCanDo</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">||</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeRemove</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">==!</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">REMOVE</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC147'><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">]);</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"mousedown"</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}).</span><span class="nx">show</span><span class="p">()}},</span><span class="na">addHoverDom</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoots</span><span class="p">().</span><span class="nx">showHoverDom</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">isHover</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">addEditBtn</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">addRemoveBtn</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)),</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">addHoverDom</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">])},</span><span class="na">cancelCurEditNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">curEditNode</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">curEditInput</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">?</span><span class="nx">b</span><span class="p">:</span><span class="nx">c</span><span class="p">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">):</span><span class="nx">o</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">beforeRename</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">===!</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">q</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">CURSELECTED_EDIT</span><span class="p">);</span>&#x000A;</div><div class='line' id='LC148'><span class="nx">o</span><span class="p">.</span><span class="nx">unbind</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">setNodeName</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">editNameFlag</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">curEditNode</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">curEditInput</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">selectNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">RENAME</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">])}</span><span class="k">return</span> <span class="nx">l</span><span class="p">.</span><span class="nx">noSelection</span><span class="o">=!</span><span class="mi">0</span><span class="p">},</span><span class="na">editNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">editNodeBlur</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">isSelectedNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">curEditNode</span><span class="o">==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">editNameFlag</span><span class="p">)</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">k</span><span class="p">.</span><span class="nx">inputFocus</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">curEditInput</span><span class="p">)},</span><span class="mi">0</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="nx">b</span><span class="p">.</span><span class="nx">editNameFlag</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeTreeDom</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">cancelCurEditNode</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">selectNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SPAN</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">"&lt;input type=text class='rename' id='"</span><span class="o">+</span>&#x000A;</div><div class='line' id='LC149'><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">INPUT</span><span class="o">+</span><span class="s2">"' treeNode"</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">INPUT</span><span class="o">+</span><span class="s2">" &gt;"</span><span class="p">);</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">INPUT</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">"value"</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">editNameSelectAll</span><span class="p">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">inputSelect</span><span class="p">(</span><span class="nx">l</span><span class="p">):</span><span class="nx">k</span><span class="p">.</span><span class="nx">inputFocus</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"blur"</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">e</span><span class="p">.</span><span class="nx">editNodeBlur</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">cancelCurEditNode</span><span class="p">(</span><span class="nx">a</span><span class="p">)}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"keydown"</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">keyCode</span><span class="o">==</span><span class="s2">"13"</span><span class="p">?(</span><span class="nx">e</span><span class="p">.</span><span class="nx">editNodeBlur</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">cancelCurEditNode</span><span class="p">(</span><span class="nx">a</span><span class="p">)):</span><span class="nx">b</span><span class="p">.</span><span class="nx">keyCode</span><span class="o">==</span><span class="s2">"27"</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">cancelCurEditNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"click"</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">"dblclick"</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">});</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">CURSELECTED_EDIT</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">curEditInput</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span>&#x000A;</div><div class='line' id='LC150'><span class="nx">c</span><span class="p">.</span><span class="nx">noSelection</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">curEditNode</span><span class="o">=</span><span class="nx">b</span><span class="p">}},</span><span class="na">moveNode</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">!=</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">keep</span><span class="p">.</span><span class="nx">leaf</span><span class="o">||!</span><span class="nx">b</span><span class="o">||</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="nx">l</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">():</span><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="o">===</span><span class="kc">null</span><span class="o">||</span><span class="nx">b</span><span class="o">==</span><span class="nx">j</span><span class="p">;</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">===</span><span class="kc">null</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">():</span><span class="nx">j</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_PREV</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_NEXT</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">))</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="o">=!!</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">setNodeLineIcos</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC151'><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="p">}</span><span class="kd">var</span> <span class="nx">y</span><span class="p">;</span><span class="nx">m</span><span class="p">?</span><span class="nx">y</span><span class="o">=</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">:(</span><span class="o">!</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">expandCollapseNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">):</span><span class="nx">k</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">expandCollapseNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">y</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">m</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="nx">y</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">y</span><span class="o">=</span><span class="p">[],</span><span class="nx">e</span><span class="p">.</span><span class="nx">makeUlHtml</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="s2">""</span><span class="p">),</span><span class="nx">m</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">))),</span><span class="nx">y</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">));</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)?</span><span class="nx">m</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">||</span><span class="nx">r</span><span class="p">.</span><span class="nx">remove</span><span class="p">():</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">appendNodes</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">level</span><span class="p">,[</span><span class="nx">c</span><span class="p">],</span><span class="kc">null</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">?</span><span class="nx">y</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">r</span><span class="p">):</span><span class="nx">m</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_PREV</span><span class="p">?</span><span class="nx">m</span><span class="p">.</span><span class="nx">before</span><span class="p">(</span><span class="nx">r</span><span class="p">):</span><span class="nx">m</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_NEXT</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">.</span><span class="nx">after</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="kd">var</span> <span class="nx">s</span><span class="p">;</span><span class="nx">y</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC152'><span class="nx">m</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">level</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">C</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">),</span><span class="nx">u</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span><span class="nx">n</span><span class="o">=</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">n</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="o">=!</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">isLastNode</span><span class="p">)</span><span class="nx">y</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">v</span><span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">n</span><span class="p">.</span><span class="nx">isLastNode</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">tId</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">tId</span><span class="p">){</span><span class="nx">y</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="nx">y</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">v</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">C</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">tId</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">j</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">){</span><span class="nx">u</span><span class="o">||</span><span class="p">(</span><span class="nx">u</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,[]));</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">m</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">u</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">m</span><span class="p">.</span><span class="nx">isLastNode</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">u</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">isLastNode</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC153'><span class="nx">u</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span> <span class="nx">b</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_PREV</span><span class="p">?(</span><span class="nx">C</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">isLastNode</span><span class="o">=!</span><span class="mi">1</span><span class="p">):</span><span class="nx">b</span><span class="p">.</span><span class="nx">isLastNode</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_NEXT</span><span class="p">?(</span><span class="nx">C</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">isLastNode</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">isLastNode</span><span class="o">=!</span><span class="mi">0</span><span class="p">):(</span><span class="nx">l</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_PREV</span><span class="p">?</span><span class="nx">C</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">):</span><span class="nx">C</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentTId</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">isFirstNode</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">isLastNode</span><span class="o">=!</span><span class="mi">1</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">fixPIdKeyValue</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">setSonNodeLevel</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span><span class="nx">c</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">setNodeLineIcos</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairNodeLevelClass</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC154'><span class="nx">c</span><span class="p">,</span><span class="nx">B</span><span class="p">);</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">keep</span><span class="p">.</span><span class="nx">parent</span><span class="o">&amp;&amp;</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">?(</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">open</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">SWITCH</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">ICON</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">replaceSwitchClass</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">DOCU</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">replaceIcoClass</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">folder</span><span class="p">.</span><span class="nx">DOCU</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">"display"</span><span class="p">,</span><span class="s2">"none"</span><span class="p">)):</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">setNodeLineIcos</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">n</span><span class="p">);</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">setNodeLineIcos</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">m</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">check</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">check</span><span class="p">.</span><span class="nx">enable</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairChkClass</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairChkClass</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClassWithSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">f</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">parent</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClassWithSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">));</span><span class="nx">k</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">expandCollapseParentNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">)}},</span><span class="na">removeEditBtn</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC155'><span class="nx">b</span><span class="p">){</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">EDIT</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">unbind</span><span class="p">().</span><span class="nx">remove</span><span class="p">()},</span><span class="na">removeRemoveBtn</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">REMOVE</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">unbind</span><span class="p">().</span><span class="nx">remove</span><span class="p">()},</span><span class="na">removeTreeDom</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">isHover</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeEditBtn</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeRemoveBtn</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">removeHoverDom</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeId</span><span class="p">,</span><span class="nx">b</span><span class="p">])},</span><span class="na">repairNodeLevelClass</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">level</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">LEVEL</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">LEVEL</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">level</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">b</span><span class="p">)}},</span><span class="na">selectNodes</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC156'><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">selectNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">c</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)}},</span><span class="na">event</span><span class="p">:{},</span><span class="na">data</span><span class="p">:{</span><span class="na">setSonNodeLevel</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">level</span><span class="o">=</span><span class="nx">b</span><span class="p">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">level</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">setSonNodeLevel</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">])}}}});</span><span class="kd">var</span> <span class="nx">H</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">zTree</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">_z</span><span class="p">.</span><span class="nx">tools</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">consts</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">_z</span><span class="p">.</span><span class="nx">view</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">_z</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">$</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">exSetting</span><span class="p">({</span><span class="na">edit</span><span class="p">:{</span><span class="na">enable</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">editNameSelectAll</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">showRemoveBtn</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">showRenameBtn</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">removeTitle</span><span class="p">:</span><span class="s2">"remove"</span><span class="p">,</span><span class="na">renameTitle</span><span class="p">:</span><span class="s2">"rename"</span><span class="p">,</span><span class="na">drag</span><span class="p">:{</span><span class="na">autoExpandTrigger</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">isCopy</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">isMove</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">prev</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">next</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="na">inner</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC157'><span class="na">minMoveSize</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="na">borderMax</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span><span class="na">borderMin</span><span class="p">:</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="na">maxShowNodeNum</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="na">autoOpenTime</span><span class="p">:</span><span class="mi">500</span><span class="p">}},</span><span class="na">view</span><span class="p">:{</span><span class="na">addHoverDom</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">removeHoverDom</span><span class="p">:</span><span class="kc">null</span><span class="p">},</span><span class="na">callback</span><span class="p">:{</span><span class="na">beforeDrag</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeDragOpen</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeDrop</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeEditName</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">beforeRename</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onDrag</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onDragMove</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onDrop</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="na">onRename</span><span class="p">:</span><span class="kc">null</span><span class="p">}});</span><span class="nx">i</span><span class="p">.</span><span class="nx">addInitBind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">event</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">RENAME</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onRename</span><span class="p">,[</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">])});</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">DRAG</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onDrag</span><span class="p">,[</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">])});</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">DRAGMOVE</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC158'><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onDragMove</span><span class="p">,[</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">])});</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">DROP</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">q</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">onDrop</span><span class="p">,[</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">q</span><span class="p">])})});</span><span class="nx">i</span><span class="p">.</span><span class="nx">addInitUnBind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">treeObj</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">event</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">RENAME</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DRAG</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DRAGMOVE</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DROP</span><span class="p">)});</span><span class="nx">i</span><span class="p">.</span><span class="nx">addInitCache</span><span class="p">(</span><span class="kd">function</span><span class="p">(){});</span><span class="nx">i</span><span class="p">.</span><span class="nx">addInitNode</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">isHover</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">editNameFlag</span><span class="o">=!</span><span class="mi">1</span><span class="p">});</span><span class="nx">i</span><span class="p">.</span><span class="nx">addInitProxy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">treeId</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">relatedTarget</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="s2">""</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="s2">""</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"mouseover"</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC159'><span class="nx">k</span><span class="p">.</span><span class="nx">getMDom</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,[{</span><span class="na">tagName</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="na">attrName</span><span class="p">:</span><span class="s2">"treeNode"</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">}]))</span><span class="nx">g</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getNodeMainDom</span><span class="p">(</span><span class="nx">m</span><span class="p">).</span><span class="nx">id</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="s2">"hoverOverNode"</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"mouseout"</span><span class="p">))</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getMDom</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,[{</span><span class="na">tagName</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="na">attrName</span><span class="p">:</span><span class="s2">"treeNode"</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">}]),</span><span class="nx">m</span><span class="o">||</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="s2">"remove"</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="s2">"hoverOutNode"</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"mousedown"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getMDom</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,[{</span><span class="na">tagName</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="na">attrName</span><span class="p">:</span><span class="s2">"treeNode"</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">A</span><span class="p">}])))</span><span class="nx">g</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getNodeMainDom</span><span class="p">(</span><span class="nx">m</span><span class="p">).</span><span class="nx">id</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="s2">"mousedownNode"</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getNodeCache</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">j</span><span class="p">){</span><span class="k">case</span> <span class="s2">"mousedownNode"</span><span class="p">:</span><span class="nx">f</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">onMousedownNode</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">"hoverOverNode"</span><span class="p">:</span><span class="nx">f</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">onHoverOverNode</span><span class="p">;</span>&#x000A;</div><div class='line' id='LC160'><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">"hoverOutNode"</span><span class="p">:</span><span class="nx">f</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">onHoverOutNode</span><span class="p">}</span><span class="k">return</span><span class="p">{</span><span class="na">stop</span><span class="p">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="na">node</span><span class="p">:</span><span class="nx">o</span><span class="p">,</span><span class="na">nodeEventType</span><span class="p">:</span><span class="nx">j</span><span class="p">,</span><span class="na">nodeEventCallback</span><span class="p">:</span><span class="nx">f</span><span class="p">,</span><span class="na">treeEventType</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="na">treeEventCallback</span><span class="p">:</span><span class="kc">null</span><span class="p">}});</span><span class="nx">i</span><span class="p">.</span><span class="nx">addInitRoot</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoots</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">curEditNode</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">curEditInput</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">curHoverNode</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">dragFlag</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">dragNodeShowBefore</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="p">.</span><span class="nx">dragMaskList</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="p">.</span><span class="nx">showHoverDom</span><span class="o">=!</span><span class="mi">0</span><span class="p">});</span><span class="nx">i</span><span class="p">.</span><span class="nx">addZTreeTools</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">cancelEditName</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">).</span><span class="nx">curEditNode</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">cancelCurEditNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">a</span><span class="p">?</span><span class="nx">a</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)};</span><span class="nx">b</span><span class="p">.</span><span class="nx">copyNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC161'><span class="nx">l</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">o</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;!</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">keep</span><span class="p">.</span><span class="nx">leaf</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">===</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">;</span><span class="nx">g</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">?(</span><span class="nx">l</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">e</span><span class="p">.</span><span class="nx">addNodes</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,[</span><span class="nx">m</span><span class="p">],</span><span class="nx">o</span><span class="p">)},</span><span class="nx">k</span><span class="p">.</span><span class="nx">canAsync</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">b</span><span class="p">)?</span><span class="nx">e</span><span class="p">.</span><span class="nx">asyncNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">l</span><span class="p">):</span><span class="nx">l</span><span class="p">()):(</span><span class="nx">e</span><span class="p">.</span><span class="nx">addNodes</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,[</span><span class="nx">m</span><span class="p">],</span><span class="nx">o</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">moveNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">o</span><span class="p">));</span><span class="k">return</span> <span class="nx">m</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">editName</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">tId</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">===</span><span class="nx">i</span><span class="p">.</span><span class="nx">getNodeCache</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">tId</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">expandCollapseParentNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span>&#x000A;</div><div class='line' id='LC162'><span class="nx">a</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(),</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">editNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">a</span><span class="p">))};</span><span class="nx">b</span><span class="p">.</span><span class="nx">moveNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">o</span><span class="p">){</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(){</span><span class="nx">e</span><span class="p">.</span><span class="nx">moveNode</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">o</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">)</span><span class="k">return</span> <span class="nx">l</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">nodeIsParent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;!</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">keep</span><span class="p">.</span><span class="nx">leaf</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">===</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">parentTId</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="o">||</span><span class="nx">q</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">"#"</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">tId</span><span class="p">).</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">))</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">else</span> <span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="kc">null</span><span class="p">);</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">canAsync</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">===</span><span class="nx">d</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">TYPE_INNER</span><span class="p">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">asyncNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">j</span><span class="p">):</span><span class="nx">j</span><span class="p">();</span><span class="k">return</span> <span class="nx">l</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">setEditable</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">setting</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">enable</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC163'><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">refresh</span><span class="p">()}});</span><span class="kd">var</span> <span class="nx">N</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">cancelPreSelectedNode</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">cancelPreSelectedNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">curSelectedList</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="o">||</span><span class="nx">b</span><span class="o">===</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">])</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeTreeDom</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]),</span><span class="nx">b</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">N</span><span class="o">&amp;&amp;</span><span class="nx">N</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">O</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">createNodes</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">createNodes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">O</span><span class="o">&amp;&amp;</span><span class="nx">O</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kr">arguments</span><span class="p">);</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClassWithSelf</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">repairParentChkClassWithSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">V</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">makeNodeUrl</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">makeNodeUrl</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">edit</span><span class="p">.</span><span class="nx">enable</span><span class="p">?</span><span class="kc">null</span><span class="p">:</span><span class="nx">V</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">K</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeNode</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeNode</span><span class="o">=</span>&#x000A;</div><div class='line' id='LC164'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">curEditNode</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">curEditNode</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">K</span><span class="o">&amp;&amp;</span><span class="nx">K</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kr">arguments</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">P</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">selectNode</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">selectNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">isSelectedNode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">curEditNode</span><span class="o">==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">editNameFlag</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">P</span><span class="o">&amp;&amp;</span><span class="nx">P</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kr">arguments</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">addHoverDom</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="kd">var</span> <span class="nx">U</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">uCanDo</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">uCanDo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getRoot</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"mouseover"</span><span class="p">)</span><span class="o">||</span><span class="nx">k</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"mouseout"</span><span class="p">)</span><span class="o">||</span><span class="nx">k</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"mousedown"</span><span class="p">)</span><span class="o">||</span><span class="nx">k</span><span class="p">.</span><span class="nx">eqs</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="s2">"mouseup"</span><span class="p">)))</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">curEditNode</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">editNodeBlur</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">curEditInput</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>&#x000A;</div><div class='line' id='LC165'><span class="k">return</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">curEditNode</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">U</span><span class="p">?</span><span class="nx">U</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kr">arguments</span><span class="p">):</span><span class="o">!</span><span class="mi">0</span><span class="p">)}})(</span><span class="nx">jQuery</span><span class="p">);</span>&#x000A;</div><div class='line' id='LC166'>&#x000A;</div></pre></div></div>
</div>
<script>
  toMathMlCode('','markdown-body');
</script>

</div>
</div>
<div class='tree_progress'></div>
<div class='ui small modal' id='modal-linejump'>
<div class='ui custom form content'>
<div class='field'>
<div class='ui right action input'>
<input placeholder='跳转至某一行...' type='number'>
<div class='ui orange button'>
跳转
</div>
</div>
</div>
</div>
</div>

<div class='row column inner-comment' id='blob-comment'>
<input id="comment_path" name="comment_path" type="hidden" value="js/jquery.ztree.all.min.js" />
<div class='tree-comments'>
<h3 id='tree_comm_title'>
评论
(
<span class='comments-count'>
0
</span>
)
</h3>
<div class='ui threaded comments middle aligned' id='notes-list'></div>
<input id="ajax_add_note_id" name="ajax_add_note_id" type="hidden" />
<div class='text-center'>
<div class='tip-loading' style='display: none'>
<div class='ui active mini inline loader'></div>
正在加载...
</div>
</div>
</div>
<script>
  "use strict";
  $(function(){
    var page = 1
    var commentsCount = 0
    var $container = $('.tree-comments')
    var $comments = $container.find('.ui.comments')
    var $tipLoading = $container.find('.tip-loading')
    var $btnLoad = $container.find('.btn-load-more')
    var noteAnchor = new Gitee.NoteAnchor({ defaultAnchor: '#tree_comm_title' })
  
    if (commentsCount < 1) {
      return;
    }
  
    var path;
    if ($('#comment_path').val() === '') {
      path = '/';
    } else {
      path = $('#comment_path').val();
    }
  
    function loadComments () {
      $btnLoad.hide();
      $tipLoading.show();
      $.ajax({
        url: '/zTree/zTree_v3/comment_list',
        data: {
          page: page,
          path: path
        },
        success: function(data) {
          var err;
          try {
            $tipLoading.hide();
            $btnLoad.show();
            if (data.status !== 0) {
              $btnLoad.text('无更多评论')
              return $btnLoad.prop('disabled', true).addClass('disabled');
            } else {
              TreeComment.CommentListHandler(data);
              page += 1;
              if (data.comments_count < 10) {
                $('#ajax_add_note_id').val('');
                $btnLoad.text('无更多评论')
                $btnLoad.prop('disabled', true).addClass('disabled');
              }
              // osctree can not load script
              $comments.find('.timeago').timeago();
              $comments.find('.commenter-role-label').popup();
              noteAnchor.locate();
              toMathMlCode('', 'comments');
              return $('.markdown-body pre code').each(function(i, block) {
                return hljs.highlightBlock(block);
              });
            }
          } catch (error) {
            err = error;
            return console.log('loadComments error:' + err);
          }
        }
      });
    };
  
  
    function checkLoad () {
      var listTop, top;
      top = $(window).scrollTop();
      listTop = $container.offset().top;
      if (listTop >= top && listTop < top + $(window).height()) {
        $(window).off('scroll', checkLoad);
        return loadComments();
      }
    };
  
    $btnLoad.on('click', loadComments);
    loadComments()
  })
</script>

</div>
<div class='inner-comment-box' id='comment-box'>
<p>
你可以在<a href="/login">登录</a>后，发表评论
</p>

</div>

<script>
  "use strict";
  $('#checked_comments_with_star').checkbox('set unchecked')
</script>

</div>
</div>
</div>
<script>
  (function() {
    $(function() {
      Tree.init();
      return TreeCommentActions.init();
    });
  
  }).call(this);
</script>

</div>
</div>
<script>
  (function() {
    var donateModal;
  
    Gitee.modalHelper = new GiteeModalHelper({
      alertText: '提示',
      okText: '确定'
    });
  
    donateModal = new ProjectDonateModal({
      el: '#project-donate-modal',
      alipayUrl: '/zTree/zTree_v3/alipay',
      wepayUrl: '/zTree/zTree_v3/wepay',
      nameIsBlank: '名称不能为空',
      nameTooLong: '名称过长（最多为 36 个字符）',
      modalHelper: Gitee.modalHelper
    });
  
    if ("" === 'true') {
      donateModal.show();
    }
  
    $('#project-donate').on('click', function() {
      return donateModal.show();
    });
  
  }).call(this);
</script>
<script>
  Tree.initHighlightTheme('white')
</script>

<script>
  $(function() {
    GitLab.GfmAutoComplete.dataSource = "/zTree/zTree_v3/autocomplete_sources"
    GitLab.GfmAutoComplete.Emoji.assetBase = '/assets/emoji'
    GitLab.GfmAutoComplete.setup();
  });
</script>

<footer id='git-footer-main'>
<div class='ui container'>
<div class='ui two column grid'>
<div class='column'>
<p><a href="https://gitee.com/" target="_blank">© Gitee.com  </a></p>
<div class='ui three column grid' id='footer-left'>
<div class='column'>
<div class='ui link list'>
<div class='item'>
<a href="/about_us" class="item">关于我们</a>
</div>
<div class='item'>
<a href="/terms" class="item">使用条款</a>
</div>
<div class='item'>
<a href="/oschina/git-osc/issues" class="item">意见建议</a>
</div>
<div class='item'>
<a href="/links.html" class="item">合作伙伴</a>
</div>
</div>
</div>
<div class='column'>
<div class='ui link list'>
<div class='item'>
<a href="/api/v5/swagger" class="item">OpenAPI</a>
</div>
<div class='item'>
<a href="/all-about-git" class="item">Git 大全</a>
</div>
<div class='item'>
<a href="https://copycat.gitee.com/" class="item">代码克隆检测</a>
</div>
<div class='item'>
<a href="/appclient" class="item">APP与插件下载</a>
</div>
</div>
</div>
<div class='column'>
<div class='ui link list'>
<div class='item'>
<a href="https://gitee.com/help" class="item">帮助文档</a>
</div>
<div class='item'>
<a href="https://gitee.com/git-osc/" class="item">更新日志</a>
</div>
<div class='item'>
<a href="/gists" class="item">代码片段</a>
</div>
<div class='item'>
<a href="/gitee-stars" class="item">码云封面人物</a>
</div>
</div>
</div>
</div>
</div>
<div class='column right aligned followus'>
<div class='qrcode weixin'>
<img alt="Qrcode-weixin" src="/assets/qrcode-weixin-8ab7378f5545710bdb3ad5c9d17fedfe.jpg" />
<p class='weixin-text'>微信服务号</p>
</div>
<div class='phone-and-qq column'>
<div class='ui list official-support-container'>
<div class='item'>
<a href="//shang.qq.com/wpa/qunwpa?idkey=0d6c2fc0b5b71ac33405dd575bb490bf1a50e3c9a9f694e8a689cb59ee7dacc3" class="icon-popup" title="点击加入码云官方群"><i class='iconfont icon-logo-qq'></i>
<span>
官方技术支持QQ群：515965326
</span>
</a></div>
<div class='item mail-and-zhihu'>
<a href="mailto: git@oschina.cn"><i class='iconfont icon-ic-mail'></i>
<span id='git-footer-email'>
git#oschina.cn
</span>
</a><a href="https://www.zhihu.com/org/ma-yun-osc/ " target="_blank"><i class='iconfont icon-zhihu'></i>
<span>
码云Gitee
</span>
</a></div>
<div class='item'>
企业版售前及售后使用咨询：400-606-0201
</div>
</div>
</div>
</div>
</div>
</div>
<div class='bottombar'>
<div class='ui container'>
<div class='ui grid'>
<div class='five wide column partner'>
本站带宽由 <a href="https://www.anchnet.com/" target="_blank" title="anchnet"><img alt="51idc" src="/51idc.png" /></a> 提供
</div>
<div class='eleven wide column right aligned'>
<div class='copyright'>
<a href="http://www.miitbeian.gov.cn/">粤ICP备12009483号-8</a>
深圳市奥思网络科技有限公司版权所有
</div>
<i class='icon world'></i>
<a href="/language/zh-CN">简 体
</a>/
<a href="/language/zh-TW">繁 體
</a>/
<a href="/language/en">English
</a></div>
</div>
</div>
</div>
</footer>
<script>
  var officialEmail = $('#git-footer-email').text()
  $('#git-footer-main .icon-popup').popup({ position: 'bottom center' })
  $('#git-footer-email').text(officialEmail.replace('#', '@'))
</script>


<div class='side-toolbar'>
<div class='button toolbar-help'>
<i class='iconfont icon-help'></i>
</div>
<div class='ui popup left center dark'>点此查找更多帮助</div>
<div class='toolbar-help-dialog'>
<div class='toolbar-dialog-header'>
<h3 class='toolbar-dialog-title'>搜索帮助</h3>
<form accept-charset="UTF-8" action="/help/load_keywords_data" class="toolbar-help-search-form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
<div class='ui icon input fluid toolbar-help-search'>
<input name='keywords' placeholder='请输入产品名称或问题' type='text'>
<i class='icon search'></i>
</div>
</form>

<i class='iconfont icon-close toolbar-dialog-close-icon'></i>
</div>
<div class='toolbar-dialog-content'>
<div class='toolbar-help-hot-search'>
<div class='toolbar-list'>
<div class='toolbar-list-item'>
<a href="/help/articles/4114">Git 仓库基础操作</a>
</div>
<div class='toolbar-list-item'>
<a href="/help/articles/4166">企业版和个人版功能对比</a>
</div>
<div class='toolbar-list-item'>
<a href="/help/articles/4194">如何处理代码冲突</a>
</div>
<div class='toolbar-list-item'>
<a href="/help/articles/4202">在小程序Web开发工具中使用Git做版本管理</a>
</div>
<div class='toolbar-list-item'>
<a href="/help/articles/4232">仓库体积过大，如何减小？</a>
</div>
<div class='toolbar-list-item'>
<a href="/help/articles/4233">组织私有成员超额，如何处理？</a>
</div>
<div class='toolbar-list-item'>
<a href="/help/articles/4234">个人私有成员超过5人，怎么办？</a>
</div>
<div class='toolbar-list-item'>
<a href="/help/articles/4235">Git LFS 操作指南</a>
</div>
</div>
</div>
<div class='toolbar-help-search-reseult'>
<div class='toolbar-help-flex-column'>
<div class='ui centered inline loader toolbar-help-loader'></div>
<div class='toolbar-list'></div>
<div class='toolbar-help-link-to-help'>
<a href="" target="_blank">查看更多搜索结果</a>
</div>
</div>
</div>
</div>
</div>
<script>
  var opt = { position: 'left center' };
  var $helpSideToolbar = $(".button.toolbar-help");
  
  $(function() {
    if (false) {
      $helpSideToolbar.popup(opt);
    } else {
      $helpSideToolbar.popup('show', opt);
      setTimeout(function() {
        $helpSideToolbar.popup('hide', opt);
      }, 3000);
    }
  })
</script>

<div class='button share-link'>
<i class='iconfont icon-share'></i>
</div>
<div class='ui popup dark'>
<div class='header'>
分享到
</div>
<div class='bdsharebuttonbox' style='display: flex'>
<a class='iconfont icon-home-service-wechat' data-cmd='weixin' title='分享到微信'></a>
<a class='iconfont icon-weibo' data-cmd='tsina' title='分享到新浪微博'></a>
<a class='iconfont icon-qq' data-cmd='sqq' title='分享到QQ好友'></a>
<a class='iconfont icon-qzone' data-cmd='qzone' title='分享到QQ空间'></a>
</div>
</div>
<div class='popup button' id='home-comment'>
<i class='iconfont icon-comment'></i>
</div>
<div class='ui popup dark'>评论</div>
<div class='toolbar-appeal popup button'>
<i class='iconfont icon-report'></i>
</div>
<div class='ui popup dark'>
仓库举报
</div>
<script>
  $('.toolbar-appeal').popup({ position: 'left center' });
</script>

<div class='button gotop popup' id='gotop'>
<i class='iconfont icon-top'></i>
</div>
<div class='ui popup dark'>回到顶部</div>
</div>
<div class='ui modal tiny form' id='unlanding-complaint-modal'>
<i class='iconfont icon-close close'></i>
<div class='header'>
登陆提示
</div>
<div class='content'>
该操作需登陆码云账号，请先登录后再操作。
</div>
<div class='actions'>
<div class='ui button blank cancel'>
下次吧
</div>
<div class='ui orange icon button ok'>
去登陆
</div>
</div>
</div>
<script>
  var $elm = $('.toolbar-appeal'),
      $unlandingModal = $('#unlanding-complaint-modal');
  
  $elm.on('click', function() {
    $unlandingModal.modal('show');
  })
  
  $unlandingModal.modal({
    onApprove: function() {
      window.location.href = '/login';
    }
  })
</script>

<style>
  .side-toolbar .bdsharebuttonbox a {
    font-size: 24px;
    color: white !important;
    opacity: 0.9;
    margin: 6px 6px 0px 6px;
    background-image: none;
    text-indent: 0;
    height: auto;
    width: auto;
  }
</style>
<script>
  (function() {
    $('#project-user-message').popup({
      position: 'left center'
    });
  
  }).call(this);
</script>
<script>
  Gitee.initSideToolbar({
    hasComment: true,
    commentUrl: '/zTree/zTree_v3#tree_comm_title'
  })
</script>
<script>
  window._bd_share_config = {
    "common": {
      "bdSnsKey": {},
      "bdText": document.title,
      "bdMini": "1",
      "bdMiniList": ["bdxc","tqf","douban","bdhome","sqq","thx","ibaidu","meilishuo","mogujie","diandian","huaban","duitang","hx","fx","youdao","sdo","qingbiji","people","xinhua","mail","isohu","yaolan","wealink","ty","iguba","fbook","twi","linkedin","h163","evernotecn","copy","print"],
      "bdPic": "",
      "bdStyle": "1",
      "bdSize": "32"
    },
    "share": {}
  }
</script>
<script src="/bd_share/static/api/js/share.js" type="text/javascript"></script>



<script>
  (function() {
    this.__gac = {
      domain: 'www.oschina.net'
    };
  
  }).call(this);
</script>
<script defer src='//www.oschina.net/public/javascripts/cjl/ga.js?t=20160926' type='text/javascript'></script>

</body>
</html>
